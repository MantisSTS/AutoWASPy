[
  {
    "id": "MASTG-TEST-0017",
    "title": "Testing Confirm Credentials",
    "category": "Authentication and Authorization",
    "description": "Make sure that the unlocked key is used during the application flow. For example, the key may be used to decrypt local storage or a message received from a remote endpoint. If the application simply c...",
    "full_description": "## Overview\n\n## Static Analysis\n\nMake sure that the unlocked key is used during the application flow. For example, the key may be used to decrypt local storage or a message received from a remote endpoint. If the application simply checks whether the user has unlocked the key or not, the application may be vulnerable to a local authentication bypass.\n\n## Static Analysis\n\nMake sure that the unlocked key is used during the application flow. For example, the key may be used to decrypt local storage or a message received from a remote endpoint. If the application simply checks whether the user has unlocked the key or not, the application may be vulnerable to a local authentication bypass.\n\n## Dynamic Analysis\n\nValidate the duration of time (seconds) for which the key is authorized to be used after the user is successfully authenticated. This is only needed if `setUserAuthenticationRequired` is used."
  },
  {
    "id": "MASTG-TEST-0018",
    "title": "Testing Biometric Authentication",
    "category": "Authentication and Authorization",
    "description": "Note that there are quite some vendor/third party SDKs, which provide biometric support, but which have their own insecurities. Be very cautious when using third party SDKs to handle sensitive authent...",
    "full_description": "## Overview\n\n## Static Analysis\n\nNote that there are quite some vendor/third party SDKs, which provide biometric support, but which have their own insecurities. Be very cautious when using third party SDKs to handle sensitive authentication logic.\n\n## Static Analysis\n\nNote that there are quite some vendor/third party SDKs, which provide biometric support, but which have their own insecurities. Be very cautious when using third party SDKs to handle sensitive authentication logic.\n\n## Dynamic Analysis\n\nPlease take a look at this detailed [blog article about the Android KeyStore and Biometric authentication](https://labs.withsecure.com/blog/how-secure-is-your-android-keystore-authentication \"How Secure is your Android Keystore Authentication?\"). This research includes two Frida scripts which can be used to test insecure implementations of biometric authentication and try to bypass them:\n\n- [Fingerprint bypass](https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/fingerprint-bypass.js \"Fingerprint Bypass\"): This Frida script will bypass authentication when the `CryptoObject` is not used in the `authenticate` method of the `BiometricPrompt` class. The authentication implementation relies on the callback `onAuthenticationSucceded` being called.\n- [Fingerprint bypass via exception handling](https://github.com/FSecureLABS/android-keystore-audit/blob/master/frida-scripts/fingerprint-bypass-via-exception-handling.js \"Fingerprint bypass via exception handling\"): This Frida script will attempt to bypass authentication when the `CryptoObject` is used, but used in an incorrect way. The detailed explanation can be found in the section \"Crypto Object Exception Handling\" in the blog post."
  },
  {
    "id": "MASTG-TEST-0002",
    "title": "Testing Local Storage for Input Validation",
    "category": "Code Quality and Build Settings",
    "description": "For any publicly accessible data storage, any process can override the data. This means that input validation needs to be applied the moment the data is read back again.\n\n> Note: The same is true for",
    "full_description": "## Overview\n\nFor any publicly accessible data storage, any process can override the data. This means that input validation needs to be applied the moment the data is read back again.\n\n> Note: The same is true for private accessible data on a rooted device"
  },
  {
    "id": "MASTG-TEST-0025",
    "title": "Testing for Injection Flaws",
    "category": "Code Quality and Build Settings",
    "description": "An example of a vulnerable IPC mechanism is shown below.",
    "full_description": "## Overview\n\nTo test for [injection flaws](../../../Document/0x04h-Testing-Code-Quality.md#injection-flaws \"Injection Flaws\") you need to first rely on other tests and check for functionality that might have been exposed:\n\n- @MASTG-TEST-0028\n- @MASTG-TEST-0029\n- @MASTG-TEST-0035\n\n## Static Analysis\n\nAn example of a vulnerable IPC mechanism is shown below.\n\nYou can use _ContentProviders_ to access database information, and you can probe services to see if they return data. If data is not validated properly, the content provider may be prone to SQL injection while other apps are interacting with it. See the following vulnerable implementation of a _ContentProvider_.\n\n```xml\n<provider\n    android:name=\".OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation\"\n    android:authorities=\"sg.vp.owasp_mobile.provider.College\">\n</provider>\n```\n\nThe `AndroidManifest.xml` above defines a content provider that's exported and therefore available to all other apps. The `query` function in the `OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation.java` class should be inspected.\n\n```java\n@Override\npublic Cursor query(Uri uri, String[] projection, String selection,String[] selectionArgs, String sortOrder) {\n    SQLiteQueryBuilder qb = new SQLiteQueryBuilder();\n    qb.setTables(STUDENTS_TABLE_NAME);\n\n    switch (uriMatcher.match(uri)) {\n        case STUDENTS:\n            qb.setProjectionMap(STUDENTS_PROJECTION_MAP);\n            break;\n\n        case STUDENT_ID:\n            // SQL Injection when providing an ID\n            qb.appendWhere( _ID + \"=\" + uri.getPathSegments().get(1));\n            Log.e(\"appendWhere\",uri.getPathSegments().get(1).toString());\n            break;\n\n        default:\n            throw new IllegalArgumentException(\"Unknown URI \" + uri);\n    }\n\n    if (sortOrder == null || sortOrder == \"\"){\n        /**\n         * By default sort on student names\n         */\n        sortOrder = NAME;\n    }\n    Cursor c = qb.query(db, projection, selection, selectionArgs,null, null, sortOrder);\n\n    /**\n     * register to watch a content URI for changes\n     */\n    c.setNotificationUri(getContext().getContentResolver(), uri);\n    return c;\n}\n```\n\nWhile the user is providing a STUDENT_ID at `content://sg.vp.owasp_mobile.provider.College/students`, the query statement is prone to SQL injection. Obviously [prepared statements](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html \"OWASP SQL Injection Prevention Cheat Sheet\") must be used to avoid SQL injection, but [input validation](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html \"OWASP Input Validation Cheat Sheet\") should also be applied so that only input that the app is expecting is processed.\n\nAll app functions that process data coming in through the UI should implement input validation:\n\n- For user interface input, [Android Saripaar v2](https://github.com/ragunathjawahar/android-saripaar \"Android Saripaar v2\") can be used.\n- For input from IPC or URL schemes, a validation function should be created. For example, the following determines whether the [string is alphanumeric](https://stackoverflow.com/questions/11241690/regex-for-checking-if-a-string-is-strictly-alphanumeric \"Input Validation\"):\n\n```java\npublic boolean isAlphaNumeric(String s){\n    String pattern= \"^[a-zA-Z0-9]*$\";\n    return s.matches(pattern);\n}\n```\n\nAn alternative to validation functions is type conversion, with, for example, `Integer.parseInt` if only integers are expected. The [OWASP Input Validation Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html \"OWASP Input Validation Cheat Sheet\") contains more information about this topic.\n\n## Dynamic Analysis\n\nThe tester should manually test the input fields with strings like `OR 1=1--` if, for example, a local SQL injection vulnerability has been identified.\n\nOn a rooted device, the command content can be used to query the data from a content provider. The following command queries the vulnerable function described above.\n\n```bash\n# content query --uri content://sg.vp.owasp_mobile.provider.College/students\n```\n\nSQL injection can be exploited with the following command. Instead of getting the record for Bob only, the user can retrieve all data.\n\n```bash\n# content query --uri content://sg.vp.owasp_mobile.provider.College/students --where \"name='Bob') OR 1=1--''\"\n```"
  },
  {
    "id": "MASTG-TEST-0026",
    "title": "Testing Implicit Intents",
    "category": "Code Quality and Build Settings",
    "description": "Inspect the Android Manifest and look for any `<intent>` signatures defined inside [<queries> blocks](https://developer.android.com/guide/topics/manifest/queries-element \"Android queries\") (which spec...",
    "full_description": "## Overview\n\nWhen testing for [implicit intents](../../../Document/0x05h-Testing-Platform-Interaction.md#implicit-intents) you need to check if they are vulnerable to injection attacks or potentially leaking sensitive data.\n\n## Static Analysis\n\nInspect the Android Manifest and look for any `<intent>` signatures defined inside [<queries> blocks](https://developer.android.com/guide/topics/manifest/queries-element \"Android queries\") (which specify the set of other apps an app intends to interact with), check if it contains any system actions (e.g. `android.intent.action.GET_CONTENT`, `android.intent.action.PICK`, `android.media.action.IMAGE_CAPTURE`, etc.) and browse the source code for their occurrence.\n\nFor example, the following `Intent` doesn't specify any concrete component, meaning that it's an implicit intent. It sets the action `android.intent.action.GET_CONTENT` to ask the user for input data and then the app starts the intent by `startActivityForResult` and specifying an image chooser.\n\n```java\nIntent intent = new Intent();\nintent.setAction(\"android.intent.action.GET_CONTENT\");\nstartActivityForResult(Intent.createChooser(intent, \"\"), REQUEST_IMAGE);\n```\n\nThe app uses `startActivityForResult` instead of `startActivity`, indicating that it expects a result (in this case an image), so you should check how the return value of the intent is handled by looking for the `onActivityResult` callback. If the return value of the intent isn't properly validated, an attacker may be able to read arbitrary files or execute arbitrary code from the app's internal `/data/data/<appname>' storage. A full description of this type of attack can be found in the [following blog post](https://blog.oversecured.com/Interception-of-Android-implicit-intents \" Current attacks on implicit intents\").\n\n### Case 1: Arbitrary File Read\n\nIn this example we're going to see how an attacker can read arbitrary files from within the app's internal storage `/data/data/<appname>` due to the improper validation of the return value of the intent.\n\nThe `performAction` method in the following example reads the implicit intents return value, which can be an attacker provided URI and hands it to `getFileItemFromUri`. This method copies the file to a temp folder, which is usual if this file is displayed internally. But if the app stores the URI provided file in an external temp directory e.g by calling `getExternalCacheDir` or `getExternalFilesDir` an attacker can read this file after setting the permission `android.permission.READ_EXTERNAL_STORAGE`.\n\n```java\nprivate void performAction(Action action){\n  ...\n  Uri data = intent.getData();\n  if (!(data == null || (fileItemFromUri = getFileItemFromUri(data)) == null)) {\n      ...\n  }\n}\n\nprivate FileItem getFileItemFromUri(Context, context, Uri uri){\n  String fileName = UriExtensions.getFileName(uri, context);\n  File file = new File(getExternalCacheDir(), \"tmp\");\n  file.createNewFile();\n  copy(context.openInputStream(uri), new FileOutputStream(file));\n  ...\n}\n```\n\nThe following is the source of a malicious app that exploits the above vulnerable code.\n\nAndroidManifest.xml\n\n```xml\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<application>\n  <activity android:name=\".EvilContentActivity\">\n      <intent-filter android:priority=\"999\">\n          <action android:name=\"android.intent.action.GET_CONTENT\" />\n          <data android:mimeType=\"*/*\" />\n      </intent-filter>\n  </activity>\n</application>\n```\n\nEvilContentActivity.java\n\n```java\npublic class EvilContentActivity extends Activity{\n  @Override\n  protected void OnCreate(@Nullable Bundle savedInstanceState){\n    super.OnCreate(savedInstanceState);\n    setResult(-1, new Intent().setData(Uri.parse(\"file:///data/data/<victim_app>/shared_preferences/session.xml\")));\n    finish();\n  }\n}\n```\n\nIf the user selects the malicious app to handle the intent, the attacker can now steal the `session.xml` file from the app's internal storage. In the previous example, the victim must explicitly select the attacker's malicious app in a dialog. However, developers may choose to suppress this dialog and automatically determine a recipient for the intent. This would allow the attack to occur without any additional user interaction.\n\nThe following code sample implements this automatic selection of the recipient. By specifying a priority in the malicious app's intent filter, the attacker can influence the selection sequence.\n\n```java\nIntent intent = new Intent(\"android.intent.action.GET_CONTENT\");\nfor(ResolveInfo info : getPackageManager().queryIntentActivities(intent, 0)) {\n    intent.setClassName(info.activityInfo.packageName, info.activityInfo.name);\n    startActivityForResult(intent);\n    return;\n}\n```\n\n### Case 2: Arbitrary Code Execution\n\nAn improperly handled return value of an implicit intent can lead to arbitrary code execution if the victim app allows `content://` and `file://` URLs.\n\nAn attacker can implement a [`ContentProvider`](https://developer.android.com/reference/android/content/ContentProvider \"Android ContentProvider\") that contains `public Cursor query(...)` to set an arbitrary file (in this case _lib.so_), and if the victim loads this file from the content provider by executing `copy` the attacker's `ParcelFileDescriptor openFile(...)` method will be executed and return a malicious _fakelib.so_.\n\nAndroidManifest.xml\n\n```xml\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n<application>\n  <activity android:name=\".EvilContentActivity\">\n      <intent-filter android:priority=\"999\">\n          <action android:name=\"android.intent.action.GET_CONTENT\" />\n          <data android:mimeType=\"*/*\" />\n      </intent-filter>\n  </activity>\n  <provider android:name=\".EvilContentProvider\" android:authorities=\"com.attacker.evil\" android:enabled=\"true\" android:exported=\"true\"></provider>\n</application>\n```\n\nEvilContentProvider.java\n\n```java\npublic Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n    MatrixCursor matrixCursor = new MatrixCursor(new String[]{\"_display_name\"});\n    matrixCursor.addRow(new Object[]{\"../lib-main/lib.so\"});\n    return matrixCursor;\n}\npublic ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n    return ParcelFileDescriptor.open(new File(\"/data/data/com.attacker/fakelib.so\"), ParcelFileDescriptor.MODE_READ_ONLY);\n}\n```\n\nEvilContentActivity.java\n\n```java\npublic class EvilContentActivity extends Activity{\n  @Override\n  protected void OnCreate(@Nullable Bundle savedInstanceState){\n    super.OnCreate(savedInstanceState);\n    setResult(-1, new Intent().setData(Uri.parse(\"content:///data/data/com.attacker/fakelib.so\")));\n    finish();\n  }\n}\n```\n\n## Dynamic Analysis\n\nA convenient way to dynamically test for implicit intents, especially to identify potentially leaked sensitive data, is to use Frida or frida-trace and hook the `startActivityForResult` and `onActivityResult` methods and inspect the provided intents and the data they contain."
  },
  {
    "id": "MASTG-TEST-0027",
    "title": "Testing for URL Loading in WebViews",
    "category": "Code Quality and Build Settings",
    "description": "To test if the app is overriding the default page navigation logic by configuring a `WebViewClient` you should search for and inspect the following interception callback functions:",
    "full_description": "## Overview\n\nIn order to test for [URL loading in WebViews](../../../Document/0x05h-Testing-Platform-Interaction.md#url-loading-in-webviews \"URL Loading in WebViews\") you need to carefully analyze [handling page navigation](https://developer.android.com/guide/webapps/webview#HandlingNavigation \"Handling page navigation\"), especially when users might be able to navigate away from a trusted environment. The default and safest behavior on Android is to let the default web browser open any link that the user might click inside the WebView. However, this default logic can be modified by configuring a `WebViewClient` which allows navigation requests to be handled by the app itself.\n\n## Static Analysis\n\n### Check for Page Navigation Handling Override\n\nTo test if the app is overriding the default page navigation logic by configuring a `WebViewClient` you should search for and inspect the following interception callback functions:\n\n- `shouldOverrideUrlLoading` allows your application to either abort loading WebViews with suspicious content by returning `true` or allow the WebView to load the URL by returning `false`. Considerations:\n    - This method is not called for POST requests.\n    - This method is not called for XmlHttpRequests, iFrames, \"src\" attributes included in HTML or `<script>` tags. Instead, `shouldInterceptRequest` should take care of this.\n- `shouldInterceptRequest` allows the application to return the data from resource requests. If the return value is null, the WebView will continue to load the resource as usual. Otherwise, the data returned by the `shouldInterceptRequest` method is used. Considerations:\n    - This callback is invoked for a variety of URL schemes (e.g., `http(s):`, `data:`, `file:`, etc.), not only those schemes which send requests over the network.\n    - This is not called for `javascript:` or `blob:` URLs, or for assets accessed via `file:///android_asset/` or `file:///android_res/` URLs.\n  In the case of redirects, this is only called for the initial resource URL, not any subsequent redirect URLs.\n    - When Safe Browsing is enabled, these URLs still undergo Safe Browsing checks but the developer can allow the URL with `setSafeBrowsingWhitelist` or even ignore the warning via the `onSafeBrowsingHit` callback.\n\nAs you can see there are a lot of points to consider when testing the security of WebViews that have a WebViewClient configured, so be sure to carefully read and understand all of them by checking the [`WebViewClient` Documentation](https://developer.android.com/reference/android/webkit/WebViewClient \"WebViewClient\").\n\n### Check for EnableSafeBrowsing Disabled\n\nWhile the default value of `EnableSafeBrowsing` is `true`, some applications might opt to disable it. To verify that SafeBrowsing is enabled, inspect the AndroidManifest.xml file and make sure that the configuration below is not present:\n\n```xml\n<manifest>\n    <application>\n        <meta-data android:name=\"android.webkit.WebView.EnableSafeBrowsing\"\n                   android:value=\"false\" />\n        ...\n    </application>\n</manifest>\n```\n\n## Dynamic Analysis\n\nA convenient way to dynamically test deep linking is to use Frida or frida-trace and hook the `shouldOverrideUrlLoading`, `shouldInterceptRequest` methods while using the app and clicking on links within the WebView. Be sure to also hook other related [`Uri`](https://developer.android.com/reference/android/net/Uri \"Uri class\") methods such as `getHost`, `getScheme` or `getPath` which are typically used to inspect the requests and match known patterns or deny lists."
  },
  {
    "id": "MASTG-TEST-0034",
    "title": "Testing Object Persistence",
    "category": "Code Quality and Build Settings",
    "description": "Search the source code for the following keywords:",
    "full_description": "## Overview\n\nTo test for [object persistence](../../../Document/0x05h-Testing-Platform-Interaction.md#object-persistence \"Object Persistence\") being used for storing sensitive information on the device, first identify all instances of object serialization and check if they carry any sensitive data. If yes, check if it is properly protected against eavesdropping or unauthorized modification.\n\nThere are a few generic remediation steps that you can always take:\n\n1. Make sure that sensitive data has been encrypted and HMACed/signed after serialization/persistence. Evaluate the signature or HMAC before you use the data. See the chapter \"[Android Cryptographic APIs](../../../Document/0x05e-Testing-Cryptography.md)\" for more details.\n2. Make sure that the keys used in step 1 can't be extracted easily. The user and/or application instance should be properly authenticated/authorized to obtain the keys. See the chapter \"[Data Storage on Android](../../../Document/0x05d-Testing-Data-Storage.md)\" for more details.\n3. Make sure that the data within the de-serialized object is carefully validated before it is actively used (e.g., no exploit of business/application logic).\n\nFor high-risk applications that focus on availability, we recommend that you use `Serializable` only when the serialized classes are stable. Second, we recommend not using reflection-based persistence because\n\n- the attacker could find the method's signature via the String-based argument\n- the attacker might be able to manipulate the reflection-based steps to execute business logic.\n\n## Static Analysis\n\n### Object Serialization\n\nSearch the source code for the following keywords:\n\n- `import java.io.Serializable`\n- `implements Serializable`\n\n### JSON\n\nIf you need to counter memory-dumping, make sure that very sensitive information is not stored in the JSON format because you can't guarantee prevention of anti-memory dumping techniques with the standard libraries. You can check for the following keywords in the corresponding libraries:\n\n**`JSONObject`** Search the source code for the following keywords:\n\n- `import org.json.JSONObject;`\n- `import org.json.JSONArray;`\n\n**`GSON`** Search the source code for the following keywords:\n\n- `import com.google.gson`\n- `import com.google.gson.annotations`\n- `import com.google.gson.reflect`\n- `import com.google.gson.stream`\n- `new Gson();`\n- Annotations such as `@Expose`, `@JsonAdapter`, `@SerializedName`,`@Since`, and `@Until`\n\n**`Jackson`** Search the source code for the following keywords:\n\n- `import com.fasterxml.jackson.core`\n- `import org.codehaus.jackson` for the older version.\n\n### ORM\n\nWhen you use an ORM library, make sure that the data is stored in an encrypted database and the class representations are individually encrypted before storing it. See the chapters \"[Data Storage on Android](../../../Document/0x05d-Testing-Data-Storage.md)\" and \"[Android Cryptographic APIs](../../../Document/0x05e-Testing-Cryptography.md)\" for more details. You can check for the following keywords in the corresponding libraries:\n\n**`OrmLite`** Search the source code for the following keywords:\n\n- `import com.j256.*`\n- `import com.j256.dao`\n- `import com.j256.db`\n- `import com.j256.stmt`\n- `import com.j256.table\\`\n\nPlease make sure that logging is disabled.\n\n**`SugarORM`** Search the source code for the following keywords:\n\n- `import com.github.satyan`\n- `extends SugarRecord<Type>`\n- In the AndroidManifest, there will be `meta-data` entries with values such as `DATABASE`, `VERSION`, `QUERY_LOG` and `DOMAIN_PACKAGE_NAME`.\n\nMake sure that `QUERY_LOG` is set to false.\n\n**`GreenDAO`** Search the source code for the following keywords:\n\n- `import org.greenrobot.greendao.annotation.Convert`\n- `import org.greenrobot.greendao.annotation.Entity`\n- `import org.greenrobot.greendao.annotation.Generated`\n- `import org.greenrobot.greendao.annotation.Id`\n- `import org.greenrobot.greendao.annotation.Index`\n- `import org.greenrobot.greendao.annotation.NotNull`\n- `import org.greenrobot.greendao.annotation.*`\n- `import org.greenrobot.greendao.database.Database`\n- `import org.greenrobot.greendao.query.Query`\n\n**`ActiveAndroid`** Search the source code for the following keywords:\n\n- `ActiveAndroid.initialize(<contextReference>);`\n- `import com.activeandroid.Configuration`\n- `import com.activeandroid.query.*`\n\n**`Realm`** Search the source code for the following keywords:\n\n- `import io.realm.RealmObject;`\n- `import io.realm.annotations.PrimaryKey;`\n\n### Parcelable\n\nMake sure that appropriate security measures are taken when sensitive information is stored in an Intent via a Bundle that contains a Parcelable. Use explicit Intents and verify proper additional security controls when using application-level IPC (e.g., signature verification, intent-permissions, crypto).\n\n## Dynamic Analysis\n\nThere are several ways to perform dynamic analysis:\n\n1. For the actual persistence: Use the techniques described in the data storage chapter.\n2. For reflection-based approaches: Use @MASTG-TOOL-0001 to hook into the deserialization methods or add unprocessable information to the serialized objects to see how they are handled (e.g., whether the application crashes or extra information can be extracted by enriching the objects)."
  },
  {
    "id": "MASTG-TEST-0036",
    "title": "Testing Enforced Updating",
    "category": "Code Quality and Build Settings",
    "description": "To test for [enforced updating](../../../Document/0x05h-Testing-Platform-Interaction.md#enforced-updating \"Enforced Updating\") you need to check if the app has support for in-app updates and validate",
    "full_description": "## Overview\n\nTo test for [enforced updating](../../../Document/0x05h-Testing-Platform-Interaction.md#enforced-updating \"Enforced Updating\") you need to check if the app has support for in-app updates and validate if it's properly enforced so that the user is not able to continue using the app without updating it first."
  },
  {
    "id": "MASTG-TEST-0042",
    "title": "Checking for Weaknesses in Third Party Libraries",
    "category": "Code Quality and Build Settings",
    "description": "Detecting vulnerabilities in third party dependencies can be done by means of the OWASP Dependency checker. This is best done by using a gradle plugin, such as [`dependency-check-gradle`](https://gith...",
    "full_description": "## Overview\n\n## Static Analysis\n\nDetecting vulnerabilities in third party dependencies can be done by means of the OWASP Dependency checker. This is best done by using a gradle plugin, such as [`dependency-check-gradle`](https://github.com/jeremylong/dependency-check-gradle \"dependency-check-gradle\").\nIn order to use the plugin, the following steps need to be applied:\nInstall the plugin from the Maven central repository by adding the following script to your build.gradle:\n\n```default\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.owasp:dependency-check-gradle:3.2.0'\n    }\n}\n\napply plugin: 'org.owasp.dependencycheck'\n```\n\nOnce gradle has invoked the plugin, you can create a report by running:\n\n```bash\ngradle assemble\ngradle dependencyCheckAnalyze --info\n```\n\nThe report will be in `build/reports` unless otherwise configured. Use the report in order to analyze the vulnerabilities found. See remediation on what to do given the vulnerabilities found with the libraries.\n\nPlease be advised that the plugin requires to download a vulnerability feed. Consult the documentation in case issues arise with the plugin.\n\nLastly, please note that for hybrid applications, one will have to check the JavaScript dependencies with RetireJS. Similarly for Xamarin, one will have to check the C# dependencies.\n\nWhen a library is found to contain vulnerabilities, then the following reasoning applies:\n\n- Is the library packaged with the application? Then check whether the library has a version in which the vulnerability is patched. If not, check whether the vulnerability actually affects the application. If that is the case or might be the case in the future, then look for an alternative which provides similar functionality, but without the vulnerabilities.\n- Is the library not packaged with the application? See if there is a patched version in which the vulnerability is fixed. If this is not the case, check if the implications of the vulnerability for the build-process. Could the vulnerability impede a build or weaken the security of the build-pipeline? Then try looking for an alternative in which the vulnerability is fixed.\n\nWhen the sources are not available, one can decompile the app and check the JAR files. When Dexguard or @MASTG-TOOL-0022 are applied properly, then version information about the library is often obfuscated and therefore gone. Otherwise you can still find the information very often in the comments of the Java files of given libraries. Tools such as MobSF can help in analyzing the possible libraries packed with the application. If you can retrieve the version of the library, either via comments, or via specific methods used in certain versions, you can look them up for CVEs by hand.\n\nIf the application is a high-risk application, you will end up vetting the library manually. In that case, there are specific requirements for native code, which you can find in the chapter \"[Testing Code Quality](../../../Document/0x04h-Testing-Code-Quality.md)\". Next to that, it is good to vet whether all best practices for software engineering are applied.\n\n## Static Analysis\n\nDetecting vulnerabilities in third party dependencies can be done by means of the OWASP Dependency checker. This is best done by using a gradle plugin, such as [`dependency-check-gradle`](https://github.com/jeremylong/dependency-check-gradle \"dependency-check-gradle\").\nIn order to use the plugin, the following steps need to be applied:\nInstall the plugin from the Maven central repository by adding the following script to your build.gradle:\n\n```default\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.owasp:dependency-check-gradle:3.2.0'\n    }\n}\n\napply plugin: 'org.owasp.dependencycheck'\n```\n\nOnce gradle has invoked the plugin, you can create a report by running:\n\n```bash\ngradle assemble\ngradle dependencyCheckAnalyze --info\n```\n\nThe report will be in `build/reports` unless otherwise configured. Use the report in order to analyze the vulnerabilities found. See remediation on what to do given the vulnerabilities found with the libraries.\n\nPlease be advised that the plugin requires to download a vulnerability feed. Consult the documentation in case issues arise with the plugin.\n\nLastly, please note that for hybrid applications, one will have to check the JavaScript dependencies with RetireJS. Similarly for Xamarin, one will have to check the C# dependencies.\n\nWhen a library is found to contain vulnerabilities, then the following reasoning applies:\n\n- Is the library packaged with the application? Then check whether the library has a version in which the vulnerability is patched. If not, check whether the vulnerability actually affects the application. If that is the case or might be the case in the future, then look for an alternative which provides similar functionality, but without the vulnerabilities.\n- Is the library not packaged with the application? See if there is a patched version in which the vulnerability is fixed. If this is not the case, check if the implications of the vulnerability for the build-process. Could the vulnerability impede a build or weaken the security of the build-pipeline? Then try looking for an alternative in which the vulnerability is fixed.\n\nWhen the sources are not available, one can decompile the app and check the JAR files. When Dexguard or @MASTG-TOOL-0022 are applied properly, then version information about the library is often obfuscated and therefore gone. Otherwise you can still find the information very often in the comments of the Java files of given libraries. Tools such as MobSF can help in analyzing the possible libraries packed with the application. If you can retrieve the version of the library, either via comments, or via specific methods used in certain versions, you can look them up for CVEs by hand.\n\nIf the application is a high-risk application, you will end up vetting the library manually. In that case, there are specific requirements for native code, which you can find in the chapter \"[Testing Code Quality](../../../Document/0x04h-Testing-Code-Quality.md)\". Next to that, it is good to vet whether all best practices for software engineering are applied.\n\n## Dynamic Analysis\n\nThe dynamic analysis of this section comprises validating whether the copyrights of the licenses have been adhered to. This often means that the application should have an `about` or `EULA` section in which the copyright statements are noted as required by the license of the third party library."
  },
  {
    "id": "MASTG-TEST-0043",
    "title": "Memory Corruption Bugs",
    "category": "Code Quality and Build Settings",
    "description": "There are various items to look for:",
    "full_description": "## Overview\n\n## Static Analysis\n\nThere are various items to look for:\n\n- Are there native code parts? If so: check for the given issues in the general memory corruption section. Native code can easily be spotted given JNI-wrappers, .CPP/.H/.C files, NDK or other native frameworks.\n- Is there Java code or Kotlin code? Look for Serialization/deserialization issues, such as described in [A brief history of Android deserialization vulnerabilities](https://securitylab.github.com/research/android-deserialization-vulnerabilities \"android deserialization\").\n\nNote that there can be Memory leaks in Java/Kotlin code as well. Look for various items, such as: BroadcastReceivers which are not unregistered, static references to `Activity` or `View` classes, Singleton classes that have references to `Context`, Inner Class references, Anonymous Class references, AsyncTask references, Handler references, Threading done wrong, TimerTask references. For more details, please check:\n\n- [9 ways to avoid memory leaks in Android](https://android.jlelse.eu/9-ways-to-avoid-memory-leaks-in-android-b6d81648e35e \"9 ways to avoid memory leaks in Android\")\n- [Memory Leak Patterns in Android](https://android.jlelse.eu/memory-leak-patterns-in-android-4741a7fcb570 \"Memory Leak Patterns in Android\").\n\n## Static Analysis\n\nThere are various items to look for:\n\n- Are there native code parts? If so: check for the given issues in the general memory corruption section. Native code can easily be spotted given JNI-wrappers, .CPP/.H/.C files, NDK or other native frameworks.\n- Is there Java code or Kotlin code? Look for Serialization/deserialization issues, such as described in [A brief history of Android deserialization vulnerabilities](https://securitylab.github.com/research/android-deserialization-vulnerabilities \"android deserialization\").\n\nNote that there can be Memory leaks in Java/Kotlin code as well. Look for various items, such as: BroadcastReceivers which are not unregistered, static references to `Activity` or `View` classes, Singleton classes that have references to `Context`, Inner Class references, Anonymous Class references, AsyncTask references, Handler references, Threading done wrong, TimerTask references. For more details, please check:\n\n- [9 ways to avoid memory leaks in Android](https://android.jlelse.eu/9-ways-to-avoid-memory-leaks-in-android-b6d81648e35e \"9 ways to avoid memory leaks in Android\")\n- [Memory Leak Patterns in Android](https://android.jlelse.eu/memory-leak-patterns-in-android-4741a7fcb570 \"Memory Leak Patterns in Android\").\n\n## Dynamic Analysis\n\nThere are various steps to take:\n\n- In case of native code: use Valgrind or Mempatrol to analyze the memory usage and memory calls made by the code.\n- In case of Java/Kotlin code, try to recompile the app and use it with [Squares leak canary](https://github.com/square/leakcanary \"Leakcanary\").\n- Check with the [Memory Profiler from Android Studio](https://developer.android.com/studio/profile/memory-profiler \"Memory profiler\") for leakage.\n- Check with the [Android Java Deserialization Vulnerability Tester](https://github.com/modzero/modjoda \"Android Java Deserialization Vulnerability Tester\"), for serialization vulnerabilities."
  },
  {
    "id": "MASTG-TEST-0044",
    "title": "Make Sure That Free Security Features Are Activated",
    "category": "Code Quality and Build Settings",
    "description": "Test the app native libraries to determine if they have the PIE and stack smashing protections enabled.",
    "full_description": "## Overview\n\n## Static Analysis\n\nTest the app native libraries to determine if they have the PIE and stack smashing protections enabled.\n\nYou can use @MASTG-TOOL-0129 to get the binary information. We'll use the @MASTG-APP-0015 v1.0 APK as an example.\n\nAll native libraries must have `canary` and `pic` both set to `true`.\n\nThat's the case for `libnative-lib.so`:\n\n```sh\nrabin2 -I lib/x86_64/libnative-lib.so | grep -E \"canary|pic\"\ncanary   true\npic      true\n```\n\nBut not for `libtool-checker.so`:\n\n```sh\nrabin2 -I lib/x86_64/libtool-checker.so | grep -E \"canary|pic\"\ncanary   false\npic      true\n```\n\nIn this example, `libtool-checker.so` must be recompiled with stack smashing protection support.\n\n## Static Analysis\n\nTest the app native libraries to determine if they have the PIE and stack smashing protections enabled.\n\nYou can use @MASTG-TOOL-0129 to get the binary information. We'll use the @MASTG-APP-0015 v1.0 APK as an example.\n\nAll native libraries must have `canary` and `pic` both set to `true`.\n\nThat's the case for `libnative-lib.so`:\n\n```sh\nrabin2 -I lib/x86_64/libnative-lib.so | grep -E \"canary|pic\"\ncanary   true\npic      true\n```\n\nBut not for `libtool-checker.so`:\n\n```sh\nrabin2 -I lib/x86_64/libtool-checker.so | grep -E \"canary|pic\"\ncanary   false\npic      true\n```\n\nIn this example, `libtool-checker.so` must be recompiled with stack smashing protection support."
  },
  {
    "id": "MASTG-TEST-0013",
    "title": "Testing Symmetric Cryptography",
    "category": "Cryptography",
    "description": "Identify all the instances of symmetric key encryption in code and look for any mechanism which loads or provides a symmetric key. You can look for:",
    "full_description": "## Overview\n\n## Static Analysis\n\nIdentify all the instances of symmetric key encryption in code and look for any mechanism which loads or provides a symmetric key. You can look for:\n\n- symmetric algorithms (such as `DES`, `AES`, etc.)\n- specifications for a key generator (such as `KeyGenParameterSpec`, `KeyPairGeneratorSpec`, `KeyPairGenerator`, `KeyGenerator`, `KeyProperties`, etc.)\n- classes importing `java.security.*`, `javax.crypto.*`, `android.security.*`, `android.security.keystore.*`\n\nCheck also the [list of common cryptographic configuration issues](../../../Document/0x04g-Testing-Cryptography.md#common-configuration-issues).\n\nFor each identified instance verify if the used symmetric keys:\n\n- are not part of the application resources\n- cannot be derived from known values\n- are not hardcoded in code\n\nFor each hardcoded symmetric key, verify that is not used in security-sensitive contexts as the only method of encryption.\n\nAs an example we illustrate how to locate the use of a hardcoded encryption key. First disassemble and decompile (@MASTG-TECH-0017) the app to obtain Java code, e.g. by using @MASTG-TOOL-0018.\n\nNow search the files for the usage of the `SecretKeySpec` class, e.g. by simply recursively grepping on them or using jadx search function:\n\n```bash\ngrep -r \"SecretKeySpec\"\n```\n\nThis will return all classes using the `SecretKeySpec` class. Now examine those files and trace which variables are used to pass the key material. The figure below shows the result of performing this assessment on a production ready application. We can clearly locate the use of a static encryption key that is hardcoded and initialized in the static byte array `Encrypt.keyBytes`.\n\n<img src=\"Images/Chapters/0x5e/static_encryption_key.png\" width=\"600px\"/>\n\n## Static Analysis\n\nIdentify all the instances of symmetric key encryption in code and look for any mechanism which loads or provides a symmetric key. You can look for:\n\n- symmetric algorithms (such as `DES`, `AES`, etc.)\n- specifications for a key generator (such as `KeyGenParameterSpec`, `KeyPairGeneratorSpec`, `KeyPairGenerator`, `KeyGenerator`, `KeyProperties`, etc.)\n- classes importing `java.security.*`, `javax.crypto.*`, `android.security.*`, `android.security.keystore.*`\n\nCheck also the [list of common cryptographic configuration issues](../../../Document/0x04g-Testing-Cryptography.md#common-configuration-issues).\n\nFor each identified instance verify if the used symmetric keys:\n\n- are not part of the application resources\n- cannot be derived from known values\n- are not hardcoded in code\n\nFor each hardcoded symmetric key, verify that is not used in security-sensitive contexts as the only method of encryption.\n\nAs an example we illustrate how to locate the use of a hardcoded encryption key. First disassemble and decompile (@MASTG-TECH-0017) the app to obtain Java code, e.g. by using @MASTG-TOOL-0018.\n\nNow search the files for the usage of the `SecretKeySpec` class, e.g. by simply recursively grepping on them or using jadx search function:\n\n```bash\ngrep -r \"SecretKeySpec\"\n```\n\nThis will return all classes using the `SecretKeySpec` class. Now examine those files and trace which variables are used to pass the key material. The figure below shows the result of performing this assessment on a production ready application. We can clearly locate the use of a static encryption key that is hardcoded and initialized in the static byte array `Encrypt.keyBytes`.\n\n<img src=\"Images/Chapters/0x5e/static_encryption_key.png\" width=\"600px\"/>\n\n## Dynamic Analysis\n\nYou can use @MASTG-TECH-0033 on cryptographic methods to determine input / output values such as the keys that are being used. Monitor file system access while cryptographic operations are being performed to assess where key material is written to or read from. For example, monitor the file system by using the [API monitor](https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security#8-api-monitor---android-only) of @MASTG-TOOL-0037."
  },
  {
    "id": "MASTG-TEST-0014",
    "title": "Testing the Configuration of Cryptographic Standard Algorithms",
    "category": "Cryptography",
    "description": "Identify all the instances of the cryptographic primitives in code. Identify all custom cryptography implementations. You can look for:",
    "full_description": "## Overview\n\n## Static Analysis\n\nIdentify all the instances of the cryptographic primitives in code. Identify all custom cryptography implementations. You can look for:\n\n- classes `Cipher`, `Mac`, `MessageDigest`, `Signature`\n- interfaces `Key`, `PrivateKey`, `PublicKey`, `SecretKey`\n- functions `getInstance`, `generateKey`\n- exceptions `KeyStoreException`, `CertificateException`, `NoSuchAlgorithmException`\n- classes which uses `java.security.*`, `javax.crypto.*`, `android.security.*` and `android.security.keystore.*` packages.\n\nIdentify that all calls to getInstance use default `provider` of security services by not specifying it (it means AndroidOpenSSL aka Conscrypt). `Provider` can only be specified in `KeyStore` related code (in that situation `KeyStore` should be provided as `provider`). If other `provider` is specified it should be verified according to situation and business case (i.e. Android API version), and `provider` should be examined against potential vulnerabilities.\n\nEnsure that the best practices outlined in the \"[Cryptography for Mobile Apps](../../../Document/0x04g-Testing-Cryptography.md)\" chapter are followed. Look at [insecure and deprecated algorithms](../../../Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms) and [common configuration issues](../../../Document/0x04g-Testing-Cryptography.md#common-configuration-issues).\n\n## Static Analysis\n\nIdentify all the instances of the cryptographic primitives in code. Identify all custom cryptography implementations. You can look for:\n\n- classes `Cipher`, `Mac`, `MessageDigest`, `Signature`\n- interfaces `Key`, `PrivateKey`, `PublicKey`, `SecretKey`\n- functions `getInstance`, `generateKey`\n- exceptions `KeyStoreException`, `CertificateException`, `NoSuchAlgorithmException`\n- classes which uses `java.security.*`, `javax.crypto.*`, `android.security.*` and `android.security.keystore.*` packages.\n\nIdentify that all calls to getInstance use default `provider` of security services by not specifying it (it means AndroidOpenSSL aka Conscrypt). `Provider` can only be specified in `KeyStore` related code (in that situation `KeyStore` should be provided as `provider`). If other `provider` is specified it should be verified according to situation and business case (i.e. Android API version), and `provider` should be examined against potential vulnerabilities.\n\nEnsure that the best practices outlined in the \"[Cryptography for Mobile Apps](../../../Document/0x04g-Testing-Cryptography.md)\" chapter are followed. Look at [insecure and deprecated algorithms](../../../Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms) and [common configuration issues](../../../Document/0x04g-Testing-Cryptography.md#common-configuration-issues).\n\n## Dynamic Analysis\n\nYou can use @MASTG-TECH-0033 on cryptographic methods to determine input / output values such as the keys that are being used. Monitor file system access while cryptographic operations are being performed to assess where key material is written to or read from. For example, monitor the file system by using the [API monitor](https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security#8-api-monitor---android-only) of @MASTG-TOOL-0037."
  },
  {
    "id": "MASTG-TEST-0015",
    "title": "Testing the Purposes of Keys",
    "category": "Cryptography",
    "description": "Identify all instances where cryptography is used. You can look for:",
    "full_description": "## Overview\n\n## Static Analysis\n\nIdentify all instances where cryptography is used. You can look for:\n\n- classes `Cipher`, `Mac`, `MessageDigest`, `Signature`\n- interfaces `Key`, `PrivateKey`, `PublicKey`, `SecretKey`\n- functions `getInstance`, `generateKey`\n- exceptions `KeyStoreException`, `CertificateException`, `NoSuchAlgorithmException`\n- classes importing `java.security.*`, `javax.crypto.*`, `android.security.*`, `android.security.keystore.*`\n\nFor each identified instance, identify its purpose and its type. It can be used:\n\n- for encryption/decryption - to ensure data confidentiality\n- for signing/verifying - to ensure integrity of data (as well as accountability in some cases)\n- for maintenance - to protect keys during certain sensitive operations (such as being imported to the KeyStore)\n\nAdditionally, you should identify the business logic which uses identified instances of cryptography.\n\nDuring verification the following checks should be performed:\n\n- are all keys used according to the purpose defined during its creation? (it is relevant to KeyStore keys, which can have KeyProperties defined)\n- for asymmetric keys, is the private key being exclusively used for signing and the public key encryption?\n- are symmetric keys used for multiple purposes? A new symmetric key should be generated if it's used in a different context.\n- is cryptography used according to its business purpose?\n\n## Static Analysis\n\nIdentify all instances where cryptography is used. You can look for:\n\n- classes `Cipher`, `Mac`, `MessageDigest`, `Signature`\n- interfaces `Key`, `PrivateKey`, `PublicKey`, `SecretKey`\n- functions `getInstance`, `generateKey`\n- exceptions `KeyStoreException`, `CertificateException`, `NoSuchAlgorithmException`\n- classes importing `java.security.*`, `javax.crypto.*`, `android.security.*`, `android.security.keystore.*`\n\nFor each identified instance, identify its purpose and its type. It can be used:\n\n- for encryption/decryption - to ensure data confidentiality\n- for signing/verifying - to ensure integrity of data (as well as accountability in some cases)\n- for maintenance - to protect keys during certain sensitive operations (such as being imported to the KeyStore)\n\nAdditionally, you should identify the business logic which uses identified instances of cryptography.\n\nDuring verification the following checks should be performed:\n\n- are all keys used according to the purpose defined during its creation? (it is relevant to KeyStore keys, which can have KeyProperties defined)\n- for asymmetric keys, is the private key being exclusively used for signing and the public key encryption?\n- are symmetric keys used for multiple purposes? A new symmetric key should be generated if it's used in a different context.\n- is cryptography used according to its business purpose?\n\n## Dynamic Analysis\n\nYou can use @MASTG-TECH-0033 on cryptographic methods to determine input / output values such as the keys that are being used. Monitor file system access while cryptographic operations are being performed to assess where key material is written to or read from. For example, monitor the file system by using the [API monitor](https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security#8-api-monitor---android-only) of @MASTG-TOOL-0037."
  },
  {
    "id": "MASTG-TEST-0016",
    "title": "Testing Random Number Generation",
    "category": "Cryptography",
    "description": "Identify all the instances of random number generators and look for either custom or well-known insecure classes. For instance, `java.util.Random` produces an identical sequence of numbers for each gi...",
    "full_description": "## Overview\n\n## Static Analysis\n\nIdentify all the instances of random number generators and look for either custom or well-known insecure classes. For instance, `java.util.Random` produces an identical sequence of numbers for each given seed value; consequently, the sequence of numbers is predictable. Instead a well-vetted algorithm should be chosen that is currently considered to be strong by experts in the field, and a well-tested implementations with adequate length seeds should be used.\n\nIdentify all instances of `SecureRandom` that are not created using the default constructor. Specifying the seed value may reduce randomness. Use only the [no-argument constructor of `SecureRandom`](https://wiki.sei.cmu.edu/confluence/display/java/MSC02-J.+Generate+strong+random+numbers \"Generation of Strong Random Numbers\") that uses the system-specified seed value to generate a 128-byte-long random number.\n\nIn general, if a PRNG is not advertised as being cryptographically secure (e.g. `java.util.Random`), then it is probably a statistical PRNG and should not be used in security-sensitive contexts.\nPseudo-random number generators [can produce predictable numbers](https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded \"Proper seeding of SecureRandom\") if the generator is known and the seed can be guessed. A 128-bit seed is a good starting point for producing a \"random enough\" number.\n\nOnce an attacker knows what type of weak pseudo-random number generator (PRNG) is used, it can be trivial to write a proof-of-concept to generate the next random value based on previously observed ones, as it was [done for Java Random](https://franklinta.com/2014/08/31/predicting-the-next-math-random-in-java/ \"Predicting the next Math.random() in Java\"). In case of very weak custom random generators it may be possible to observe the pattern statistically. Although the recommended approach would anyway be to decompile the APK and inspect the algorithm (see Static Analysis).\n\nIf you want to test for randomness, you can try to capture a large set of numbers and check with the Burp's [sequencer](https://portswigger.net/burp/documentation/desktop/tools/sequencer \"Burp\\'s Sequencer\") to see how good the quality of the randomness is.\n\n## Static Analysis\n\nIdentify all the instances of random number generators and look for either custom or well-known insecure classes. For instance, `java.util.Random` produces an identical sequence of numbers for each given seed value; consequently, the sequence of numbers is predictable. Instead a well-vetted algorithm should be chosen that is currently considered to be strong by experts in the field, and a well-tested implementations with adequate length seeds should be used.\n\nIdentify all instances of `SecureRandom` that are not created using the default constructor. Specifying the seed value may reduce randomness. Use only the [no-argument constructor of `SecureRandom`](https://wiki.sei.cmu.edu/confluence/display/java/MSC02-J.+Generate+strong+random+numbers \"Generation of Strong Random Numbers\") that uses the system-specified seed value to generate a 128-byte-long random number.\n\nIn general, if a PRNG is not advertised as being cryptographically secure (e.g. `java.util.Random`), then it is probably a statistical PRNG and should not be used in security-sensitive contexts.\nPseudo-random number generators [can produce predictable numbers](https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded \"Proper seeding of SecureRandom\") if the generator is known and the seed can be guessed. A 128-bit seed is a good starting point for producing a \"random enough\" number.\n\nOnce an attacker knows what type of weak pseudo-random number generator (PRNG) is used, it can be trivial to write a proof-of-concept to generate the next random value based on previously observed ones, as it was [done for Java Random](https://franklinta.com/2014/08/31/predicting-the-next-math-random-in-java/ \"Predicting the next Math.random() in Java\"). In case of very weak custom random generators it may be possible to observe the pattern statistically. Although the recommended approach would anyway be to decompile the APK and inspect the algorithm (see Static Analysis).\n\nIf you want to test for randomness, you can try to capture a large set of numbers and check with the Burp's [sequencer](https://portswigger.net/burp/documentation/desktop/tools/sequencer \"Burp\\'s Sequencer\") to see how good the quality of the randomness is.\n\n## Dynamic Analysis\n\nYou can use @MASTG-TECH-0033 on the mentioned classes and methods to determine input / output values being used."
  },
  {
    "id": "MASTG-TEST-0019",
    "title": "Testing Data Encryption on the Network",
    "category": "Network Communication",
    "description": "First, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make sure that sensitive information is sent over secure channels by using [`HttpsURLCon...",
    "full_description": "## Overview\n\n## Static Analysis\n\n### Testing Network Requests over Secure Protocols\n\nFirst, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make sure that sensitive information is sent over secure channels by using [`HttpsURLConnection`](https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html \"HttpsURLConnection\") or [`SSLSocket`](https://developer.android.com/reference/javax/net/ssl/SSLSocket.html \"SSLSocket\") (for socket-level communication using TLS).\n\n### Testing Network API Usage\n\nNext, even when using a low-level API which is supposed to make secure connections (such as `SSLSocket`), be aware that it has to be securely implemented. For instance, `SSLSocket` **doesn't** verify the hostname. Use `getDefaultHostnameVerifier` to verify the hostname. The Android developer documentation includes a [code example](https://developer.android.com/training/articles/security-ssl.html#WarningsSslSocket \"Warnings About Using SSLSocket Directly\").\n\n### Testing for Cleartext Traffic\n\nNext, you should ensure that the app is not allowing cleartext HTTP traffic. Since Android 9 (API level 28) cleartext HTTP traffic is blocked by default (thanks to the [default Network Security Configuration](../../../Document/0x05g-Testing-Network-Communication.md#default-configurations)) but there are multiple ways in which an application can still send it:\n\n- Setting the [`android:usesCleartextTraffic`](https://developer.android.com/guide/topics/manifest/application-element#usesCleartextTraffic \"Android documentation - usesCleartextTraffic flag\") attribute of the `<application>` tag in the AndroidManifest.xml file. Note that this flag is ignored in case the Network Security Configuration is configured.\n- Configuring the Network Security Configuration to enable cleartext traffic by setting the `cleartextTrafficPermitted` attribute to true on `<domain-config>` elements.\n- Using low-level APIs (e.g. [`Socket`](https://developer.android.com/reference/java/net/Socket \"Socket class\")) to set up a custom HTTP connection.\n- Using a cross-platform framework (e.g. Flutter, Xamarin, ...), as these typically have their own implementations for HTTP libraries.\n\nAll of the above cases must be carefully analyzed as a whole. For example, even if the app does not permit cleartext traffic in its Android Manifest or Network Security Configuration, it might actually still be sending HTTP traffic. That could be the case if it's using a low-level API (for which Network Security Configuration is ignored) or a badly configured cross-platform framework.\n\nFor more information refer to the article [\"Security with HTTPS and SSL\"](https://developer.android.com/training/articles/security-ssl.html).\n\n## Static Analysis\n\n### Testing Network Requests over Secure Protocols\n\nFirst, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make sure that sensitive information is sent over secure channels by using [`HttpsURLConnection`](https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html \"HttpsURLConnection\") or [`SSLSocket`](https://developer.android.com/reference/javax/net/ssl/SSLSocket.html \"SSLSocket\") (for socket-level communication using TLS).\n\n### Testing Network API Usage\n\nNext, even when using a low-level API which is supposed to make secure connections (such as `SSLSocket`), be aware that it has to be securely implemented. For instance, `SSLSocket` **doesn't** verify the hostname. Use `getDefaultHostnameVerifier` to verify the hostname. The Android developer documentation includes a [code example](https://developer.android.com/training/articles/security-ssl.html#WarningsSslSocket \"Warnings About Using SSLSocket Directly\").\n\n### Testing for Cleartext Traffic\n\nNext, you should ensure that the app is not allowing cleartext HTTP traffic. Since Android 9 (API level 28) cleartext HTTP traffic is blocked by default (thanks to the [default Network Security Configuration](../../../Document/0x05g-Testing-Network-Communication.md#default-configurations)) but there are multiple ways in which an application can still send it:\n\n- Setting the [`android:usesCleartextTraffic`](https://developer.android.com/guide/topics/manifest/application-element#usesCleartextTraffic \"Android documentation - usesCleartextTraffic flag\") attribute of the `<application>` tag in the AndroidManifest.xml file. Note that this flag is ignored in case the Network Security Configuration is configured.\n- Configuring the Network Security Configuration to enable cleartext traffic by setting the `cleartextTrafficPermitted` attribute to true on `<domain-config>` elements.\n- Using low-level APIs (e.g. [`Socket`](https://developer.android.com/reference/java/net/Socket \"Socket class\")) to set up a custom HTTP connection.\n- Using a cross-platform framework (e.g. Flutter, Xamarin, ...), as these typically have their own implementations for HTTP libraries.\n\nAll of the above cases must be carefully analyzed as a whole. For example, even if the app does not permit cleartext traffic in its Android Manifest or Network Security Configuration, it might actually still be sending HTTP traffic. That could be the case if it's using a low-level API (for which Network Security Configuration is ignored) or a badly configured cross-platform framework.\n\nFor more information refer to the article [\"Security with HTTPS and SSL\"](https://developer.android.com/training/articles/security-ssl.html).\n\n## Dynamic Analysis\n\nIntercept the tested app's incoming and outgoing network traffic and make sure that this traffic is encrypted. You can intercept network traffic in any of the following ways:\n\n- Capture all HTTP(S) and Websocket traffic with an interception proxy like @MASTG-TOOL-0079 or @MASTG-TOOL-0077 and make sure all requests are made via HTTPS instead of HTTP.\n- Interception proxies like Burp and @MASTG-TOOL-0079 will show web related traffic primarily (e.g. HTTP(S), Web Sockets, gRPC, etc.). You can, however, use a Burp plugin such as [Burp-non-HTTP-Extension](https://github.com/summitt/Burp-Non-HTTP-Extension \"Burp-non-HTTP-Extension\") or the tool [mitm-relay](https://github.com/jrmdev/mitm_relay \"mitm-relay\") to decode and visualize communication via XMPP and other protocols.\n\n> Some applications may not work with proxies like Burp and ZAP because of Certificate Pinning. In such a scenario, please check @MASTG-TEST-0022.\n\nFor more details refer to:\n\n- [\"Intercepting Network Traffic Through MITM\"](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm)\n- @MASTG-TECH-0010"
  },
  {
    "id": "MASTG-TEST-0020",
    "title": "Testing the TLS Settings",
    "category": "Network Communication",
    "description": "Refer to section [\"Verifying the TLS Settings\"](../../../Document/0x04f-Testing-Network-Communication.md#verifying-the-tls-settings) in chapter \"Mobile App Network Communication\" for details.",
    "full_description": "## Overview\n\nRefer to section [\"Verifying the TLS Settings\"](../../../Document/0x04f-Testing-Network-Communication.md#verifying-the-tls-settings) in chapter \"Mobile App Network Communication\" for details."
  },
  {
    "id": "MASTG-TEST-0021",
    "title": "Testing Endpoint Identify Verification",
    "category": "Network Communication",
    "description": "Using TLS to transport sensitive information over the network is essential for security. However, encrypting communication between a mobile application and its backend API is not trivial. Developers o...",
    "full_description": "## Overview\n\n## Static Analysis\n\nUsing TLS to transport sensitive information over the network is essential for security. However, encrypting communication between a mobile application and its backend API is not trivial. Developers often decide on simpler but less secure solutions (e.g., those that accept any certificate) to facilitate the development process, and sometimes these weak solutions [make it into the production version](https://saschafahl.de/static/paper/androidssl2012.pdf \"Hunting Down Broken SSL in Android Apps\"), potentially exposing users to [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) attacks. See [\"CWE-295: Improper Certificate Validation\"](https://cwe.mitre.org/data/definitions/295.html \"CWE-295: Improper Certificate Validation\").\n\nTwo key issues should be addressed:\n\n- Verify that a certificate comes from a trusted source, i.e. a trusted CA (Certificate Authority).\n- Determine whether the endpoint server presents the right certificate.\n\nMake sure that the hostname and the certificate itself are verified correctly. Examples and common pitfalls are available in the [official Android documentation](https://developer.android.com/training/articles/security-ssl.html \"Android Documentation - SSL\"). Search the code for examples of `TrustManager` and `HostnameVerifier` usage. In the sections below, you can find examples of the kind of insecure usage that you should look for.\n\n> Note that from Android 8.0 (API level 26) onward, there is no support for SSLv3 and `HttpsURLConnection` will no longer perform a fallback to an insecure TLS/SSL protocol.\n\n### Verifying the Target SDK Version\n\nApplications targeting Android 7.0 (API level 24) or higher will use a **default Network Security Configuration that doesn't trust any user supplied CAs**, reducing the possibility of MITM attacks by luring users to install malicious CAs.\n\nDecode the app using apktool (@MASTG-TECH-0007) and verify that the `targetSdkVersion` in apktool.yml is equal to or higher than `24`.\n\n```txt\ngrep targetSdkVersion UnCrackable-Level3/apktool.yml\n  targetSdkVersion: '28'\n```\n\nHowever, even if `targetSdkVersion >=24`, the developer can disable default protections by using a custom Network Security Configuration defining a custom trust anchor **forcing the app to trust user supplied CAs**. See [\"Analyzing Custom Trust Anchors\"](#analyzing-custom-trust-anchors).\n\n### Analyzing Custom Trust Anchors\n\nSearch for the [Network Security Configuration](../../../Document/0x05g-Testing-Network-Communication.md#android-network-security-configuration) file and inspect any custom `<trust-anchors>` defining `<certificates src=\"user\">` (which should be avoided).\n\nYou should carefully analyze the [precedence of entries](https://developer.android.com/training/articles/security-config#ConfigInheritance):\n\n- If a value is not set in a `<domain-config>` entry or in a parent `<domain-config>`, the configurations in place will be based on the `<base-config>`\n- If not defined in this entry, the [default configurations](../../../Document/0x05g-Testing-Network-Communication.md#default-configurations) will be used.\n\nTake a look at this example of a Network Security Configuration for an app targeting Android 9 (API level 28):\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <domain-config>\n        <domain includeSubdomains=\"false\">owasp.org</domain>\n        <trust-anchors>\n            <certificates src=\"system\" />\n            <certificates src=\"user\" />\n        </trust-anchors>\n    </domain-config>\n</network-security-config>\n```\n\nSome observations:\n\n- There's no `<base-config>`, meaning that the [default configuration](../../../Document/0x05g-Testing-Network-Communication.md#default-configurations) for Android 9 (API level 28) or higher will be used for all other connections (only `system` CA will be trusted in principle).\n- However, the `<domain-config>` overrides the default configuration allowing the app to trust both `system` and `user` CAs for the indicated `<domain>` (owasp.org).\n- This doesn't affect subdomains because of `includeSubdomains=\"false\"`.\n\nPutting all together we can _translate_ the above Network Security Configuration to: \"the app trusts system and user CAs for the owasp.org domain, excluding its subdomains. For any other domains the app will trust the system CAs only\".\n\n### Verifying the Server Certificate\n\n`TrustManager` is a means of verifying conditions necessary for establishing a trusted connection in Android. The following conditions should be checked at this point:\n\n- Has the certificate been signed by a trusted CA?\n- Has the certificate expired?\n- Is the certificate self-signed?\n\nThe following code snippet is sometimes used during development and will accept any certificate, overwriting the functions `checkClientTrusted`, `checkServerTrusted`, and `getAcceptedIssuers`. Such implementations should be avoided, and, if they are necessary, they should be clearly separated from production builds to avoid built-in security flaws.\n\n```java\nTrustManager[] trustAllCerts = new TrustManager[] {\n    new X509TrustManager() {\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return new java.security.cert.X509Certificate[] {};\n        }\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType)\n            throws CertificateException {\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType)\n            throws CertificateException {\n        }\n    }\n };\n\n// SSLContext context\ncontext.init(null, trustAllCerts, new SecureRandom());\n```\n\n### WebView Server Certificate Verification\n\nSometimes applications use a WebView to render the website associated with the application. This is true of HTML/JavaScript-based frameworks such as Apache Cordova, which uses an internal WebView for application interaction. When a WebView is used, the mobile browser performs the server certificate validation. Ignoring any TLS error that occurs when the WebView tries to connect to the remote website is a bad practice.\n\nThe following code will ignore TLS issues, exactly like the WebViewClient custom implementation provided to the WebView:\n\n```java\nWebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.setWebViewClient(new WebViewClient(){\n    @Override\n    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n        //Ignore TLS certificate errors and instruct the WebViewClient to load the website\n        handler.proceed();\n    }\n});\n```\n\n### Apache Cordova Certificate Verification\n\nImplementation of the Apache Cordova framework's internal WebView usage will ignore [TLS errors](https://github.com/apache/cordova-android/blob/master/framework/src/org/apache/cordova/engine/SystemWebViewClient.java \"TLS errors ignoring by Apache Cordova in WebView\") in the method `onReceivedSslError` if the flag `android:debuggable` is enabled in the application manifest. Therefore, make sure that the app is not debuggable. See the test case \"Testing If the App is Debuggable\".\n\n### Hostname Verification\n\nAnother security flaw in client-side TLS implementations is the lack of hostname verification. Development environments usually use internal addresses instead of valid domain names, so developers often disable hostname verification (or force an application to allow any hostname) and simply forget to change it when their application goes to production. The following code disables hostname verification:\n\n```java\nfinal static HostnameVerifier NO_VERIFY = new HostnameVerifier() {\n    public boolean verify(String hostname, SSLSession session) {\n        return true;\n    }\n};\n```\n\nWith a built-in `HostnameVerifier`, accepting any hostname is possible:\n\n```java\nHostnameVerifier NO_VERIFY = org.apache.http.conn.ssl.SSLSocketFactory\n                             .ALLOW_ALL_HOSTNAME_VERIFIER;\n```\n\nMake sure that your application verifies a hostname before setting a trusted connection.\n\n## Static Analysis\n\nUsing TLS to transport sensitive information over the network is essential for security. However, encrypting communication between a mobile application and its backend API is not trivial. Developers often decide on simpler but less secure solutions (e.g., those that accept any certificate) to facilitate the development process, and sometimes these weak solutions [make it into the production version](https://saschafahl.de/static/paper/androidssl2012.pdf \"Hunting Down Broken SSL in Android Apps\"), potentially exposing users to [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) attacks. See [\"CWE-295: Improper Certificate Validation\"](https://cwe.mitre.org/data/definitions/295.html \"CWE-295: Improper Certificate Validation\").\n\nTwo key issues should be addressed:\n\n- Verify that a certificate comes from a trusted source, i.e. a trusted CA (Certificate Authority).\n- Determine whether the endpoint server presents the right certificate.\n\nMake sure that the hostname and the certificate itself are verified correctly. Examples and common pitfalls are available in the [official Android documentation](https://developer.android.com/training/articles/security-ssl.html \"Android Documentation - SSL\"). Search the code for examples of `TrustManager` and `HostnameVerifier` usage. In the sections below, you can find examples of the kind of insecure usage that you should look for.\n\n> Note that from Android 8.0 (API level 26) onward, there is no support for SSLv3 and `HttpsURLConnection` will no longer perform a fallback to an insecure TLS/SSL protocol.\n\n### Verifying the Target SDK Version\n\nApplications targeting Android 7.0 (API level 24) or higher will use a **default Network Security Configuration that doesn't trust any user supplied CAs**, reducing the possibility of MITM attacks by luring users to install malicious CAs.\n\nDecode the app using apktool (@MASTG-TECH-0007) and verify that the `targetSdkVersion` in apktool.yml is equal to or higher than `24`.\n\n```txt\ngrep targetSdkVersion UnCrackable-Level3/apktool.yml\n  targetSdkVersion: '28'\n```\n\nHowever, even if `targetSdkVersion >=24`, the developer can disable default protections by using a custom Network Security Configuration defining a custom trust anchor **forcing the app to trust user supplied CAs**. See [\"Analyzing Custom Trust Anchors\"](#analyzing-custom-trust-anchors).\n\n### Analyzing Custom Trust Anchors\n\nSearch for the [Network Security Configuration](../../../Document/0x05g-Testing-Network-Communication.md#android-network-security-configuration) file and inspect any custom `<trust-anchors>` defining `<certificates src=\"user\">` (which should be avoided).\n\nYou should carefully analyze the [precedence of entries](https://developer.android.com/training/articles/security-config#ConfigInheritance):\n\n- If a value is not set in a `<domain-config>` entry or in a parent `<domain-config>`, the configurations in place will be based on the `<base-config>`\n- If not defined in this entry, the [default configurations](../../../Document/0x05g-Testing-Network-Communication.md#default-configurations) will be used.\n\nTake a look at this example of a Network Security Configuration for an app targeting Android 9 (API level 28):\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <domain-config>\n        <domain includeSubdomains=\"false\">owasp.org</domain>\n        <trust-anchors>\n            <certificates src=\"system\" />\n            <certificates src=\"user\" />\n        </trust-anchors>\n    </domain-config>\n</network-security-config>\n```\n\nSome observations:\n\n- There's no `<base-config>`, meaning that the [default configuration](../../../Document/0x05g-Testing-Network-Communication.md#default-configurations) for Android 9 (API level 28) or higher will be used for all other connections (only `system` CA will be trusted in principle).\n- However, the `<domain-config>` overrides the default configuration allowing the app to trust both `system` and `user` CAs for the indicated `<domain>` (owasp.org).\n- This doesn't affect subdomains because of `includeSubdomains=\"false\"`.\n\nPutting all together we can _translate_ the above Network Security Configuration to: \"the app trusts system and user CAs for the owasp.org domain, excluding its subdomains. For any other domains the app will trust the system CAs only\".\n\n### Verifying the Server Certificate\n\n`TrustManager` is a means of verifying conditions necessary for establishing a trusted connection in Android. The following conditions should be checked at this point:\n\n- Has the certificate been signed by a trusted CA?\n- Has the certificate expired?\n- Is the certificate self-signed?\n\nThe following code snippet is sometimes used during development and will accept any certificate, overwriting the functions `checkClientTrusted`, `checkServerTrusted`, and `getAcceptedIssuers`. Such implementations should be avoided, and, if they are necessary, they should be clearly separated from production builds to avoid built-in security flaws.\n\n```java\nTrustManager[] trustAllCerts = new TrustManager[] {\n    new X509TrustManager() {\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return new java.security.cert.X509Certificate[] {};\n        }\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType)\n            throws CertificateException {\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType)\n            throws CertificateException {\n        }\n    }\n };\n\n// SSLContext context\ncontext.init(null, trustAllCerts, new SecureRandom());\n```\n\n### WebView Server Certificate Verification\n\nSometimes applications use a WebView to render the website associated with the application. This is true of HTML/JavaScript-based frameworks such as Apache Cordova, which uses an internal WebView for application interaction. When a WebView is used, the mobile browser performs the server certificate validation. Ignoring any TLS error that occurs when the WebView tries to connect to the remote website is a bad practice.\n\nThe following code will ignore TLS issues, exactly like the WebViewClient custom implementation provided to the WebView:\n\n```java\nWebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.setWebViewClient(new WebViewClient(){\n    @Override\n    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n        //Ignore TLS certificate errors and instruct the WebViewClient to load the website\n        handler.proceed();\n    }\n});\n```\n\n### Apache Cordova Certificate Verification\n\nImplementation of the Apache Cordova framework's internal WebView usage will ignore [TLS errors](https://github.com/apache/cordova-android/blob/master/framework/src/org/apache/cordova/engine/SystemWebViewClient.java \"TLS errors ignoring by Apache Cordova in WebView\") in the method `onReceivedSslError` if the flag `android:debuggable` is enabled in the application manifest. Therefore, make sure that the app is not debuggable. See the test case \"Testing If the App is Debuggable\".\n\n### Hostname Verification\n\nAnother security flaw in client-side TLS implementations is the lack of hostname verification. Development environments usually use internal addresses instead of valid domain names, so developers often disable hostname verification (or force an application to allow any hostname) and simply forget to change it when their application goes to production. The following code disables hostname verification:\n\n```java\nfinal static HostnameVerifier NO_VERIFY = new HostnameVerifier() {\n    public boolean verify(String hostname, SSLSession session) {\n        return true;\n    }\n};\n```\n\nWith a built-in `HostnameVerifier`, accepting any hostname is possible:\n\n```java\nHostnameVerifier NO_VERIFY = org.apache.http.conn.ssl.SSLSocketFactory\n                             .ALLOW_ALL_HOSTNAME_VERIFIER;\n```\n\nMake sure that your application verifies a hostname before setting a trusted connection.\n\n## Dynamic Analysis\n\nWhen testing an app targeting Android 7.0 (API level 24) or higher it should be effectively applying the Network Security Configuration and you shouldn't able to see the decrypted HTTPS traffic at first. However, if the app targets API levels below 24, the app will automatically accept the installed user certificates.\n\nTo test improper certificate verification launch a MITM attack using an interception proxy such as Burp. Try the following options:\n\n- **Self-signed certificate:**\n  1. In Burp, go to the **Proxy** tab and select the **Options** tab.\n  2. Go to the **Proxy Listeners** section, highlight your listener, and click **Edit**.\n  3. Go to the **Certificate** tab, check **Use a self-signed certificate**, and click **Ok**.\n  4. Run your application. If you're able to see HTTPS traffic, your application is accepting self-signed certificates.\n- **Accepting certificates with an untrusted CA:**\n  1. In Burp, go to the **Proxy** tab and select the **Options** tab.\n  2. Go to the **Proxy Listeners** section, highlight your listener, and click **Edit**.\n  3. Go to the **Certificate** tab, check **Generate a CA-signed certificate with a specific hostname**, and type in the backend server's hostname.\n  4. Run your application. If you're able to see HTTPS traffic, your application is accepting certificates with an untrusted CA.\n- **Accepting incorrect hostnames:**\n  1. In Burp, go to the **Proxy** tab and select the **Options** tab.\n  2. Go to the **Proxy Listeners** section, highlight your listener, and click **Edit**.\n  3. Go to the **Certificate** tab, check **Generate a CA-signed certificate with a specific hostname**, and type in an invalid hostname, e.g., example.org.\n  4. Run your application. If you're able to see HTTPS traffic, your application is accepting all hostnames.\n\nIf you're still not able to see any decrypted HTTPS traffic, your application might be implementing [certificate pinning](../../../Document/0x04f-Testing-Network-Communication.md#restricting-trust-identity-pinning)."
  },
  {
    "id": "MASTG-TEST-0022",
    "title": "Testing Custom Certificate Stores and Certificate Pinning",
    "category": "Network Communication",
    "description": "Inspect the Network Security Configuration looking for any `<pin-set>` elements. Check their `expiration` date, if any. If expired, certificate pinning will be disabled for the affected domains.",
    "full_description": "## Overview\n\n## Static Analysis\n\n### Network Security Configuration\n\nInspect the Network Security Configuration looking for any `<pin-set>` elements. Check their `expiration` date, if any. If expired, certificate pinning will be disabled for the affected domains.\n\n> **Testing Tip**: If a certificate pinning validation check has failed, the following event should be logged in the system logs (see @MASTG-TECH-0009):\n\n```bash\nI/X509Util: Failed to validate the certificate chain, error: Pin verification failed\n```\n\n### TrustManager\n\nImplementing certificate pinning involves three main steps:\n\n- Obtain the certificate of the desired host(s).\n- Make sure the certificate is in .bks format.\n- Pin the certificate to an instance of the default Apache Httpclient.\n\nTo analyze the correct implementation of certificate pinning, the HTTP client should load the KeyStore:\n\n```java\nInputStream in = resources.openRawResource(certificateRawResource);\nkeyStore = KeyStore.getInstance(\"BKS\");\nkeyStore.load(resourceStream, password);\n```\n\nOnce the KeyStore has been loaded, we can use the TrustManager that trusts the CAs in our KeyStore:\n\n```java\nString tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);\ntmf.init(keyStore);\n// Create an SSLContext that uses the TrustManager\n// SSLContext context = SSLContext.getInstance(\"TLS\");\nsslContext.init(null, tmf.getTrustManagers(), null);\n```\n\nThe app's implementation may be different, pinning against the certificate's public key only, the whole certificate, or a whole certificate chain.\n\n### Network Libraries and WebViews\n\nApplications that use third-party networking libraries may utilize the libraries' certificate pinning functionality. For example, [okhttp](https://github.com/square/okhttp/wiki/HTTPS \"okhttp library\") can be set up with the `CertificatePinner` as follows:\n\n```java\nOkHttpClient client = new OkHttpClient.Builder()\n        .certificatePinner(new CertificatePinner.Builder()\n            .add(\"example.com\", \"sha256/UwQAapahrjCOjYI3oLUx5AQxPBR02Jz6/E2pt0IeLXA=\")\n            .build())\n        .build();\n```\n\nApplications that use a WebView component may utilize the WebViewClient's event handler for some kind of \"certificate pinning\" of each request before the target resource is loaded. The following code shows an example verification:\n\n```java\nWebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.setWebViewClient(new WebViewClient(){\n    private String expectedIssuerDN = \"CN=Let's Encrypt Authority X3,O=Let's Encrypt,C=US;\";\n\n    @Override\n    public void onLoadResource(WebView view, String url)  {\n        //From Android API documentation about \"WebView.getCertificate()\":\n        //Gets the SSL certificate for the main top-level page\n        //or null if there is no certificate (the site is not secure).\n        //\n        //Available information on SslCertificate class are \"Issuer DN\", \"Subject DN\" and validity date helpers\n        SslCertificate serverCert = view.getCertificate();\n        if(serverCert != null){\n            //apply either certificate or public key pinning comparison here\n                //Throw exception to cancel resource loading...\n            }\n        }\n    }\n});\n```\n\nAlternatively, it is better to use an OkHttpClient with configured pins and let it act as a proxy overriding `shouldInterceptRequest` of the `WebViewClient`.\n\n### Xamarin Applications\n\nApplications developed in Xamarin will typically use `ServicePointManager` to implement pinning.\n\nNormally a function is created to check the certificate(s) and return the boolean value to the method `ServerCertificateValidationCallback`:\n\n```cs\n[Activity(Label = \"XamarinPinning\", MainLauncher = true)]\n    public class MainActivity : Activity\n    {\n        // SupportedPublicKey - Hexadecimal value of the public key.\n        // Use GetPublicKeyString() method to determine the public key of the certificate we want to pin. Uncomment the debug code in the ValidateServerCertificate function a first time to determine the value to pin.\n        private const string SupportedPublicKey = \"3082010A02820101009CD30CF05AE52E47B7725D3783B...\"; // Shortened for readability\n\n        private static bool ValidateServerCertificate(\n                object sender,\n                X509Certificate certificate,\n                X509Chain chain,\n                SslPolicyErrors sslPolicyErrors\n            )\n        {\n            //Log.Debug(\"Xamarin Pinning\",chain.ChainElements[X].Certificate.GetPublicKeyString());\n            //return true;\n            return SupportedPublicKey == chain.ChainElements[1].Certificate.GetPublicKeyString();\n        }\n\n        protected override void OnCreate(Bundle savedInstanceState)\n        {\n            System.Net.ServicePointManager.ServerCertificateValidationCallback += ValidateServerCertificate;\n            base.OnCreate(savedInstanceState);\n            SetContentView(Resource.Layout.Main);\n            TesteAsync(\"https://security.claudio.pt\");\n\n        }\n```\n\nIn this particular example we are pinning the intermediate CA of the certificate chain. The output of the HTTP response will be available in the system logs.\n\nSample Xamarin app with the previous example can be obtained on the [MASTG repository](https://github.com/OWASP/mastg/raw/master/Samples/Android/02_CertificatePinning/certificatePinningXamarin.apk \"Xamarin app with certificate pinning\")\n\nAfter decompressing the APK file, use a .NET decompiler like dotPeak, ILSpy or dnSpy to decompile the app dlls stored inside the 'Assemblies' folder and confirm the usage of the ServicePointManager.\n\nLearn more:\n\n- Certificate and Public Key Pinning with Xamarin - <https://thomasbandt.com/certificate-and-public-key-pinning-with-xamarin>\n- ServicePointManager - <https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager(v=vs.110).aspx>\n\n### Cordova Applications\n\nHybrid applications based on Cordova do not support Certificate Pinning natively, so plugins are used to achieve this. The most common one is [PhoneGap SSL Certificate Checker](https://github.com/EddyVerbruggen/SSLCertificateChecker-PhoneGap-Plugin \"PhoneGap SSL Certificate Checker plugin\"). The `check` method is used to confirm the fingerprint and callbacks will determine the next steps.\n\n```javascript\n  // Endpoint to verify against certificate pinning.\n  var server = \"https://www.owasp.org\";\n  // SHA256 Fingerprint (Can be obtained via \"openssl s_client -connect hostname:443 | openssl x509 -noout -fingerprint -sha256\"\n  var fingerprint = \"D8 EF 3C DF 7E F6 44 BA 04 EC D5 97 14 BB 00 4A 7A F5 26 63 53 87 4E 76 67 77 F0 F4 CC ED 67 B9\";\n\n  window.plugins.sslCertificateChecker.check(\n          successCallback,\n          errorCallback,\n          server,\n          fingerprint);\n\n   function successCallback(message) {\n     alert(message);\n     // Message is always: CONNECTION_SECURE.\n     // Now do something with the trusted server.\n   }\n\n   function errorCallback(message) {\n     alert(message);\n     if (message === \"CONNECTION_NOT_SECURE\") {\n       // There is likely a MITM attack going on, be careful!\n     } else if (message.indexOf(\"CONNECTION_FAILED\") >- 1) {\n       // There was no connection (yet). Internet may be down. Try again (a few times) after a little timeout.\n     }\n   }\n```\n\nAfter decompressing the APK file, Cordova/Phonegap files will be located in the /assets/www folder. The 'plugins' folder will give you the visibility of the plugins used. We will need to search for this methods in the JavaScript code of the application to confirm its usage.\n\n## Static Analysis\n\n### Network Security Configuration\n\nInspect the Network Security Configuration looking for any `<pin-set>` elements. Check their `expiration` date, if any. If expired, certificate pinning will be disabled for the affected domains.\n\n> **Testing Tip**: If a certificate pinning validation check has failed, the following event should be logged in the system logs (see @MASTG-TECH-0009):\n\n```bash\nI/X509Util: Failed to validate the certificate chain, error: Pin verification failed\n```\n\n### TrustManager\n\nImplementing certificate pinning involves three main steps:\n\n- Obtain the certificate of the desired host(s).\n- Make sure the certificate is in .bks format.\n- Pin the certificate to an instance of the default Apache Httpclient.\n\nTo analyze the correct implementation of certificate pinning, the HTTP client should load the KeyStore:\n\n```java\nInputStream in = resources.openRawResource(certificateRawResource);\nkeyStore = KeyStore.getInstance(\"BKS\");\nkeyStore.load(resourceStream, password);\n```\n\nOnce the KeyStore has been loaded, we can use the TrustManager that trusts the CAs in our KeyStore:\n\n```java\nString tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);\ntmf.init(keyStore);\n// Create an SSLContext that uses the TrustManager\n// SSLContext context = SSLContext.getInstance(\"TLS\");\nsslContext.init(null, tmf.getTrustManagers(), null);\n```\n\nThe app's implementation may be different, pinning against the certificate's public key only, the whole certificate, or a whole certificate chain.\n\n### Network Libraries and WebViews\n\nApplications that use third-party networking libraries may utilize the libraries' certificate pinning functionality. For example, [okhttp](https://github.com/square/okhttp/wiki/HTTPS \"okhttp library\") can be set up with the `CertificatePinner` as follows:\n\n```java\nOkHttpClient client = new OkHttpClient.Builder()\n        .certificatePinner(new CertificatePinner.Builder()\n            .add(\"example.com\", \"sha256/UwQAapahrjCOjYI3oLUx5AQxPBR02Jz6/E2pt0IeLXA=\")\n            .build())\n        .build();\n```\n\nApplications that use a WebView component may utilize the WebViewClient's event handler for some kind of \"certificate pinning\" of each request before the target resource is loaded. The following code shows an example verification:\n\n```java\nWebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.setWebViewClient(new WebViewClient(){\n    private String expectedIssuerDN = \"CN=Let's Encrypt Authority X3,O=Let's Encrypt,C=US;\";\n\n    @Override\n    public void onLoadResource(WebView view, String url)  {\n        //From Android API documentation about \"WebView.getCertificate()\":\n        //Gets the SSL certificate for the main top-level page\n        //or null if there is no certificate (the site is not secure).\n        //\n        //Available information on SslCertificate class are \"Issuer DN\", \"Subject DN\" and validity date helpers\n        SslCertificate serverCert = view.getCertificate();\n        if(serverCert != null){\n            //apply either certificate or public key pinning comparison here\n                //Throw exception to cancel resource loading...\n            }\n        }\n    }\n});\n```\n\nAlternatively, it is better to use an OkHttpClient with configured pins and let it act as a proxy overriding `shouldInterceptRequest` of the `WebViewClient`.\n\n### Xamarin Applications\n\nApplications developed in Xamarin will typically use `ServicePointManager` to implement pinning.\n\nNormally a function is created to check the certificate(s) and return the boolean value to the method `ServerCertificateValidationCallback`:\n\n```cs\n[Activity(Label = \"XamarinPinning\", MainLauncher = true)]\n    public class MainActivity : Activity\n    {\n        // SupportedPublicKey - Hexadecimal value of the public key.\n        // Use GetPublicKeyString() method to determine the public key of the certificate we want to pin. Uncomment the debug code in the ValidateServerCertificate function a first time to determine the value to pin.\n        private const string SupportedPublicKey = \"3082010A02820101009CD30CF05AE52E47B7725D3783B...\"; // Shortened for readability\n\n        private static bool ValidateServerCertificate(\n                object sender,\n                X509Certificate certificate,\n                X509Chain chain,\n                SslPolicyErrors sslPolicyErrors\n            )\n        {\n            //Log.Debug(\"Xamarin Pinning\",chain.ChainElements[X].Certificate.GetPublicKeyString());\n            //return true;\n            return SupportedPublicKey == chain.ChainElements[1].Certificate.GetPublicKeyString();\n        }\n\n        protected override void OnCreate(Bundle savedInstanceState)\n        {\n            System.Net.ServicePointManager.ServerCertificateValidationCallback += ValidateServerCertificate;\n            base.OnCreate(savedInstanceState);\n            SetContentView(Resource.Layout.Main);\n            TesteAsync(\"https://security.claudio.pt\");\n\n        }\n```\n\nIn this particular example we are pinning the intermediate CA of the certificate chain. The output of the HTTP response will be available in the system logs.\n\nSample Xamarin app with the previous example can be obtained on the [MASTG repository](https://github.com/OWASP/mastg/raw/master/Samples/Android/02_CertificatePinning/certificatePinningXamarin.apk \"Xamarin app with certificate pinning\")\n\nAfter decompressing the APK file, use a .NET decompiler like dotPeak, ILSpy or dnSpy to decompile the app dlls stored inside the 'Assemblies' folder and confirm the usage of the ServicePointManager.\n\nLearn more:\n\n- Certificate and Public Key Pinning with Xamarin - <https://thomasbandt.com/certificate-and-public-key-pinning-with-xamarin>\n- ServicePointManager - <https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager(v=vs.110).aspx>\n\n### Cordova Applications\n\nHybrid applications based on Cordova do not support Certificate Pinning natively, so plugins are used to achieve this. The most common one is [PhoneGap SSL Certificate Checker](https://github.com/EddyVerbruggen/SSLCertificateChecker-PhoneGap-Plugin \"PhoneGap SSL Certificate Checker plugin\"). The `check` method is used to confirm the fingerprint and callbacks will determine the next steps.\n\n```javascript\n  // Endpoint to verify against certificate pinning.\n  var server = \"https://www.owasp.org\";\n  // SHA256 Fingerprint (Can be obtained via \"openssl s_client -connect hostname:443 | openssl x509 -noout -fingerprint -sha256\"\n  var fingerprint = \"D8 EF 3C DF 7E F6 44 BA 04 EC D5 97 14 BB 00 4A 7A F5 26 63 53 87 4E 76 67 77 F0 F4 CC ED 67 B9\";\n\n  window.plugins.sslCertificateChecker.check(\n          successCallback,\n          errorCallback,\n          server,\n          fingerprint);\n\n   function successCallback(message) {\n     alert(message);\n     // Message is always: CONNECTION_SECURE.\n     // Now do something with the trusted server.\n   }\n\n   function errorCallback(message) {\n     alert(message);\n     if (message === \"CONNECTION_NOT_SECURE\") {\n       // There is likely a MITM attack going on, be careful!\n     } else if (message.indexOf(\"CONNECTION_FAILED\") >- 1) {\n       // There was no connection (yet). Internet may be down. Try again (a few times) after a little timeout.\n     }\n   }\n```\n\nAfter decompressing the APK file, Cordova/Phonegap files will be located in the /assets/www folder. The 'plugins' folder will give you the visibility of the plugins used. We will need to search for this methods in the JavaScript code of the application to confirm its usage.\n\n## Dynamic Analysis\n\nFollow the instructions from @MASTG-TEST-0021. If doing so doesn't lead to traffic being proxied, it may mean that certificate pinning is actually implemented and all security measures are in place. Does the same happen for all domains?\n\nAs a quick smoke test, you can try to bypass certificate pinning using @MASTG-TOOL-0038 as described in @MASTG-TECH-0012. Pinning related APIs being hooked by objection should appear in objection's output.\n\n<img src=\"Images/Chapters/0x05b/android_ssl_pinning_bypass.png\" width=\"600px\"/>\n\nHowever, keep in mind that:\n\n- the APIs might not be complete.\n- if nothing is hooked, that doesn't necessarily mean that the app doesn't implement pinning.\n\nIn both cases, the app or some of its components might implement custom pinning in a way that is [supported by objection](https://github.com/sensepost/objection/blob/master/agent/src/android/pinning.ts). Please check the static analysis section for specific pinning indicators and more in-depth testing."
  },
  {
    "id": "MASTG-TEST-0023",
    "title": "Testing the Security Provider",
    "category": "Network Communication",
    "description": "Applications based on the Android SDK should depend on GooglePlayServices. For example, in the gradle build file, you will find `compile 'com.google.android.gms:play-services-gcm:x.x.x'` in the depend...",
    "full_description": "## Overview\n\n## Static Analysis\n\nApplications based on the Android SDK should depend on GooglePlayServices. For example, in the gradle build file, you will find `compile 'com.google.android.gms:play-services-gcm:x.x.x'` in the dependencies block. You need to make sure that the `ProviderInstaller` class is called with either `installIfNeeded` or `installIfNeededAsync`. `ProviderInstaller` needs to be called by a component of the application as early as possible. Exceptions thrown by these methods should be caught and handled correctly. If the application cannot patch its security provider, it can either inform the API of its less secure state or restrict user actions (because all HTTPS traffic should be deemed riskier in this situation).\n\nIf you have access to the source code, check if the app handle any exceptions related to the security provider updates properly, and if it reports to the backend when the application is working with an unpatched security provider. The Android Developer documentation provides different examples showing [how to update the Security Provider to prevent SSL exploits](https://developer.android.com/privacy-and-security/security-gms-provider \"Updating Your Security Provider to Protect Against SSL Exploits\").\n\nLastly, make sure that NDK-based applications bind only to a recent and properly patched library that provides SSL/TLS functionality.\n\n## Static Analysis\n\nApplications based on the Android SDK should depend on GooglePlayServices. For example, in the gradle build file, you will find `compile 'com.google.android.gms:play-services-gcm:x.x.x'` in the dependencies block. You need to make sure that the `ProviderInstaller` class is called with either `installIfNeeded` or `installIfNeededAsync`. `ProviderInstaller` needs to be called by a component of the application as early as possible. Exceptions thrown by these methods should be caught and handled correctly. If the application cannot patch its security provider, it can either inform the API of its less secure state or restrict user actions (because all HTTPS traffic should be deemed riskier in this situation).\n\nIf you have access to the source code, check if the app handle any exceptions related to the security provider updates properly, and if it reports to the backend when the application is working with an unpatched security provider. The Android Developer documentation provides different examples showing [how to update the Security Provider to prevent SSL exploits](https://developer.android.com/privacy-and-security/security-gms-provider \"Updating Your Security Provider to Protect Against SSL Exploits\").\n\nLastly, make sure that NDK-based applications bind only to a recent and properly patched library that provides SSL/TLS functionality.\n\n## Dynamic Analysis\n\nWhen you have the source code:\n\n1. Run the application in debug mode, then create a breakpoint where the app will first contact the endpoint(s).\n2. Right click the highlighted code and select `Evaluate Expression`.\n3. Type `Security.getProviders()` and press enter.\n4. Check the providers and try to find `GmsCore_OpenSSL`, which should be the new top-listed provider.\n\nWhen you do not have the source code:\n\n1. Use @MASTG-TOOL-0001 to hook [`java.security.Security.getProviders()`](https://developer.android.com/reference/java/security/Security#getProviders()) or use a script @MASTG-TOOL-0032 like [@platix/get-android-security-provider-mstg-network-6](https://codeshare.frida.re/@platix/get-android-security-provider-mstg-network-6/).\n2. Determine whether the first provider is `GmsCore_OpenSSL`."
  },
  {
    "id": "MASTG-TEST-0007",
    "title": "Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms",
    "category": "Platform Interaction",
    "description": "The first step is to look at `AndroidManifest.xml` to detect content providers exposed by the app. You can identify content providers by the `<provider>` element. Complete the following steps:",
    "full_description": "## Overview\n\n## Static Analysis\n\nThe first step is to look at `AndroidManifest.xml` to detect content providers exposed by the app. You can identify content providers by the `<provider>` element. Complete the following steps:\n\n- Determine whether the value of the export tag (`android:exported`) is `\"true\"`. Even if it is not, the tag will be set to `\"true\"` automatically if an `<intent-filter>` has been defined for the tag. If the content is meant to be accessed only by the app itself, set `android:exported` to `\"false\"`. If not, set the flag to `\"true\"` and define proper read/write permissions.\n- Determine whether the data is being protected by a permission tag (`android:permission`). Permission tags limit exposure to other apps.\n- Determine whether the `android:protectionLevel` attribute has the value `signature`. This setting indicates that the data is intended to be accessed only by apps from the same enterprise (i.e., signed with the same key). To make the data accessible to other apps, apply a security policy with the `<permission>` element and set a proper `android:protectionLevel`. If you use `android:permission`, other applications must declare corresponding `<uses-permission>` elements in their manifests to interact with your content provider. You can use the `android:grantUriPermissions` attribute to grant more specific access to other apps; you can limit access with the `<grant-uri-permission>` element.\n\nInspect the source code to understand how the content provider is meant to be used. Search for the following keywords:\n\n- `android.content.ContentProvider`\n- `android.database.Cursor`\n- `android.database.sqlite`\n- `.query`\n- `.update`\n- `.delete`\n\n> To avoid SQL injection attacks within the app, use parameterized query methods, such as `query`, `update`, and `delete`. Be sure to properly sanitize all method arguments; for example, the `selection` argument could lead to SQL injection if it is made up of concatenated user input.\n\n If you expose a content provider, determine whether parameterized [query methods](https://developer.android.com/reference/android/content/ContentProvider.html#query%28android.net.Uri%2C%20java.lang.String[]%2C%20java.lang.String%2C%20java.lang.String[]%2C%20java.lang.String%29 \"Query method in ContentProvider Class\") (`query`, `update`, and `delete`) are being used to prevent SQL injection. If so, make sure all their arguments are properly sanitized.\n\nWe will use the vulnerable password manager app [Sieve](https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk \"Sieve - Vulnerable Password Manager\") as an example of a vulnerable content provider.\n\n### Inspect the Android Manifest\n\nIdentify all defined `<provider>` elements:\n\n```xml\n<provider\n      android:authorities=\"com.mwr.example.sieve.DBContentProvider\"\n      android:exported=\"true\"\n      android:multiprocess=\"true\"\n      android:name=\".DBContentProvider\">\n    <path-permission\n          android:path=\"/Keys\"\n          android:readPermission=\"com.mwr.example.sieve.READ_KEYS\"\n          android:writePermission=\"com.mwr.example.sieve.WRITE_KEYS\"\n     />\n</provider>\n<provider\n      android:authorities=\"com.mwr.example.sieve.FileBackupProvider\"\n      android:exported=\"true\"\n      android:multiprocess=\"true\"\n      android:name=\".FileBackupProvider\"\n/>\n```\n\nAs shown in the `AndroidManifest.xml` above, the application exports two content providers. Note that one path (\"/Keys\") is protected by read and write permissions.\n\n### Inspect the source code\n\nInspect the `query` function in the `DBContentProvider.java` file to determine whether any sensitive information is being leaked:\n\nExample in Java:\n\n```java\npublic Cursor query(final Uri uri, final String[] array, final String s, final String[] array2, final String s2) {\n    final int match = this.sUriMatcher.match(uri);\n    final SQLiteQueryBuilder sqLiteQueryBuilder = new SQLiteQueryBuilder();\n    if (match >= 100 && match < 200) {\n        sqLiteQueryBuilder.setTables(\"Passwords\");\n    }\n    else if (match >= 200) {\n        sqLiteQueryBuilder.setTables(\"Key\");\n    }\n    return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, (String)null, (String)null, s2);\n}\n```\n\nExample in Kotlin:\n\n```kotlin\nfun query(uri: Uri?, array: Array<String?>?, s: String?, array2: Array<String?>?, s2: String?): Cursor {\n        val match: Int = this.sUriMatcher.match(uri)\n        val sqLiteQueryBuilder = SQLiteQueryBuilder()\n        if (match >= 100 && match < 200) {\n            sqLiteQueryBuilder.tables = \"Passwords\"\n        } else if (match >= 200) {\n            sqLiteQueryBuilder.tables = \"Key\"\n        }\n        return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, null as String?, null as String?, s2)\n    }\n```\n\nHere we see that there are actually two paths, \"/Keys\" and \"/Passwords\", and the latter is not being protected in the manifest and is therefore vulnerable.\n\n When accessing a URI, the query statement returns all passwords and the path `Passwords/`. We will address this in the \"Dynamic Analysis\" section and show the exact URI that is required.\n\n## Static Analysis\n\nThe first step is to look at `AndroidManifest.xml` to detect content providers exposed by the app. You can identify content providers by the `<provider>` element. Complete the following steps:\n\n- Determine whether the value of the export tag (`android:exported`) is `\"true\"`. Even if it is not, the tag will be set to `\"true\"` automatically if an `<intent-filter>` has been defined for the tag. If the content is meant to be accessed only by the app itself, set `android:exported` to `\"false\"`. If not, set the flag to `\"true\"` and define proper read/write permissions.\n- Determine whether the data is being protected by a permission tag (`android:permission`). Permission tags limit exposure to other apps.\n- Determine whether the `android:protectionLevel` attribute has the value `signature`. This setting indicates that the data is intended to be accessed only by apps from the same enterprise (i.e., signed with the same key). To make the data accessible to other apps, apply a security policy with the `<permission>` element and set a proper `android:protectionLevel`. If you use `android:permission`, other applications must declare corresponding `<uses-permission>` elements in their manifests to interact with your content provider. You can use the `android:grantUriPermissions` attribute to grant more specific access to other apps; you can limit access with the `<grant-uri-permission>` element.\n\nInspect the source code to understand how the content provider is meant to be used. Search for the following keywords:\n\n- `android.content.ContentProvider`\n- `android.database.Cursor`\n- `android.database.sqlite`\n- `.query`\n- `.update`\n- `.delete`\n\n> To avoid SQL injection attacks within the app, use parameterized query methods, such as `query`, `update`, and `delete`. Be sure to properly sanitize all method arguments; for example, the `selection` argument could lead to SQL injection if it is made up of concatenated user input.\n\n If you expose a content provider, determine whether parameterized [query methods](https://developer.android.com/reference/android/content/ContentProvider.html#query%28android.net.Uri%2C%20java.lang.String[]%2C%20java.lang.String%2C%20java.lang.String[]%2C%20java.lang.String%29 \"Query method in ContentProvider Class\") (`query`, `update`, and `delete`) are being used to prevent SQL injection. If so, make sure all their arguments are properly sanitized.\n\nWe will use the vulnerable password manager app [Sieve](https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk \"Sieve - Vulnerable Password Manager\") as an example of a vulnerable content provider.\n\n### Inspect the Android Manifest\n\nIdentify all defined `<provider>` elements:\n\n```xml\n<provider\n      android:authorities=\"com.mwr.example.sieve.DBContentProvider\"\n      android:exported=\"true\"\n      android:multiprocess=\"true\"\n      android:name=\".DBContentProvider\">\n    <path-permission\n          android:path=\"/Keys\"\n          android:readPermission=\"com.mwr.example.sieve.READ_KEYS\"\n          android:writePermission=\"com.mwr.example.sieve.WRITE_KEYS\"\n     />\n</provider>\n<provider\n      android:authorities=\"com.mwr.example.sieve.FileBackupProvider\"\n      android:exported=\"true\"\n      android:multiprocess=\"true\"\n      android:name=\".FileBackupProvider\"\n/>\n```\n\nAs shown in the `AndroidManifest.xml` above, the application exports two content providers. Note that one path (\"/Keys\") is protected by read and write permissions.\n\n### Inspect the source code\n\nInspect the `query` function in the `DBContentProvider.java` file to determine whether any sensitive information is being leaked:\n\nExample in Java:\n\n```java\npublic Cursor query(final Uri uri, final String[] array, final String s, final String[] array2, final String s2) {\n    final int match = this.sUriMatcher.match(uri);\n    final SQLiteQueryBuilder sqLiteQueryBuilder = new SQLiteQueryBuilder();\n    if (match >= 100 && match < 200) {\n        sqLiteQueryBuilder.setTables(\"Passwords\");\n    }\n    else if (match >= 200) {\n        sqLiteQueryBuilder.setTables(\"Key\");\n    }\n    return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, (String)null, (String)null, s2);\n}\n```\n\nExample in Kotlin:\n\n```kotlin\nfun query(uri: Uri?, array: Array<String?>?, s: String?, array2: Array<String?>?, s2: String?): Cursor {\n        val match: Int = this.sUriMatcher.match(uri)\n        val sqLiteQueryBuilder = SQLiteQueryBuilder()\n        if (match >= 100 && match < 200) {\n            sqLiteQueryBuilder.tables = \"Passwords\"\n        } else if (match >= 200) {\n            sqLiteQueryBuilder.tables = \"Key\"\n        }\n        return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, null as String?, null as String?, s2)\n    }\n```\n\nHere we see that there are actually two paths, \"/Keys\" and \"/Passwords\", and the latter is not being protected in the manifest and is therefore vulnerable.\n\n When accessing a URI, the query statement returns all passwords and the path `Passwords/`. We will address this in the \"Dynamic Analysis\" section and show the exact URI that is required.\n\n## Dynamic Analysis\n\n### Testing Content Providers\n\nTo dynamically analyze an application's content providers, first enumerate the attack surface: pass the app's package name to the Drozer module `app.provider.info`:\n\n```bash\ndz> run app.provider.info -a com.mwr.example.sieve\n  Package: com.mwr.example.sieve\n  Authority: com.mwr.example.sieve.DBContentProvider\n  Read Permission: null\n  Write Permission: null\n  Content Provider: com.mwr.example.sieve.DBContentProvider\n  Multiprocess Allowed: True\n  Grant Uri Permissions: False\n  Path Permissions:\n  Path: /Keys\n  Type: PATTERN_LITERAL\n  Read Permission: com.mwr.example.sieve.READ_KEYS\n  Write Permission: com.mwr.example.sieve.WRITE_KEYS\n  Authority: com.mwr.example.sieve.FileBackupProvider\n  Read Permission: null\n  Write Permission: null\n  Content Provider: com.mwr.example.sieve.FileBackupProvider\n  Multiprocess Allowed: True\n  Grant Uri Permissions: False\n```\n\nIn this example, two content providers are exported. Both can be accessed without permission, except for the `/Keys` path in the `DBContentProvider`. With this information, you can reconstruct part of the content URIs to access the `DBContentProvider` (the URIs begin with `content://`).\n\nTo identify content provider URIs within the application, use Drozer's `scanner.provider.finduris` module. This module guesses paths and determines accessible content URIs in several ways:\n\n```bash\ndz> run scanner.provider.finduris -a com.mwr.example.sieve\nScanning com.mwr.example.sieve...\nUnable to Query content://com.mwr.example.sieve.DBContentProvider/\n...\nUnable to Query content://com.mwr.example.sieve.DBContentProvider/Keys\nAccessible content URIs:\ncontent://com.mwr.example.sieve.DBContentProvider/Keys/\ncontent://com.mwr.example.sieve.DBContentProvider/Passwords\ncontent://com.mwr.example.sieve.DBContentProvider/Passwords/\n```\n\nOnce you have a list of accessible content providers, try to extract data from each provider with the `app.provider.query` module:\n\n```bash\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical\n_id: 1\nservice: Email\nusername: incognitoguy50\npassword: PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64 - encoded)\nemail: incognitoguy50@gmail.com\n```\n\nYou can also use Drozer to insert, update, and delete records from a vulnerable content provider:\n\n- Insert record\n\n  ```bash\n  dz> run app.provider.insert content://com.vulnerable.im/messages\n                  --string date 1331763850325\n                  --string type 0\n                  --integer _id 7\n  ```\n\n- Update record\n\n  ```bash\n  dz> run app.provider.update content://settings/secure\n                  --selection \"name=?\"\n                  --selection-args assisted_gps_enabled\n                  --integer value 0\n  ```\n\n- Delete record\n\n  ```bash\n  dz> run app.provider.delete content://settings/secure\n                  --selection \"name=?\"\n                  --selection-args my_setting\n  ```\n\n### SQL Injection in Content Providers\n\nThe Android platform promotes SQLite databases for storing user data. Because these databases are based on SQL, they may be vulnerable to SQL injection. You can use the Drozer module `app.provider.query` to test for SQL injection by manipulating the projection and selection fields that are passed to the content provider:\n\n```default\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"'\"\nunrecognized token: \"' FROM Passwords\" (code 1): , while compiling: SELECT ' FROM Passwords\n\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection \"'\"\nunrecognized token: \"')\" (code 1): , while compiling: SELECT * FROM Passwords WHERE (')\n```\n\nIf an application is vulnerable to SQL Injection, it will return a verbose error message. SQL Injection on Android may be used to modify or query data from the vulnerable content provider. In the following example, the Drozer module `app.provider.query` is used to list all the database tables:\n\n```default\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"*\nFROM SQLITE_MASTER WHERE type='table';--\"\n| type  | name             | tbl_name         | rootpage | sql              |\n| table | android_metadata | android_metadata | 3        | CREATE TABLE ... |\n| table | Passwords        | Passwords        | 4        | CREATE TABLE ... |\n| table | Key              | Key              | 5        | CREATE TABLE ... |\n```\n\nSQL Injection may also be used to retrieve data from otherwise protected tables:\n\n```default\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"* FROM Key;--\"\n| Password | pin |\n| thisismypassword | 9876 |\n```\n\nYou can automate these steps with the `scanner.provider.injection` module, which automatically finds vulnerable content providers within an app:\n\n```default\ndz> run scanner.provider.injection -a com.mwr.example.sieve\nScanning com.mwr.example.sieve...\nInjection in Projection:\n  content://com.mwr.example.sieve.DBContentProvider/Keys/\n  content://com.mwr.example.sieve.DBContentProvider/Passwords\n  content://com.mwr.example.sieve.DBContentProvider/Passwords/\nInjection in Selection:\n  content://com.mwr.example.sieve.DBContentProvider/Keys/\n  content://com.mwr.example.sieve.DBContentProvider/Passwords\n  content://com.mwr.example.sieve.DBContentProvider/Passwords/\n```\n\n### File System Based Content Providers\n\nContent providers can provide access to the underlying filesystem. This allows apps to share files (the Android sandbox normally prevents this). You can use the Drozer modules `app.provider.read` and `app.provider.download` to read and download files, respectively, from exported file-based content providers. These content providers are susceptible to directory traversal, which allows otherwise protected files in the target application's sandbox to be read.\n\n```default\ndz> run app.provider.download content://com.vulnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/database.db /home/user/database.db\nWritten 24488 bytes\n```\n\nUse the `scanner.provider.traversal` module to automate the process of finding content providers that are susceptible to directory traversal:\n\n```default\ndz> run scanner.provider.traversal -a com.mwr.example.sieve\nScanning com.mwr.example.sieve...\nVulnerable Providers:\n  content://com.mwr.example.sieve.FileBackupProvider/\n  content://com.mwr.example.sieve.FileBackupProvider\n```\n\nNote that `adb` can also be used to query content providers:\n\n```bash\n$ adb shell content query --uri content://com.owaspomtg.vulnapp.provider.CredentialProvider/credentials\nRow: 0 id=1, username=admin, password=StrongPwd\nRow: 1 id=2, username=test, password=test\n...\n```"
  },
  {
    "id": "MASTG-TEST-0008",
    "title": "Checking for Sensitive Data Disclosure Through the User Interface",
    "category": "Platform Interaction",
    "description": "Carefully review all UI components that either show such information or take it as input. Search for any traces of sensitive information and evaluate if it should be masked or completely removed.",
    "full_description": "## Overview\n\n## Static Analysis\n\nCarefully review all UI components that either show such information or take it as input. Search for any traces of sensitive information and evaluate if it should be masked or completely removed.\n\n### Text Fields\n\nTo make sure an application is masking sensitive user input, check for the following attribute in the definition of `EditText`:\n\n```xml\nandroid:inputType=\"textPassword\"\n```\n\nWith this setting, dots (instead of the input characters) will be displayed in the text field, preventing the app from leaking passwords or pins to the user interface.\n\n### App Notifications\n\nWhen statically assessing an application, it is recommended to search for any usage of the `NotificationManager` class which might be an indication of some form of notification management. If the class is being used, the next step would be to understand how the application is [generating the notifications](https://developer.android.com/training/notify-user/build-notification#SimpleNotification \"Create a Notification\").\n\nThese code locations can be fed into the Dynamic Analysis section below, providing an idea of where in the application notifications may be dynamically generated.\n\n## Static Analysis\n\nCarefully review all UI components that either show such information or take it as input. Search for any traces of sensitive information and evaluate if it should be masked or completely removed.\n\n### Text Fields\n\nTo make sure an application is masking sensitive user input, check for the following attribute in the definition of `EditText`:\n\n```xml\nandroid:inputType=\"textPassword\"\n```\n\nWith this setting, dots (instead of the input characters) will be displayed in the text field, preventing the app from leaking passwords or pins to the user interface.\n\n### App Notifications\n\nWhen statically assessing an application, it is recommended to search for any usage of the `NotificationManager` class which might be an indication of some form of notification management. If the class is being used, the next step would be to understand how the application is [generating the notifications](https://developer.android.com/training/notify-user/build-notification#SimpleNotification \"Create a Notification\").\n\nThese code locations can be fed into the Dynamic Analysis section below, providing an idea of where in the application notifications may be dynamically generated.\n\n## Dynamic Analysis\n\nTo determine whether the application leaks any sensitive information to the user interface, run the application and identify components that could be disclosing information.\n\n### Text Fields\n\nIf the information is masked by, for example, replacing input with asterisks or dots, the app isn't leaking data to the user interface.\n\n### App Notifications\n\nTo identify the usage of notifications run through the entire application and all its available functions looking for ways to trigger any notifications. Consider that you may need to perform actions outside of the application in order to trigger certain notifications.\n\nWhile running the application you may want to start tracing all calls to functions related to the notifications creation, e.g. `setContentTitle` or `setContentText` from [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder). Observe the trace in the end and evaluate if it contains any sensitive information."
  },
  {
    "id": "MASTG-TEST-0010",
    "title": "Finding Sensitive Information in Auto-Generated Screenshots",
    "category": "Platform Interaction",
    "description": "A screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic purposes when the app returns to the foreground. However, this may leak sensitive inf...",
    "full_description": "## Overview\n\n## Static Analysis\n\nA screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic purposes when the app returns to the foreground. However, this may leak sensitive information.\n\nTo determine whether the application may expose sensitive information via the app switcher, find out whether the [`FLAG_SECURE`](https://developer.android.com/reference/android/view/Display.html#FLAG_SECURE \"FLAG_SECURE Option\") option has been set. You should find something similar to the following code snippet:\n\nExample in Java:\n\n```java\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,\n                WindowManager.LayoutParams.FLAG_SECURE);\n\nsetContentView(R.layout.activity_main);\n```\n\nExample in Kotlin:\n\n```kotlin\nwindow.setFlags(WindowManager.LayoutParams.FLAG_SECURE,\n                WindowManager.LayoutParams.FLAG_SECURE)\n\nsetContentView(R.layout.activity_main)\n```\n\nIf the option has not been set, the application is vulnerable to screen capturing.\n\n## Static Analysis\n\nA screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic purposes when the app returns to the foreground. However, this may leak sensitive information.\n\nTo determine whether the application may expose sensitive information via the app switcher, find out whether the [`FLAG_SECURE`](https://developer.android.com/reference/android/view/Display.html#FLAG_SECURE \"FLAG_SECURE Option\") option has been set. You should find something similar to the following code snippet:\n\nExample in Java:\n\n```java\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,\n                WindowManager.LayoutParams.FLAG_SECURE);\n\nsetContentView(R.layout.activity_main);\n```\n\nExample in Kotlin:\n\n```kotlin\nwindow.setFlags(WindowManager.LayoutParams.FLAG_SECURE,\n                WindowManager.LayoutParams.FLAG_SECURE)\n\nsetContentView(R.layout.activity_main)\n```\n\nIf the option has not been set, the application is vulnerable to screen capturing.\n\n## Dynamic Analysis\n\nWhile black-box testing the app, navigate to any screen that contains sensitive information and click the home button to send the app to the background, then press the app switcher button to see the snapshot. As shown below, if `FLAG_SECURE` is set (left image), the snapshot will be empty; if the flag has not been set (right image), activity information will be shown:\n\n<img src=\"Images/Chapters/0x05d/2.png\" width=\"200px\" />\n<img src=\"Images/Chapters/0x05d/1.png\" width=\"200px\" />\n\nOn devices supporting [file-based encryption (FBE)](https://source.android.com/security/encryption/file-based \"FBE\"), snapshots are stored in the `/data/system_ce/<USER_ID>/<IMAGE_FOLDER_NAME>` folder. `<IMAGE_FOLDER_NAME>` depends on the vendor but most common names are `snapshots` and `recent_images`. If the device doesn't support FBE, the `/data/system/<IMAGE_FOLDER_NAME>` folder is used.\n\n> Accessing these folders and the snapshots requires root."
  },
  {
    "id": "MASTG-TEST-0024",
    "title": "Testing for App Permissions",
    "category": "Platform Interaction",
    "description": "Check permissions to make sure that the app really needs them and remove unnecessary permissions. For example, the `INTERNET` permission in the AndroidManifest.xml file is necessary for an Activity to...",
    "full_description": "## Overview\n\nWhen testing [app permissions](../../../Document/0x05h-Testing-Platform-Interaction.md#app-permissions \"App Permissions\") the goal is to try and reduce the amount of permissions used by your app to the absolute minimum. While going through each permission, remember that it is best practice first to try and [evaluate whether your app needs to use this permission](https://developer.android.com/training/permissions/evaluating) because many functionalities such as taking a photo can be done without, limiting the amount of access to sensitive data. If permissions are required you will then make sure that the request/response to access the permission is handled handled correctly.\n\n## Static Analysis\n\n### Android Permissions\n\nCheck permissions to make sure that the app really needs them and remove unnecessary permissions. For example, the `INTERNET` permission in the AndroidManifest.xml file is necessary for an Activity to load a web page into a WebView. Because a user can revoke an application's right to use a dangerous permission, the developer should check whether the application has the appropriate permission each time an action is performed that would require that permission.\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\nGo through the permissions with the developer to identify the purpose of every permission set and remove unnecessary permissions.\n\nBesides going through the AndroidManifest.xml file manually, you can also use the Android Asset Packaging tool (aapt) to examine the permissions of an APK file.\n\n> aapt comes with the Android SDK within the build-tools folder. It requires an APK file as input. You may list the APKs in the device by running `adb shell pm list packages -f | grep -i <keyword>` as seen in @MASTG-TECH-0006.\n\n```bash\n$ aapt d permissions app-x86-debug.apk\npackage: sg.vp.owasp_mobile.omtg_android\nuses-permission: name='android.permission.WRITE_EXTERNAL_STORAGE'\nuses-permission: name='android.permission.INTERNET'\n```\n\nAlternatively you may obtain a more detailed list of permissions via adb and the dumpsys tool:\n\n```bash\n$ adb shell dumpsys package sg.vp.owasp_mobile.omtg_android | grep permission\n    requested permissions:\n      android.permission.WRITE_EXTERNAL_STORAGE\n      android.permission.INTERNET\n      android.permission.READ_EXTERNAL_STORAGE\n    install permissions:\n      android.permission.INTERNET: granted=true\n      runtime permissions:\n```\n\nPlease reference this [permissions overview](https://developer.android.com/guide/topics/permissions/overview#permission-groups \"Table 1. Dangerous permissions and permission groups.\") for descriptions of the listed permissions that are considered dangerous.\n\n```default\nREAD_CALENDAR\nWRITE_CALENDAR\nREAD_CALL_LOG\nWRITE_CALL_LOG\nPROCESS_OUTGOING_CALLS\nCAMERA\nREAD_CONTACTS\nWRITE_CONTACTS\nGET_ACCOUNTS\nACCESS_FINE_LOCATION\nACCESS_COARSE_LOCATION\nRECORD_AUDIO\nREAD_PHONE_STATE\nREAD_PHONE_NUMBERS\nCALL_PHONE\nANSWER_PHONE_CALLS\nADD_VOICEMAIL\nUSE_SIP\nBODY_SENSORS\nSEND_SMS\nRECEIVE_SMS\nREAD_SMS\nRECEIVE_WAP_PUSH\nRECEIVE_MMS\nREAD_EXTERNAL_STORAGE\nWRITE_EXTERNAL_STORAGE\n```\n\n### Custom Permissions\n\nApart from enforcing custom permissions via the application manifest file, you can also check permissions programmatically. This is not recommended, however, because it is more error-prone and can be bypassed more easily with, e.g., runtime instrumentation. It is recommended that the `ContextCompat.checkSelfPermission` method is called to check if an activity has a specified permission. Whenever you see code like the following snippet, make sure that the same permissions are enforced in the manifest file.\n\n```java\nprivate static final String TAG = \"LOG\";\nint canProcess = checkCallingOrSelfPermission(\"com.example.perm.READ_INCOMING_MSG\");\nif (canProcess != PERMISSION_GRANTED)\nthrow new SecurityException();\n```\n\nOr with `ContextCompat.checkSelfPermission` which compares it to the manifest file.\n\n```java\nif (ContextCompat.checkSelfPermission(secureActivity.this, Manifest.READ_INCOMING_MSG)\n        != PackageManager.PERMISSION_GRANTED) {\n            //!= stands for not equals PERMISSION_GRANTED\n            Log.v(TAG, \"Permission denied\");\n        }\n```\n\n### Requesting Permissions\n\nIf your application has permissions that need to be requested at runtime, the application must call the `requestPermissions` method in order to obtain them. The app passes the permissions needed and an integer request code you have specified to the user asynchronously, returning once the user chooses to accept or deny the request in the same thread. After the response is returned the same request code is passed to the app's callback method.\n\n```java\nprivate static final String TAG = \"LOG\";\n// We start by checking the permission of the current Activity\nif (ContextCompat.checkSelfPermission(secureActivity.this,\n        Manifest.permission.WRITE_EXTERNAL_STORAGE)\n        != PackageManager.PERMISSION_GRANTED) {\n\n    // Permission is not granted\n    // Should we show an explanation?\n    if (ActivityCompat.shouldShowRequestPermissionRationale(secureActivity.this,\n        //Gets whether you should show UI with rationale for requesting permission.\n        //You should do this only if you do not have permission and the permission requested rationale is not communicated clearly to the user.\n            Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n        // Asynchronous thread waits for the users response.\n        // After the user sees the explanation try requesting the permission again.\n    } else {\n        // Request a permission that doesn't need to be explained.\n        ActivityCompat.requestPermissions(secureActivity.this,\n                new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},\n                MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);\n        // MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE will be the app-defined int constant.\n        // The callback method gets the result of the request.\n    }\n} else {\n    // Permission already granted debug message printed in terminal.\n    Log.v(TAG, \"Permission already granted.\");\n}\n```\n\nPlease note that if you need to provide any information or explanation to the user it needs to be done before the call to `requestPermissions`, since the system dialog box can not be altered once called.\n\n### Handling Responses to Permission Requests\n\nNow your app has to override the system method `onRequestPermissionsResult` to see if the permission was granted. This method receives the `requestCode` integer as input parameter (which is the same request code that was created in `requestPermissions`).\n\nThe following callback method may be used for `WRITE_EXTERNAL_STORAGE`.\n\n```java\n@Override //Needed to override system method onRequestPermissionsResult()\npublic void onRequestPermissionsResult(int requestCode, //requestCode is what you specified in requestPermissions()\n        String permissions[], int[] permissionResults) {\n    switch (requestCode) {\n        case MY_PERMISSIONS_WRITE_EXTERNAL_STORAGE: {\n            if (grantResults.length > 0\n                && permissionResults[0] == PackageManager.PERMISSION_GRANTED) {\n                // 0 is a canceled request, if int array equals requestCode permission is granted.\n            } else {\n                // permission denied code goes here.\n                Log.v(TAG, \"Permission denied\");\n            }\n            return;\n        }\n        // Other switch cases can be added here for multiple permission checks.\n    }\n}\n\n```\n\nPermissions should be explicitly requested for every needed permission, even if a similar permission from the same group has already been requested. For applications targeting Android 7.1 (API level 25) and older, Android will automatically give an application all the permissions from a permission group, if the user grants one of the requested permissions of that group. Starting with Android 8.0 (API level 26), permissions will still automatically be granted if a user has already granted a permission from the same permission group, but the application still needs to explicitly request the permission. In this case, the `onRequestPermissionsResult` handler will automatically be triggered without any user interaction.\n\nFor example if both `READ_EXTERNAL_STORAGE` and `WRITE_EXTERNAL_STORAGE` are listed in the Android Manifest but only permissions are granted for `READ_EXTERNAL_STORAGE`, then requesting `WRITE_EXTERNAL_STORAGE` will automatically have permissions without user interaction because they are in the same group and not explicitly requested.\n\n### Permission Analysis\n\nAlways check whether the application is requesting permissions it actually requires. Make sure that no permissions are requested which are not related to the goal of the app, especially `DANGEROUS` and `SIGNATURE` permissions, since they can affect both the user and the application if mishandled. For instance, it should be suspicious if a single-player game app requires access to `android.permission.WRITE_SMS`.\n\nWhen analyzing permissions, you should investigate the concrete use case scenarios of the app and always check if there are replacement APIs for any `DANGEROUS` permissions in use. A good example is the [SMS Retriever API](https://developers.google.com/identity/sms-retriever/overview) which streamlines the usage of SMS permissions when performing SMS-based user verification. By using this API an application does not have to declare `DANGEROUS` permissions which is a benefit to both the user and developers of the application, who doesn't have to submit the [Permissions Declaration Form](https://support.google.com/googleplay/android-developer/answer/9214102?hl=en).\n\n## Dynamic Analysis\n\nPermissions for installed applications can be retrieved with `adb`. The following extract demonstrates how to examine the permissions used by an application.\n\n```bash\n$ adb shell dumpsys package com.google.android.youtube\n...\ndeclared permissions:\n  com.google.android.youtube.permission.C2D_MESSAGE: prot=signature, INSTALLED\nrequested permissions:\n  android.permission.INTERNET\n  android.permission.ACCESS_NETWORK_STATE\ninstall permissions:\n  com.google.android.c2dm.permission.RECEIVE: granted=true\n  android.permission.USE_CREDENTIALS: granted=true\n  com.google.android.providers.gsf.permission.READ_GSERVICES: granted=true\n...\n```\n\nThe output shows all permissions using the following categories:\n\n- **declared permissions**: list of all _custom_ permissions.\n- **requested and install permissions**: list of all install-time permissions including _normal_ and _signature_ permissions.\n- **runtime permissions**: list of all _dangerous_ permissions.\n\nWhen doing the dynamic analysis:\n\n- [Evaluate](https://developer.android.com/training/permissions/evaluating) whether the app really needs the requested permissions. For instance: a single-player game that requires access to `android.permission.WRITE_SMS`, might not be a good idea.\n- In many cases the app could opt for [alternatives to declaring permissions](https://developer.android.com/training/permissions/evaluating#alternatives), such as:\n    - requesting the `ACCESS_COARSE_LOCATION` permission instead of `ACCESS_FINE_LOCATION`. Or even better not requesting the permission at all, and instead ask the user to enter a postal code.\n    - invoking the `ACTION_IMAGE_CAPTURE` or `ACTION_VIDEO_CAPTURE` intent action instead of requesting the `CAMERA` permission.\n    - using [Companion Device Pairing](https://developer.android.com/guide/topics/connectivity/companion-device-pairing) (Android 8.0 (API level 26) and higher) when pairing with a Bluetooth device instead of declaring the `ACCESS_FINE_LOCATION`, `ACCESS_COARSE_LOCATIION`, or `BLUETOOTH_ADMIN` permissions.\n- Use the [Privacy Dashboard](https://developer.android.com/training/permissions/explaining-access#privacy-dashboard) (Android 12 (API level 31) and higher) to verify how the app [explains access to sensitive information](https://developer.android.com/training/permissions/explaining-access).\n\nTo obtain detail about a specific permission you can refer to the [Android Documentation](https://developer.android.com/reference/android/Manifest.permission)."
  },
  {
    "id": "MASTG-TEST-0028",
    "title": "Testing Deep Links",
    "category": "Platform Interaction",
    "description": "The Android version in which the app runs also influences the risk of using deep links. Inspect the Android Manifest to check if `minSdkVersion` is 31 or higher.",
    "full_description": "## Overview\n\nAny existing [deep links](../../../Document/0x05h-Testing-Platform-Interaction.md#deep-links \"Deep Links\") (including App Links) can potentially increase the app attack surface. This [includes many risks](https://people.cs.vt.edu/gangwang/deep17.pdf) such as link hijacking, sensitive functionality exposure, etc.\n\n- Before Android 12 (API level 31), if the app has any [non-verifiable links](https://developer.android.com/training/app-links/verify-android-applinks#fix-errors), it can cause the system to not verify all Android App Links for that app.\n- Starting on Android 12 (API level 31), apps benefit from a [reduced attack surface](https://developer.android.com/training/app-links/deep-linking). A generic web intent resolves to the user's default browser app unless the target app is approved for the specific domain contained in that web intent.\n\nAll deep links must be enumerated and verified for correct website association. The actions they perform must be well tested, especially all input data, which should be deemed untrustworthy and thus should always be validated.\n\nNone of the input from these sources can be trusted; it must be validated and/or sanitized. Validation ensures processing of data that the app is expecting only. If validation is not enforced, any input can be sent to the app, which may allow an attacker or malicious app to exploit app functionality.\n\n## Static Analysis\n\n### Check for Android OS Version\n\nThe Android version in which the app runs also influences the risk of using deep links. Inspect the Android Manifest to check if `minSdkVersion` is 31 or higher.\n\n- Before Android 12 (API level 31), if the app has any [non-verifiable deep links](https://developer.android.com/training/app-links/verify-android-applinks#fix-errors), it can cause the system to not verify all Android App Links for that app.\n- Starting on Android 12 (API level 31), apps benefit from a [reduced attack surface](https://developer.android.com/training/app-links/deep-linking). A generic web intent resolves to the user's default browser app unless the target app is approved for the specific domain contained in that web intent.\n\n### Check for Deep Link Usage\n\n**Inspecting the Android Manifest:**\n\nYou can easily determine whether deep links (with or without custom URL schemes) are defined by @MASTG-TECH-0007 and inspecting the Android Manifest file looking for [`<intent-filter>` elements](https://developer.android.com/guide/components/intents-filters.html#DataTest \"intent-filters - DataTest\").\n\n- **Custom Url Schemes**: The following example specifies a deep link with a custom URL scheme called `myapp://`.\n\n  ```xml\n  <activity android:name=\".MyUriActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"myapp\" android:host=\"path\" />\n    </intent-filter>\n  </activity>\n  ```\n\n- **Deep Links**: The following example specifies a deep Link using both the `http://` and `https://` schemes, along with the host and path that will activate it (in this case, the full URL would be `https://www.myapp.com/my/app/path`):\n\n  ```xml\n  <intent-filter>\n    ...\n    <data android:scheme=\"http\" android:host=\"www.myapp.com\" android:path=\"/my/app/path\" />\n    <data android:scheme=\"https\" android:host=\"www.myapp.com\" android:path=\"/my/app/path\" />\n  </intent-filter>\n  ```\n\n- **App Links**: If the `<intent-filter>` includes the flag `android:autoVerify=\"true\"`, this causes the Android system to reach out to the declared `android:host` in an attempt to access the [Digital Asset Links file](https://developers.google.com/digital-asset-links/v1/getting-started \"Digital Asset Link\") in order to [verify the App Links](https://developer.android.com/training/app-links/verify-android-applinks \"Verify Android App Links\"). **A deep link can be considered an App Link only if the verification is successful.**\n\n  ```xml\n  <intent-filter android:autoVerify=\"true\">\n  ```\n\nWhen listing deep links remember that `<data>` elements within the same `<intent-filter>` are actually merged together to account for all variations of their combined attributes.\n\n```xml\n<intent-filter>\n  ...\n  <data android:scheme=\"https\" android:host=\"www.example.com\" />\n  <data android:scheme=\"app\" android:host=\"open.my.app\" />\n</intent-filter>\n```\n\nIt might seem as though this supports only `https://www.example.com` and `app://open.my.app`. However, it actually supports:\n\n- `https://www.example.com`\n- `app://open.my.app`\n- `app://www.example.com`\n- `https://open.my.app`\n\n**Using Dumpsys:**\n\nUse @MASTG-TOOL-0004 to run the following command that will show all schemes:\n\n```bash\nadb shell dumpsys package com.example.package\n```\n\n**Using Android \"App Link Verification\" Tester:**\n\nUse the [Android \"App Link Verification\" Tester](https://github.com/inesmartins/Android-App-Link-Verification-Tester) script to list all deep links (`list-all`) or only app links (`list-applinks`):\n\n```bash\npython3 deeplink_analyser.py -op list-all -apk ~/Downloads/example.apk\n\n.MainActivity\n\napp://open.my.app\napp://www.example.com\nhttps://open.my.app\nhttps://www.example.com\n```\n\n### Check for Correct Website Association\n\nEven if deep links contain the `android:autoVerify=\"true\"` attribute, they must be _actually_ verified in order to be considered App Links. You should test for any possible misconfigurations that might prevent full verification.\n\n#### Automatic Verification\n\nUse the [Android \"App Link Verification\" Tester](https://github.com/inesmartins/Android-App-Link-Verification-Tester) script to get the verification status for all app links (`verify-applinks`). See an example [here](https://github.com/inesmartins/Android-App-Link-Verification-Tester#use-an-apk-to-check-for-dals-for-all-app-links).\n\n**Only on Android 12 (API level 31) or higher:**\n\nYou can use @MASTG-TOOL-0004 to test the verification logic regardless of whether the app targets Android 12 (API level 31) or not. This feature allows you to:\n\n- [invoke the verification process manually](https://developer.android.com/training/app-links/verify-android-applinks#support-updated-domain-verification).\n- [reset the state of the target app's Android App Links on your device](https://developer.android.com/training/app-links/verify-android-applinks#reset-state).\n- [invoke the domain verification process](https://developer.android.com/training/app-links/verify-android-applinks#invoke-domain-verification).\n\nYou can also [review the verification results](https://developer.android.com/training/app-links/verify-android-applinks#review-results). For example:\n\n```bash\nadb shell pm get-app-links com.example.package\n\ncom.example.package:\n    ID: 01234567-89ab-cdef-0123-456789abcdef\n    Signatures: [***]\n    Domain verification state:\n      example.com: verified\n      sub.example.com: legacy_failure\n      example.net: verified\n      example.org: 1026\n```\n\n> The same information can be found by running `adb shell dumpsys package com.example.package` (only on Android 12 (API level 31) or higher).\n\n#### Manual Verification\n\nThis section details a few, of potentially many, reasons why the verification process failed or was not actually triggered. See more information in the [Android Developers Documentation](https://developer.android.com/training/app-links/verify-android-applinks#fix-errors) and in the white paper [\"Measuring the Insecurity of Mobile Deep Links of Android\"](https://people.cs.vt.edu/gangwang/deep17.pdf).\n\n**Check the [Digital Asset Links file](https://developers.google.com/digital-asset-links/v1/getting-started \"Digital Asset Link\"):**\n\n- Check for **missing** Digital Asset Links file:\n    - try to find it in the domain's `/.well-known/` path. Example: `https://www.example.com/.well-known/assetlinks.json`\n    - or try `https://digitalassetlinks.googleapis.com/v1/statements:list?source.web.site=www.example.com`\n- Check for valid Digital Asset Links file **served via HTTP**.\n- Check for **invalid** Digital Asset Links files served via HTTPS. For example:\n    - the file contains invalid JSON.\n    - the file doesn't include the target app's package.\n\n**Check for Redirects:**\n\nTo enhance the app security, the system [doesn't verify any Android App Links](https://developer.android.com/training/app-links/verify-android-applinks#fix-errors) for an app if the server sets a redirect such as `http://example.com` to `https://example.com` or `example.com` to `www.example.com`.\n\n**Check for Subdomains:**\n\nIf an intent filter lists multiple hosts with different subdomains, there must be a valid Digital Asset Links file on each domain. For example, the following intent filter includes `www.example.com` and `mobile.example.com` as accepted intent URL hosts.\n\n```xml\n<application>\n  <activity android:name=”MainActivity”>\n    <intent-filter android:autoVerify=\"true\">\n      <action android:name=\"android.intent.action.VIEW\" />\n      <category android:name=\"android.intent.category.DEFAULT\" />\n      <category android:name=\"android.intent.category.BROWSABLE\" />\n      <data android:scheme=\"https\" />\n      <data android:scheme=\"https\" />\n      <data android:host=\"www.example.com\" />\n      <data android:host=\"mobile.example.com\" />\n    </intent-filter>\n  </activity>\n</application>\n```\n\nIn order for the deep links to correctly register, a valid Digital Asset Links file must be published at both `https://www.example.com/.well-known/assetlinks.json` and `https://mobile.example.com/.well-known/assetlinks.json`.\n\n**Check for Wildcards:**\n\nIf the hostname includes a wildcard (such as `*.example.com`), you should be able to find a valid Digital Asset Links file at the root hostname: `https://example.com/.well-known/assetlinks.json`.\n\n### Check the Handler Method\n\nEven if the deep link is correctly verified, the logic of the handler method should be carefully analyzed. Pay special attention to **deep links being used to transmit data** (which is controlled externally by the user or any other app).\n\nFirst, obtain the name of the Activity from the Android Manifest `<activity>` element which defines the target `<intent-filter>` and search for usage of [`getIntent`](https://developer.android.com/reference/android/content/Intent#getIntent(java.lang.String) \"getIntent()\") and [`getData`](https://developer.android.com/reference/android/content/Intent#getData%28%29 \"getData()\"). This general approach of locating these methods can be used across most applications when performing reverse engineering and is key when trying to understand how the application uses deep links and handles any externally provided input data and if it could be subject to any kind of abuse.\n\nThe following example is a snippet from an example Kotlin app decompiled with @MASTG-TOOL-0018. From the [static analysis](#check-for-deep-link-usage) we know that it supports the deep link `deeplinkdemo://load.html/` as part of `com.mstg.deeplinkdemo.WebViewActivity`.\n\n```java\n// snippet edited for simplicity\npublic final class WebViewActivity extends AppCompatActivity {\n    private ActivityWebViewBinding binding;\n\n    public void onCreate(Bundle savedInstanceState) {\n        Uri data = getIntent().getData();\n        String html = data == null ? null : data.getQueryParameter(\"html\");\n        Uri data2 = getIntent().getData();\n        String deeplink_url = data2 == null ? null : data2.getQueryParameter(\"url\");\n        View findViewById = findViewById(R.id.webView);\n        if (findViewById != null) {\n            WebView wv = (WebView) findViewById;\n            wv.getSettings().setJavaScriptEnabled(true);\n            if (deeplink_url != null) {\n                wv.loadUrl(deeplink_url);\n            ...\n```\n\nYou can simply follow the `deeplink_url` String variable and see the result from the `wv.loadUrl` call. This means the attacker has full control of the URL being loaded to the WebView (as shown above has @MASTG-TEST-0031.\n\nThe same WebView might be also rendering an attacker controlled parameter. In that case, the following deep link payload would trigger [Reflected Cross-Site Scripting (XSS)](../../../Document/0x04h-Testing-Code-Quality.md#cross-site-scripting-flaws) within the context of the WebView:\n\n```default\ndeeplinkdemo://load.html?attacker_controlled=<svg onload=alert(1)>\n```\n\nBut there are many other possibilities. Be sure to check the following sections to learn more about what to expect and how to test different scenarios:\n\n- [\"Cross-Site Scripting Flaws\"](../../../Document/0x04h-Testing-Code-Quality.md#cross-site-scripting-flaws).\n- [\"Injection Flaws\"](../../../Document/0x04h-Testing-Code-Quality.md#injection-flaws).\n- @MASTG-TEST-0034.\n- @MASTG-TEST-0027\n- @MASTG-TEST-0031\n- @MASTG-TEST-0032\n\nIn addition, we recommend to search and read public reports (search term: `\"deep link*\"|\"deeplink*\" site:https://hackerone.com/reports/`). For example:\n\n- [\"[HackerOne#1372667] Able to steal bearer token from deep link\"](https://hackerone.com/reports/1372667)\n- [\"[HackerOne#401793] Insecure deeplink leads to sensitive information disclosure\"](https://hackerone.com/reports/401793)\n- [\"[HackerOne#583987] Android app deeplink leads to CSRF in follow action\"](https://hackerone.com/reports/583987)\n- [\"[HackerOne#637194] Bypass of biometrics security functionality is possible in Android application\"](https://hackerone.com/reports/637194)\n- [\"[HackerOne#341908] XSS via Direct Message deeplinks\"](https://hackerone.com/reports/341908)\n\n## Dynamic Analysis\n\nHere you will use the list of deep links from the static analysis to iterate and determine each handler method and the processed data, if any. You will first start a @MASTG-TOOL-0031 hook and then begin invoking the deep links.\n\nThe following example assumes a target app that accepts this deep link: `deeplinkdemo://load.html`. However, we don't know the corresponding handler method yet, nor the parameters it potentially accepts.\n\n**[Step 1] Frida Hooking:**\n\nYou can use the script [\"Android Deep Link Observer\"](https://codeshare.frida.re/@leolashkevych/android-deep-link-observer/) from @MASTG-TOOL-0032 to monitor all invoked deep links triggering a call to `Intent.getData`. You can also use the script as a base to include your own modifications depending on the use case at hand. In this case we [included the stack trace](https://github.com/FrenchYeti/frida-trick/blob/master/README.md) in the script since we are interested in the method which calls `Intent.getData`.\n\n**[Step 2] Invoking Deep Links:**\n\nNow you can invoke any of the deep links using @MASTG-TOOL-0004 and the [Activity Manager (am)](https://developer.android.com/training/app-links/deep-linking#testing-filters \"Activity Manager\") which will send intents within the Android device. For example:\n\n```bash\nadb shell am start -W -a android.intent.action.VIEW -d \"deeplinkdemo://load.html/?message=ok#part1\"\n\nStarting: Intent { act=android.intent.action.VIEW dat=deeplinkdemo://load.html/?message=ok }\nStatus: ok\nLaunchState: WARM\nActivity: com.mstg.deeplinkdemo/.WebViewActivity\nTotalTime: 210\nWaitTime: 217\nComplete\n```\n\n> This might trigger the disambiguation dialog when using the \"http/https\" schema or if other installed apps support the same custom URL schema. You can include the package name to make it an explicit intent.\n\nThis invocation will log the following:\n\n```bash\n[*] Intent.getData() was called\n[*] Activity: com.mstg.deeplinkdemo.WebViewActivity\n[*] Action: android.intent.action.VIEW\n\n[*] Data\n- Scheme: deeplinkdemo://\n- Host: /load.html\n- Params: message=ok\n- Fragment: part1\n\n[*] Stacktrace:\n\nandroid.content.Intent.getData(Intent.java)\ncom.mstg.deeplinkdemo.WebViewActivity.onCreate(WebViewActivity.kt)\nandroid.app.Activity.performCreate(Activity.java)\n...\ncom.android.internal.os.ZygoteInit.main(ZygoteInit.java)\n```\n\nIn this case we've crafted the deep link including arbitrary parameters (`?message=ok`) and fragment (`#part1`). We still don't know if they are being used. The information above reveals useful information that you can use now to reverse engineer the app. See the section [\"Check the Handler Method\"](#check-the-handler-method) to learn about things you should consider.\n\n- File: `WebViewActivity.kt`\n- Class: `com.mstg.deeplinkdemo.WebViewActivity`\n- Method: `onCreate`\n\n> Sometimes you can even take advantage of other applications that you know interact with your target app. You can reverse engineer the app, (e.g. to extract all strings and filter those which include the target deep links, `deeplinkdemo:///load.html` in the previous case), or use them as triggers, while hooking the app as previously discussed."
  },
  {
    "id": "MASTG-TEST-0029",
    "title": "Testing for Sensitive Functionality Exposure Through IPC",
    "category": "Platform Interaction",
    "description": "We start by looking at the AndroidManifest.xml, where all activities, services, and content providers included in the app must be declared (otherwise the system won't recognize them and they won't run...",
    "full_description": "## Overview\n\nTo test for [sensitive functionality exposure through IPC](../../../Document/0x05h-Testing-Platform-Interaction.md#sensitive-functionality-exposure-through-ipc \"Sensitive Functionality Exposure Through IPC\") mechanisms you should first enumerate all the IPC mechanisms the app uses and then try to identify whether sensitive data is leaked when the mechanisms are used.\n\n## Static Analysis\n\nWe start by looking at the AndroidManifest.xml, where all activities, services, and content providers included in the app must be declared (otherwise the system won't recognize them and they won't run).\n\n- [`<intent-filter>`](https://developer.android.com/guide/topics/manifest/intent-filter-element.html \"IntentFilterElement\")\n- [`<service>`](https://developer.android.com/guide/topics/manifest/service-element.html \"ServiceElement\")\n- [`<provider>`](https://developer.android.com/guide/topics/manifest/provider-element.html \"ProviderElement\")\n- [`<receiver>`](https://developer.android.com/guide/topics/manifest/receiver-element.html \"ReceiverElement\")\n\nAn \"exported\" activity, service, or content can be accessed by other apps. There are two common ways to designate a component as exported. The obvious one is setting the export tag to true `android:exported=\"true\"`. The second way involves defining an `<intent-filter>` within the component element (`<activity>`, `<service>`, `<receiver>`). When this is done, the export tag is automatically set to \"true\". To prevent all other Android apps from interacting with the IPC component element, be sure that the `android:exported=\"true\"` value and an `<intent-filter>` aren't in their `AndroidManifest.xml` files unless this is necessary.\n\nRemember that using the permission tag (`android:permission`) will also limit other applications' access to a component. If your IPC is intended to be accessible to other applications, you can apply a security policy with the `<permission>` element and set a proper `android:protectionLevel`. When `android:permission` is used in a service declaration, other applications must declare a corresponding `<uses-permission>` element in their own manifest to start, stop, or bind to the service.\n\nFor more information about the content providers, please refer to the test case \"Testing Whether Stored Sensitive Data Is Exposed via IPC Mechanisms\" in chapter \"Testing Data Storage\".\n\nOnce you identify a list of IPC mechanisms, review the source code to see whether sensitive data is leaked when the mechanisms are used. For example, content providers can be used to access database information, and services can be probed to see if they return data. Broadcast receivers can leak sensitive information if probed or sniffed.\n\nIn the following, we use two example apps and give examples of identifying vulnerable IPC components:\n\n- [\"Sieve\"](https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk \"Sieve: Vulnerable Password Manager\")\n- @MASTG-APP-0010\n\n### Activities\n\n#### Inspect the AndroidManifest\n\nIn the \"Sieve\" app, we find three exported activities, identified by `<activity>`:\n\n```xml\n<activity android:excludeFromRecents=\"true\" android:label=\"@string/app_name\" android:launchMode=\"singleTask\" android:name=\".MainLoginActivity\" android:windowSoftInputMode=\"adjustResize|stateVisible\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n<activity android:clearTaskOnLaunch=\"true\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:finishOnTaskLaunch=\"true\" android:label=\"@string/title_activity_file_select\" android:name=\".FileSelectActivity\" />\n<activity android:clearTaskOnLaunch=\"true\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:finishOnTaskLaunch=\"true\" android:label=\"@string/title_activity_pwlist\" android:name=\".PWList\" />\n\n```\n\n#### Inspect the Source Code\n\nBy inspecting the `PWList.java` activity, we see that it offers options to list all keys, add, delete, etc. If we invoke it directly, we will be able to bypass the LoginActivity. More on this can be found in the dynamic analysis below.\n\n### Services\n\n#### Inspect the AndroidManifest\n\nIn the \"Sieve\" app, we find two exported services, identified by `<service>`:\n\n```xml\n<service android:exported=\"true\" android:name=\".AuthService\" android:process=\":remote\" />\n<service android:exported=\"true\" android:name=\".CryptoService\" android:process=\":remote\" />\n```\n\n#### Inspect the Source Code\n\nCheck the source code for the class `android.app.Service`:\n\nBy reversing the target application, we can see that the service `AuthService` provides functionality for changing the password and PIN-protecting the target app.\n\n```java\n   public void handleMessage(Message msg) {\n            AuthService.this.responseHandler = msg.replyTo;\n            Bundle returnBundle = msg.obj;\n            int responseCode;\n            int returnVal;\n            switch (msg.what) {\n                ...\n                case AuthService.MSG_SET /*6345*/:\n                    if (msg.arg1 == AuthService.TYPE_KEY) /*7452*/ {\n                        responseCode = 42;\n                        if (AuthService.this.setKey(returnBundle.getString(\"com.mwr.example.sieve.PASSWORD\"))) {\n                            returnVal = 0;\n                        } else {\n                            returnVal = 1;\n                        }\n                    } else if (msg.arg1 == AuthService.TYPE_PIN) {\n                        responseCode = 41;\n                        if (AuthService.this.setPin(returnBundle.getString(\"com.mwr.example.sieve.PIN\"))) {\n                            returnVal = 0;\n                        } else {\n                            returnVal = 1;\n                        }\n                    } else {\n                        sendUnrecognisedMessage();\n                        return;\n                    }\n           }\n   }\n```\n\n### Broadcast Receivers\n\n#### Inspect the AndroidManifest\n\nIn the \"Android Insecure Bank\" app, we find a broadcast receiver in the manifest, identified by `<receiver>`:\n\n```xml\n<receiver android:exported=\"true\" android:name=\"com.android.insecurebankv2.MyBroadCastReceiver\">\n    <intent-filter>\n        <action android:name=\"theBroadcast\" />\n    </intent-filter>\n</receiver>\n```\n\n#### Inspect the Source Code\n\nSearch the source code for strings like `sendBroadcast`, `sendOrderedBroadcast`, and `sendStickyBroadcast`. Make sure that the application doesn't send any sensitive data.\n\nIf an Intent is broadcasted and received within the application only, `LocalBroadcastManager` can be used to prevent other apps from receiving the broadcast message. This reduces the risk of leaking sensitive information.\n\nTo understand more about what the receiver is intended to do, we have to go deeper in our static analysis and search for usage of the class `android.content.BroadcastReceiver` and the `Context.registerReceiver` method, which is used to dynamically create receivers.\n\nThe following extract of the target application's source code shows that the broadcast receiver triggers transmission of an SMS message containing the user's decrypted password.\n\n```java\npublic class MyBroadCastReceiver extends BroadcastReceiver {\n  String usernameBase64ByteString;\n  public static final String MYPREFS = \"mySharedPreferences\";\n\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    // TODO Auto-generated method stub\n\n        String phn = intent.getStringExtra(\"phonenumber\");\n        String newpass = intent.getStringExtra(\"newpass\");\n\n    if (phn != null) {\n      try {\n                SharedPreferences settings = context.getSharedPreferences(MYPREFS, Context.MODE_WORLD_READABLE);\n                final String username = settings.getString(\"EncryptedUsername\", null);\n                byte[] usernameBase64Byte = Base64.decode(username, Base64.DEFAULT);\n                usernameBase64ByteString = new String(usernameBase64Byte, \"UTF-8\");\n                final String password = settings.getString(\"superSecurePassword\", null);\n                CryptoClass crypt = new CryptoClass();\n                String decryptedPassword = crypt.aesDeccryptedString(password);\n                String textPhoneno = phn.toString();\n                String textMessage = \"Updated Password from: \"+decryptedPassword+\" to: \"+newpass;\n                SmsManager smsManager = SmsManager.getDefault();\n                System.out.println(\"For the changepassword - phonenumber: \"+textPhoneno+\" password is: \"+textMessage);\nsmsManager.sendTextMessage(textPhoneno, null, textMessage, null, null);\n          }\n     }\n  }\n}\n```\n\nBroadcastReceivers should use the `android:permission` attribute; otherwise, other applications can invoke them. You can use `Context.sendBroadcast(intent, receiverPermission);` to specify permissions a receiver must have to [read the broadcast](https://developer.android.com/reference/android/content/Context#sendBroadcast%28android.content.Intent,%20java.lang.String%29 \"SendBroadcast\"). You can also set an explicit application package name that limits the components this Intent will resolve to. If left as the default value (null), all components in all applications will be considered. If non-null, the Intent can match only the components in the given application package.\n\n## Dynamic Analysis\n\nYou can enumerate IPC components with @MASTG-TOOL-0035. To list all exported IPC components, upload the APK file and the components collection will be displayed in the following screen:\n\n<img src=\"Images/Chapters/0x05h/MobSF_Show_Components.png\" width=\"100%\" />\n\n### Content Providers\n\nThe \"Sieve\" application implements a vulnerable content provider. To list the content providers exported by the Sieve app, execute the following command:\n\n```bash\n$ adb shell dumpsys package com.mwr.example.sieve | grep -Po \"Provider{[\\w\\d\\s\\./]+}\" | sort -u\nProvider{34a20d5 com.mwr.example.sieve/.FileBackupProvider}\nProvider{64f10ea com.mwr.example.sieve/.DBContentProvider}\n```\n\nOnce identified, you can use @MASTG-TOOL-0018 to reverse engineer the app and analyze the source code of the exported content providers to identify potential vulnerabilities.\n\nTo identify the corresponding class of a content provider, use the following information:\n\n- Package Name: `com.mwr.example.sieve`.\n- Content Provider Class Name: `DBContentProvider`.\n\nWhen analyzing the class `com.mwr.example.sieve.DBContentProvider`, you'll see that it contains several URIs:\n\n```java\npackage com.mwr.example.sieve;\n...\npublic class DBContentProvider extends ContentProvider {\n    public static final Uri KEYS_URI = Uri.parse(\"content://com.mwr.example.sieve.DBContentProvider/Keys\");\n    public static final Uri PASSWORDS_URI = Uri.parse(\"content://com.mwr.example.sieve.DBContentProvider/Passwords\");\n...\n}\n```\n\nUse the following commands to call the content provider using the identified URIs:\n\n```bash\n$ adb shell content query --uri content://com.mwr.example.sieve.DBContentProvider/Keys/\nRow: 0 Password=1234567890AZERTYUIOPazertyuiop, pin=1234\n\n$ adb shell content query --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/\nRow: 0 _id=1, service=test, username=test, password=BLOB, email=t@tedt.com\nRow: 1 _id=2, service=bank, username=owasp, password=BLOB, email=user@tedt.com\n\n$ adb shell content query --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection email:username:password --where 'service=\\\"bank\\\"'\nRow: 0 email=user@tedt.com, username=owasp, password=BLOB\n```\n\nYou are able now to retrieve all database entries (see all lines starting with \"Row:\" in the output).\n\n### Activities\n\nTo list activities exported by an application, you can use the following command and focus on `activity` elements:\n\n```bash\n$ aapt d xmltree sieve.apk AndroidManifest.xml\n...\nE: activity (line=32)\n  A: android:label(0x01010001)=@0x7f05000f\n  A: android:name(0x01010003)=\".FileSelectActivity\" (Raw: \".FileSelectActivity\")\n  A: android:exported(0x01010010)=(type 0x12)0xffffffff\n  A: android:finishOnTaskLaunch(0x01010014)=(type 0x12)0xffffffff\n  A: android:clearTaskOnLaunch(0x01010015)=(type 0x12)0xffffffff\n  A: android:excludeFromRecents(0x01010017)=(type 0x12)0xffffffff\nE: activity (line=40)\n  A: android:label(0x01010001)=@0x7f050000\n  A: android:name(0x01010003)=\".MainLoginActivity\" (Raw: \".MainLoginActivity\")\n  A: android:excludeFromRecents(0x01010017)=(type 0x12)0xffffffff\n  A: android:launchMode(0x0101001d)=(type 0x10)0x2\n  A: android:windowSoftInputMode(0x0101022b)=(type 0x11)0x14\n  E: intent-filter (line=46)\n    E: action (line=47)\n      A: android:name(0x01010003)=\"android.intent.action.MAIN\" (Raw: \"android.intent.action.MAIN\")\n    E: category (line=49)\n      A: android:name(0x01010003)=\"android.intent.category.LAUNCHER\" (Raw: \"android.intent.category.LAUNCHER\")\nE: activity (line=52)\n  A: android:label(0x01010001)=@0x7f050009\n  A: android:name(0x01010003)=\".PWList\" (Raw: \".PWList\")\n  A: android:exported(0x01010010)=(type 0x12)0xffffffff\n  A: android:finishOnTaskLaunch(0x01010014)=(type 0x12)0xffffffff\n  A: android:clearTaskOnLaunch(0x01010015)=(type 0x12)0xffffffff\n  A: android:excludeFromRecents(0x01010017)=(type 0x12)0xffffffff\nE: activity (line=60)\n  A: android:label(0x01010001)=@0x7f05000a\n  A: android:name(0x01010003)=\".SettingsActivity\" (Raw: \".SettingsActivity\")\n  A: android:finishOnTaskLaunch(0x01010014)=(type 0x12)0xffffffff\n  A: android:clearTaskOnLaunch(0x01010015)=(type 0x12)0xffffffff\n  A: android:excludeFromRecents(0x01010017)=(type 0x12)0xffffffff\n...\n```\n\nYou can identify an exported activity using one of the following properties:\n\n- It have an `intent-filter` sub declaration.\n- It have the attribute `android:exported` to `0xffffffff`.\n\nYou can also use @MASTG-TOOL-0018 to identify exported activities in the file `AndroidManifest.xml` using the criteria described above:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.mwr.example.sieve\">\n...\n  <!-- This activity is exported via the attribute \"exported\" -->\n  <activity android:name=\".FileSelectActivity\" android:exported=\"true\" />\n   <!-- This activity is exported via the \"intent-filter\" declaration  -->\n  <activity android:name=\".MainLoginActivity\">\n    <intent-filter>\n      <action android:name=\"android.intent.action.MAIN\"/>\n      <category android:name=\"android.intent.category.LAUNCHER\"/>\n    </intent-filter>\n  </activity>\n  <!-- This activity is exported via the attribute \"exported\" -->\n  <activity android:name=\".PWList\" android:exported=\"true\" />\n  <!-- Activities below are not exported -->\n  <activity android:name=\".SettingsActivity\" />\n  <activity android:name=\".AddEntryActivity\"/>\n  <activity android:name=\".ShortLoginActivity\" />\n  <activity android:name=\".WelcomeActivity\" />\n  <activity android:name=\".PINActivity\" />\n...\n</manifest>\n```\n\nEnumerating activities in the vulnerable password manager \"Sieve\" shows that the following activities are exported:\n\n- `.MainLoginActivity`\n- `.PWList`\n- `.FileSelectActivity`\n\nUse the command below to launch an activity:\n\n```bash\n# Start the activity without specifying an action or an category\n$ adb shell am start -n com.mwr.example.sieve/.PWList\nStarting: Intent { cmp=com.mwr.example.sieve/.PWList }\n\n# Start the activity indicating an action (-a) and an category (-c)\n$ adb shell am start -n \"com.mwr.example.sieve/.MainLoginActivity\" -a android.intent.action.MAIN -c android.intent.category.LAUNCHER\nStarting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.mwr.example.sieve/.MainLoginActivity }\n```\n\nSince the activity `.PWList` is called directly in this example, you can use it to bypass the login form protecting the password manager, and access the data contained within the password manager.\n\n### Services\n\nServices can be enumerated with the Drozer module `app.service.info`:\n\n```bash\ndz> run app.service.info -a com.mwr.example.sieve\nPackage: com.mwr.example.sieve\n  com.mwr.example.sieve.AuthService\n    Permission: null\n  com.mwr.example.sieve.CryptoService\n    Permission: null\n```\n\nTo communicate with a service, you must first use static analysis to identify the required inputs.\n\nBecause this service is exported, you can use the module `app.service.send` to communicate with the service and change the password stored in the target application:\n\n```bash\ndz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve.AuthService --msg 6345 7452 1 --extra string com.mwr.example.sieve.PASSWORD \"abcdabcdabcdabcd\" --bundle-as-obj\nGot a reply from com.mwr.example.sieve/com.mwr.example.sieve.AuthService:\n  what: 4\n  arg1: 42\n  arg2: 0\n  Empty\n```\n\n### Broadcast Receivers\n\nTo list broadcast receivers exported by an application, you can use the following command and focus on `receiver` elements:\n\n```bash\n$ aapt d xmltree InsecureBankv2.apk AndroidManifest.xml\n...\nE: receiver (line=88)\n  A: android:name(0x01010003)=\"com.android.insecurebankv2.MyBroadCastReceiver\" (Raw: \"com.android.insecurebankv2.MyBroadCastReceiver\")\n  A: android:exported(0x01010010)=(type 0x12)0xffffffff\n  E: intent-filter (line=91)\n    E: action (line=92)\n      A: android:name(0x01010003)=\"theBroadcast\" (Raw: \"theBroadcast\")\nE: receiver (line=119)\n  A: android:name(0x01010003)=\"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\" (Raw: \"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\")\n  A: android:exported(0x01010010)=(type 0x12)0x0\n  E: intent-filter (line=122)\n    E: action (line=123)\n      A: android:name(0x01010003)=\"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\" (Raw: \"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\")\n...\n```\n\nYou can identify an exported broadcast receiver using one of the following properties:\n\n- It has an `intent-filter` sub declaration.\n- It has the attribute `android:exported` set to `0xffffffff`.\n\nYou can also use @MASTG-TOOL-0018 to identify exported broadcast receivers in the file `AndroidManifest.xml` using the criteria described above:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.insecurebankv2\">\n...\n  <!-- This broadcast receiver is exported via the attribute \"exported\" as well as the \"intent-filter\" declaration -->\n  <receiver android:name=\"com.android.insecurebankv2.MyBroadCastReceiver\" android:exported=\"true\">\n    <intent-filter>\n      <action android:name=\"theBroadcast\"/>\n    </intent-filter>\n  </receiver>\n  <!-- This broadcast receiver is NOT exported because the attribute \"exported\" is explicitly set to false -->\n  <receiver android:name=\"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\" android:exported=\"false\">\n    <intent-filter>\n      <action android:name=\"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\"/>\n    </intent-filter>\n  </receiver>\n...\n</manifest>\n```\n\nThe above example from the vulnerable banking application @MASTG-APP-0010 shows that only the broadcast receiver named `com.android.insecurebankv2.MyBroadCastReceiver` is exported.\n\nNow that you know that there is an exported broadcast receiver, you can dive deeper and reverse engineer the app using @MASTG-TOOL-0018. This will allow you to analyze the source code searching for potential vulnerabilities that you could later try to exploit. The source code of the exported broadcast receiver is the following:\n\n```java\npackage com.android.insecurebankv2;\n...\npublic class MyBroadCastReceiver extends BroadcastReceiver {\n    public static final String MYPREFS = \"mySharedPreferences\";\n    String usernameBase64ByteString;\n\n    public void onReceive(Context context, Intent intent) {\n        String phn = intent.getStringExtra(\"phonenumber\");\n        String newpass = intent.getStringExtra(\"newpass\");\n        if (phn != null) {\n            try {\n                SharedPreferences settings = context.getSharedPreferences(\"mySharedPreferences\", 1);\n                this.usernameBase64ByteString = new String(Base64.decode(settings.getString(\"EncryptedUsername\", (String) null), 0), \"UTF-8\");\n                String decryptedPassword = new CryptoClass().aesDeccryptedString(settings.getString(\"superSecurePassword\", (String) null));\n                String textPhoneno = phn.toString();\n                String textMessage = \"Updated Password from: \" + decryptedPassword + \" to: \" + newpass;\n                SmsManager smsManager = SmsManager.getDefault();\n                System.out.println(\"For the changepassword - phonenumber: \" + textPhoneno + \" password is: \" + textMessage);\n                smsManager.sendTextMessage(textPhoneno, (String) null, textMessage, (PendingIntent) null, (PendingIntent) null);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"Phone number is null\");\n        }\n    }\n}\n```\n\nAs you can see in the source code, this broadcast receiver expects two parameters named `phonenumber` and `newpass`. With this information you can now try to exploit this broadcast receiver by sending events to it using custom values:\n\n```bash\n# Send an event with the following properties:\n# Action is set to \"theBroadcast\"\n# Parameter \"phonenumber\" is set to the string \"07123456789\"\n# Parameter \"newpass\" is set to the string \"12345\"\n$ adb shell am broadcast -a theBroadcast --es phonenumber \"07123456789\" --es newpass \"12345\"\nBroadcasting: Intent { act=theBroadcast flg=0x400000 (has extras) }\nBroadcast completed: result=0\n```\n\nThis generates the following SMS:\n\n```bash\nUpdated Password from: SecretPassword@ to: 12345\n```\n\n#### Sniffing Intents\n\nIf an Android application broadcasts intents without setting a required permission or specifying the destination package, the intents can be monitored by any application that runs on the device.\n\nTo register a broadcast receiver to sniff intents, use the Drozer module `app.broadcast.sniff` and specify the action to monitor with the `--action` parameter:\n\n```bash\ndz> run app.broadcast.sniff  --action theBroadcast\n[*] Broadcast receiver registered to sniff matching intents\n[*] Output is updated once a second. Press Control+C to exit.\n\nAction: theBroadcast\nRaw: Intent { act=theBroadcast flg=0x10 (has extras) }\nExtra: phonenumber=07123456789 (java.lang.String)\nExtra: newpass=12345 (java.lang.String)`\n```\n\nYou can also use the following command to sniff the intents. However, the content of the extras passed will not be displayed:\n\n```bash\n$ adb shell dumpsys activity broadcasts | grep \"theBroadcast\"\nBroadcastRecord{fc2f46f u0 theBroadcast} to user 0\nIntent { act=theBroadcast flg=0x400010 (has extras) }\nBroadcastRecord{7d4f24d u0 theBroadcast} to user 0\nIntent { act=theBroadcast flg=0x400010 (has extras) }\n45: act=theBroadcast flg=0x400010 (has extras)\n46: act=theBroadcast flg=0x400010 (has extras)\n121: act=theBroadcast flg=0x400010 (has extras)\n144: act=theBroadcast flg=0x400010 (has extras)\n```"
  },
  {
    "id": "MASTG-TEST-0030",
    "title": "Testing for Vulnerable Implementation of PendingIntent",
    "category": "Platform Interaction",
    "description": "To identify vulnerable implementations, static analysis can be performed by looking for API calls used for obtaining a `PendingIntent`. Such APIs are listed below:",
    "full_description": "## Overview\n\nWhen testing [Pending Intents](../../../Document/0x05h-Testing-Platform-Interaction.md#pending-intents) you must ensure that they are immutable and that the app explicitly specifies the exact package, action, and component that will receive the base intent.\n\n## Static Analysis\n\nTo identify vulnerable implementations, static analysis can be performed by looking for API calls used for obtaining a `PendingIntent`. Such APIs are listed below:\n\n```java\nPendingIntent getActivity(Context, int, Intent, int)\nPendingIntent getActivity(Context, int, Intent, int, Bundle)\nPendingIntent getActivities(Context, int, Intent, int, Bundle)\nPendingIntent getActivities(Context, int, Intent, int)\nPendingIntent getForegroundService(Context, int, Intent, int)\nPendingIntent getService(Context, int, Intent, int)\n```\n\nOnce any of the above function is spotted, check the implementation of the base intent and the `PendingIntent` for the security pitfalls listed in the [Pending Intents](../../../Document/0x05h-Testing-Platform-Interaction.md#pending-intents) section.\n\nFor example, in [A-156959408](https://android.googlesource.com/platform/frameworks/base/+/6ae2bd0e59636254c32896f7f01379d1d704f42d \"A-156959408\")(CVE-2020-0389), the base intent is implicit and also the `PendingIntent` is mutable, thus making it exploitable.\n\n```java\nprivate Notification createSaveNotification(Uri uri) {\n    Intent viewIntent = new Intent(Intent.ACTION_VIEW)\n            .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION)\n            .setDataAndType(uri, \"video/mp4\"); //Implicit Intent\n\n//... skip ...\n\n\nNotification.Builder builder = new Notification.Builder(this, CHANNEL_ID)\n                .setSmallIcon(R.drawable.ic_android)\n                .setContentTitle(getResources().getString(R.string.screenrecord_name))\n                .setContentText(getResources().getString(R.string.screenrecord_save_message))\n                .setContentIntent(PendingIntent.getActivity(\n                        this,\n                        REQUEST_CODE,\n                        viewIntent,\n                        Intent.FLAG_GRANT_READ_URI_PERMISSION))     // Mutable PendingIntent.\n                .addAction(shareAction)\n                .addAction(deleteAction)\n                .setAutoCancel(true);\n\n```\n\n## Dynamic Analysis\n\nFrida can be used to hook the APIs used to get a `PendingIntent`. This information can be used to determine the code location of the call, which can be further used to perform static analysis as described above.\n\nHere's an example of such a Frida script that can be used to hook the `PendingIntent.getActivity` function:\n\n```javascript\nvar pendingIntent = Java.use('android.app.PendingIntent');\n\nvar getActivity_1 = pendingIntent.getActivity.overload(\"android.content.Context\", \"int\", \"android.content.Intent\", \"int\");\n\ngetActivity_1.implementation = function(context, requestCode, intent, flags){\n    console.log(\"[*] Calling PendingIntent.getActivity(\"+intent.getAction()+\")\");\n    console.log(\"\\t[-] Base Intent toString: \" + intent.toString());\n    console.log(\"\\t[-] Base Intent getExtras: \" + intent.getExtras());\n    console.log(\"\\t[-] Base Intent getFlags: \" + intent.getFlags());\n    return this.getActivity(context, requestCode, intent, flags);\n}\n```\n\nThis approach can be helpful when dealing with applications with large code bases, where determining the control flow can sometimes be tricky."
  },
  {
    "id": "MASTG-TEST-0031",
    "title": "Testing JavaScript Execution in WebViews",
    "category": "Platform Interaction",
    "description": "To create and use a WebView, an app must create an instance of the `WebView` class.",
    "full_description": "## Overview\n\nTo test for [JavaScript execution in WebViews](../../../Document/0x05h-Testing-Platform-Interaction.md#javascript-execution-in-webviews \"JavaScript Execution in WebViews\") check the app for WebView usage and evaluate whether or not each WebView should allow JavaScript execution. If JavaScript execution is required for the app to function normally, then you need to ensure that the app follows the all best practices.\n\n## Static Analysis\n\nTo create and use a WebView, an app must create an instance of the `WebView` class.\n\n```java\nWebView webview = new WebView(this);\nsetContentView(webview);\nwebview.loadUrl(\"https://www.owasp.org/\");\n```\n\nVarious settings can be applied to the WebView (activating/deactivating JavaScript is one example). JavaScript is disabled by default for WebViews and must be explicitly enabled. Look for the method [`setJavaScriptEnabled`](https://developer.android.com/reference/android/webkit/WebSettings#setJavaScriptEnabled%28boolean%29 \"setJavaScriptEnabled in WebViews\") to check for JavaScript activation.\n\n```java\nwebview.getSettings().setJavaScriptEnabled(true);\n```\n\nThis allows the WebView to interpret JavaScript. It should be enabled only if necessary to reduce the attack surface to the app. If JavaScript is necessary, you should make sure that\n\n- The communication to the endpoints consistently relies on HTTPS (or other protocols that allow encryption) to protect HTML and JavaScript from tampering during transmission.\n- JavaScript and HTML are loaded locally, from within the app data directory or from trusted web servers only.\n- The user cannot define which sources to load by means of loading different resources based on a user provided input.\n\nTo remove all JavaScript source code and locally stored data, clear the WebView's cache with [`clearCache`](https://developer.android.com/reference/android/webkit/WebView#clearCache%28boolean%29 \"clearCache in WebViews\") when the app closes.\n\nDevices running platforms older than Android 4.4 (API level 19) use a version of WebKit that has several security issues. As a workaround, the app must confirm that WebView objects [display only trusted content](https://developer.android.com/training/articles/security-tips.html#WebView \"WebView Best Practices\") if the app runs on these devices.\n\n## Dynamic Analysis\n\nDynamic Analysis depends on operating conditions. There are several ways to inject JavaScript into an app's WebView:\n\n- Stored Cross-Site Scripting vulnerabilities in an endpoint; the exploit will be sent to the mobile app's WebView when the user navigates to the vulnerable function.\n- Attacker takes a [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) position and tampers with the response by injecting JavaScript.\n- Malware tampering with local files that are loaded by the WebView.\n\nTo address these attack vectors, check the following:\n\n- All functions offered by the endpoint should be free of [stored XSS](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting \"Stored Cross-Site Scripting\").\n- Only files that are in the app data directory should be rendered in a WebView (see test case \"Testing for Local File Inclusion in WebViews\").\n\n- The HTTPS communication must be implemented according to best practices to avoid MITM attacks. This means:\n    - all communication is encrypted via TLS,\n    - the certificate is checked properly, and/or\n    - the certificate should be pinned."
  },
  {
    "id": "MASTG-TEST-0032",
    "title": "Testing WebView Protocol Handlers",
    "category": "Platform Interaction",
    "description": "Check the source code for WebView usage. The following [WebView settings](https://developer.android.com/reference/android/webkit/WebSettings.html \"WebView Settings\") control resource access:",
    "full_description": "## Overview\n\nTo test for [WebView protocol handlers (or resource access)](../../../Document/0x05h-Testing-Platform-Interaction.md#webview-local-file-access-settings) check the app for WebView usage and evaluate whether or not the WebView should have resource access. If resource access is necessary you need to verify that it's implemented following best practices.\n\n## Static Analysis\n\nCheck the source code for WebView usage. The following [WebView settings](https://developer.android.com/reference/android/webkit/WebSettings.html \"WebView Settings\") control resource access:\n\n- `setAllowContentAccess`: Content URL access allows WebViews to load content from a content provider installed on the system, which is enabled by default .\n- `setAllowFileAccess`: Enables and disables file access within a WebView. The default value is `true` when targeting Android 10 (API level 29) and below and `false` for Android 11 (API level 30) and above. Note that this enables and disables [file system access](https://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess%28boolean%29 \"File Access in WebView\") only. Asset and resource access is unaffected and accessible via `file:///android_asset` and `file:///android_res`.\n- `setAllowFileAccessFromFileURLs`: Does or does not allow JavaScript running in the context of a file scheme URL to access content from other file scheme URLs. The default value is `true` for Android 4.0.3 - 4.0.4 (API level 15) and below and `false` for Android 4.1 (API level 16) and above.\n- `setAllowUniversalAccessFromFileURLs`: Does or does not allow JavaScript running in the context of a file scheme URL to access content from any origin. The default value is `true` for Android 4.0.3 - 4.0.4 (API level 15) and below and `false` for Android 4.1 (API level 16) and above.\n\nIf one or more of the above methods is/are activated, you should determine whether the method(s) is/are really necessary for the app to work properly.\n\nIf a WebView instance can be identified, find out whether local files are loaded with the [`loadURL`](https://developer.android.com/reference/android/webkit/WebView.html#loadUrl%28java.lang.String%29 \"loadURL in WebView\") method.\n\n```java\nWebView = new WebView(this);\nwebView.loadUrl(\"file:///android_asset/filename.html\");\n```\n\nThe location from which the HTML file is loaded must be verified. If the file is loaded from external storage, for example, the file is readable and writable by everyone. This is considered a bad practice. Instead, the file should be placed in the app's assets directory.\n\n```java\nwebview.loadUrl(\"file:///\" +\nEnvironment.getExternalStorageDirectory().getPath() +\n\"filename.html\");\n```\n\nThe URL specified in `loadURL` should be checked for dynamic parameters that can be manipulated; their manipulation may lead to local file inclusion.\n\nUse the following [code snippet and best practices](https://github.com/nowsecure/secure-mobile-development/blob/master/en/android/webview-best-practices.md#remediation \"WebView best practices\") to deactivate protocol handlers, if applicable:\n\n```java\n//If attackers can inject script into a WebView, they could access local resources. This can be prevented by disabling local file system access, which is enabled by default. You can use the Android WebSettings class to disable local file system access via the public method `setAllowFileAccess`.\nwebView.getSettings().setAllowFileAccess(false);\n\nwebView.getSettings().setAllowFileAccessFromFileURLs(false);\n\nwebView.getSettings().setAllowUniversalAccessFromFileURLs(false);\n\nwebView.getSettings().setAllowContentAccess(false);\n```\n\n- Create a list that defines local and remote web pages and protocols that are allowed to be loaded.\n- Create checksums of the local HTML/JavaScript files and check them while the app is starting up. Minify JavaScript files to make them harder to read.\n\n## Dynamic Analysis\n\nTo identify the usage of protocol handlers, look for ways to trigger phone calls and ways to access files from the file system while you're using the app."
  },
  {
    "id": "MASTG-TEST-0033",
    "title": "Testing for Java Objects Exposed Through WebViews",
    "category": "Platform Interaction",
    "description": "The following example shows how `addJavascriptInterface` is used to bridge a Java Object and JavaScript in a WebView:",
    "full_description": "## Overview\n\nTo test for [Java objects exposed through WebViews](../../../Document/0x05h-Testing-Platform-Interaction.md#java-objects-exposed-through-webviews \"Java Objects Exposed Through WebViews\") check the app for WebViews having JavaScript enabled and determine whether the WebView is creating any JavaScript interfaces aka. \"JavaScript Bridges\". Finally, check whether an attacker could potentially inject malicious JavaScript code.\n\n## Static Analysis\n\nThe following example shows how `addJavascriptInterface` is used to bridge a Java Object and JavaScript in a WebView:\n\n```java\nWebView webview = new WebView(this);\nWebSettings webSettings = webview.getSettings();\nwebSettings.setJavaScriptEnabled(true);\n\nMSTG_ENV_008_JS_Interface jsInterface = new MSTG_ENV_008_JS_Interface(this);\n\nmyWebView.addJavascriptInterface(jsInterface, \"Android\");\nmyWebView.loadURL(\"http://example.com/file.html\");\nsetContentView(myWebView);\n```\n\nIn Android 4.2 (API level 17) and above, an annotation `@JavascriptInterface` explicitly allows JavaScript to access a Java method.\n\n```java\npublic class MSTG_ENV_008_JS_Interface {\n\n        Context mContext;\n\n        /** Instantiate the interface and set the context */\n        MSTG_ENV_005_JS_Interface(Context c) {\n            mContext = c;\n        }\n\n        @JavascriptInterface\n        public String returnString () {\n            return \"Secret String\";\n        }\n\n        /** Show a toast from the web page */\n        @JavascriptInterface\n        public void showToast(String toast) {\n            Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();\n        }\n}\n```\n\nThis is how you can call the method `returnString` from JavaScript, the string \"Secret String\" will be stored in the variable `result`:\n\n```javascript\nvar result = window.Android.returnString();\n```\n\nWith access to the JavaScript code, via, for example, stored XSS or a MITM attack, an attacker can directly call the exposed Java methods.\n\nIf `addJavascriptInterface` is necessary, take the following considerations:\n\n- Only JavaScript provided with the APK should be allowed to use the bridges, e.g. by verifying the URL on each bridged Java method (via `WebView.getUrl`).\n- No JavaScript should be loaded from remote endpoints, e.g. by keeping page navigation within the app's domains and opening all other domains on the default browser (e.g. Chrome, Firefox).\n- If necessary for legacy reasons (e.g. having to support older devices), at least set the minimal API level to 17 in the manifest file of the app (`<uses-sdk android:minSdkVersion=\"17\" />`).\n\n## Dynamic Analysis\n\nDynamic analysis of the app can show you which HTML or JavaScript files are loaded and which vulnerabilities are present. The procedure for exploiting the vulnerability starts with producing a JavaScript payload and injecting it into the file that the app is requesting. The injection can be accomplished via a MITM attack or direct modification of the file if it is stored in external storage. The whole process can be accomplished via Drozer and weasel (MWR's advanced exploitation payload), which can install a full agent, injecting a limited agent into a running process or connecting a reverse shell as a Remote Access Tool (RAT).\n\nA full description of the attack is included in the blog article [\"WebView addJavascriptInterface Remote Code Execution\"](https://labs.withsecure.com/publications/webview-addjavascriptinterface-remote-code-execution/ \"WebView addJavascriptInterface Remote Code Execution\")."
  },
  {
    "id": "MASTG-TEST-0035",
    "title": "Testing for Overlay Attacks",
    "category": "Platform Interaction",
    "description": "To start your static analysis you can check the app for the following methods and attributes (non-exhaustive list):",
    "full_description": "## Overview\n\nTo test for [overlay attacks](../../../Document/0x05h-Testing-Platform-Interaction.md#overlay-attacks \"Overlay Attacks\") you need to check the app for usage of certain APIs and attributed typically used to protect against overlay attacks as well as check the Android version that app is targeting.\n\nTo mitigate these attacks please carefully read the general guidelines about Android View security in the [Android Developer Documentation](https://developer.android.com/reference/android/view/View#security \"View Security\"). For instance, the so-called _touch filtering_ is a common defense against tapjacking, which contributes to safeguarding users against these vulnerabilities, usually in combination with other techniques and considerations as we introduce in this section.\n\n## Static Analysis\n\nTo start your static analysis you can check the app for the following methods and attributes (non-exhaustive list):\n\n- Override [`onFilterTouchEventForSecurity`](https://developer.android.com/reference/android/view/View#onFilterTouchEventForSecurity%28android.view.MotionEvent%29 \"onFilterTouchEventForSecurity\") for more fine-grained control and to implement a custom security policy for views.\n- Set the layout attribute [`android:filterTouchesWhenObscured`](https://developer.android.com/reference/android/view/View#attr_android:filterTouchesWhenObscured \"android:filterTouchesWhenObscured\") to true or call [`setFilterTouchesWhenObscured`](https://developer.android.com/reference/android/view/View.html#setFilterTouchesWhenObscured%28boolean%29 \"setFilterTouchesWhenObscured\").\n- Check [FLAG_WINDOW_IS_OBSCURED](https://developer.android.com/reference/android/view/MotionEvent.html#FLAG_WINDOW_IS_OBSCURED \"FLAG_WINDOW_IS_OBSCURED\") (since API level 9) or [FLAG_WINDOW_IS_PARTIALLY_OBSCURED](https://developer.android.com/reference/android/view/MotionEvent.html#FLAG_WINDOW_IS_PARTIALLY_OBSCURED \"FLAG_WINDOW_IS_PARTIALLY_OBSCURED\") (starting on API level 29).\n\nSome attributes might affect the app as a whole, while others can be applied to specific components. The latter would be the case when, for example, there is a business need to specifically allow overlays while wanting to protect sensitive input UI elements. The developers might also take additional precautions to confirm the user's actual intent which might be legitimate and tell it apart from a potential attack.\n\nAs a final note, always remember to properly check the API level that app is targeting and the implications that this has. For instance, [Android 8.0 (API level 26) introduced changes](https://developer.android.com/about/versions/oreo/android-8.0-changes#all-aw \"Alert windows\") to apps requiring `SYSTEM_ALERT_WINDOW` (\"draw on top\"). From this API level on, apps using `TYPE_APPLICATION_OVERLAY` will be always [shown above other windows](https://developer.android.com/about/versions/oreo/android-8.0-changes#all-aw \"Alert Windows\") having other types such as `TYPE_SYSTEM_OVERLAY` or `TYPE_SYSTEM_ALERT`. You can use this information to ensure that no overlay attacks may occur at least for this app in this concrete Android version.\n\n## Dynamic Analysis\n\nAbusing this kind of vulnerability on a dynamic manner can be pretty challenging and very specialized as it closely depends on the target Android version. For instance, for versions up to Android 7.0 (API level 24) you can use the following APKs as a proof of concept to identify the existence of the vulnerabilities.\n\n- [Tapjacking POC](https://github.com/FSecureLABS/tapjacking-poc \"Tapjacking POC\"): This APK creates a simple overlay which sits on top of the testing application.\n- [Invisible Keyboard](https://github.com/DEVizzi/Invisible-Keyboard \"Invisible Keyboard\"): This APK creates multiple overlays on the keyboard to capture keystrokes. This is one of the exploit demonstrated in Cloak and Dagger attacks."
  },
  {
    "id": "MASTG-TEST-0037",
    "title": "Testing WebViews Cleanup",
    "category": "Platform Interaction",
    "description": "Start by identifying the usage of the following WebView APIs and carefully validate the mentioned best practices.",
    "full_description": "## Overview\n\nTo test for [WebViews cleanup](../../../Document/0x05h-Testing-Platform-Interaction.md#webviews-cleanup \"WebViews Cleanup\") you should inspect all APIs related to WebView data deletion and try to fully track the data deletion process.\n\n## Static Analysis\n\nStart by identifying the usage of the following WebView APIs and carefully validate the mentioned best practices.\n\n- **Initialization**: an app might be initializing the WebView in a way to avoid storing certain information by using `setDomStorageEnabled`, `setAppCacheEnabled` or `setDatabaseEnabled` from [`android.webkit.WebSettings`](https://developer.android.com/reference/android/webkit/WebSettings \"WebSettings\"). The DOM Storage (for using the HTML5 local storage), Application Caches and Database Storage APIs are disabled by default, but apps might set these settings explicitly to \"true\".\n\n- **Cache**: Android's WebView class offers the [`clearCache`](https://developer.android.com/reference/android/webkit/WebView#clearCache(boolean) \"clearCache in WebViews\") method which can be used to clear the cache for all WebViews used by the app. It receives a boolean input parameter (`includeDiskFiles`) which will wipe all stored resource including the RAM cache. However if it's set to false, it will only clear the RAM cache. Check the app for usage of the `clearCache` method and verify its input parameter. Additionally, you may also check if the app is overriding `onRenderProcessUnresponsive` for the case when the WebView might become unresponsive, as the `clearCache` method might also be called from there.\n\n- **WebStorage APIs**: [`WebStorage.deleteAllData`](https://developer.android.com/reference/android/webkit/WebStorage#deleteAllData) can be also used to clear all storage currently being used by the JavaScript storage APIs, including the Web SQL Database and the HTML5 Web Storage APIs.\n  > Some apps will _need_ to enable the DOM storage in order to display some HTML5 sites that use local storage. This should be carefully investigated as this might contain sensitive data.\n\n- **Cookies**: any existing cookies can be deleted by using [CookieManager.removeAllCookies](https://developer.android.com/reference/android/webkit/CookieManager#removeAllCookies(android.webkit.ValueCallback%3Cjava.lang.Boolean%3E)).\n\n- **File APIs**: proper data deletion in certain directories might not be that straightforward, some apps use a pragmatic solution which is to _manually_ delete selected directories known to hold user data. This can be done using the `java.io.File` API such as [`java.io.File.deleteRecursively`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/delete-recursively.html).\n\n**Example:**\n\nThis example in Kotlin from the [open source Firefox Focus](https://github.com/mozilla-mobile/focus-android/blob/v8.17.1/app/src/main/java/org/mozilla/focus/webview/SystemWebView.kt#L220 \"Firefox Focus for Android\") app shows different cleanup steps:\n\n```Java\noverride fun cleanup() {\n    clearFormData() // Removes the autocomplete popup from the currently focused form field, if present. Note this only affects the display of the autocomplete popup, it does not remove any saved form data from this WebView's store. To do that, use WebViewDatabase#clearFormData.\n    clearHistory()\n    clearMatches()\n    clearSslPreferences()\n    clearCache(true)\n\n    CookieManager.getInstance().removeAllCookies(null)\n\n    WebStorage.getInstance().deleteAllData() // Clears all storage currently being used by the JavaScript storage APIs. This includes the Application Cache, Web SQL Database and the HTML5 Web Storage APIs.\n\n    val webViewDatabase = WebViewDatabase.getInstance(context)\n    // It isn't entirely clear how this differs from WebView.clearFormData()\n    @Suppress(\"DEPRECATION\")\n    webViewDatabase.clearFormData() // Clears any saved data for web forms.\n    webViewDatabase.clearHttpAuthUsernamePassword()\n\n    deleteContentFromKnownLocations(context) // calls FileUtils.deleteWebViewDirectory(context) which deletes all content in \"app_webview\".\n}\n```\n\nThe function finishes with some extra _manual_ file deletion in `deleteContentFromKnownLocations` which calls functions from [`FileUtils`](https://github.com/mozilla-mobile/focus-android/blob/v8.17.1/app/src/main/java/org/mozilla/focus/utils/FileUtils.kt). These functions use the [`java.io.File.deleteRecursively`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/java.io.-file/delete-recursively.html) method to recursively delete files from the specified directories.\n\n```Java\nprivate fun deleteContent(directory: File, doNotEraseWhitelist: Set<String> = emptySet()): Boolean {\n    val filesToDelete = directory.listFiles()?.filter { !doNotEraseWhitelist.contains(it.name) } ?: return false\n    return filesToDelete.all { it.deleteRecursively() }\n}\n```\n\n## Dynamic Analysis\n\nOpen a WebView accessing sensitive data and then log out of the application. Access the application's storage container and make sure all WebView related files are deleted. The following files and folders are typically related to WebViews:\n\n- app_webview\n- Cookies\n- pref_store\n- blob_storage\n- Session Storage\n- Web Data\n- Service Worker"
  },
  {
    "id": "MASTG-TEST-0038",
    "title": "Making Sure that the App is Properly Signed",
    "category": "Anti-Reverse Engineering",
    "description": "APK signatures can be verified with the [apksigner](https://developer.android.com/tools/apksigner) tool. It is located at `[SDK-Path]/build-tools/[version]/apksigner`.",
    "full_description": "## Overview\n\nEnsure that the release builds are properly signed to safeguard their integrity and protect them from tampering. Android has evolved its signing schemes over time to enhance security, with newer versions offering more robust mechanisms.\n\n- **Android 7.0 (API level 24) and above**: Use at least the **v2 signature scheme**, which signs the APK as a whole, providing stronger protection compared to the older v1 (JAR) signing method.\n- **Android 9 (API level 28) and above**: It's recommended to use both the **v2 and v3 signature schemes**. The v3 scheme supports **key rotation**, enabling developers to replace keys in the event of a compromise without invalidating old signatures.\n- **Android 11 (API level 30) and above**: Optionally include the **v4 signature scheme** to enable faster incremental updates.\n\nAvoid using the **v1 signature scheme** (JAR signing) unless absolutely necessary for backward compatibility with Android 6.0 (API level 23) and below as it is considered insecure. For example, it is affected by the **Janus vulnerability (CVE-2017-13156)**, which can allow malicious actors to modify APK files without invalidating the v1 signature. As such, **v1 should never be relied on exclusively for devices running Android 7.0 and above**.\n\nYou should also ensure that the APK's code-signing certificate is valid and belongs to the developer.\n\nFor further guidance, refer to the official [Android app signing documentation](https://developer.android.com/studio/publish/app-signing) and best practices for [configuring apps for release](https://developer.android.com/tools/publishing/preparing.html#publishing-configure).\n\n## Static Analysis\n\nAPK signatures can be verified with the [apksigner](https://developer.android.com/tools/apksigner) tool. It is located at `[SDK-Path]/build-tools/[version]/apksigner`.\n\n```bash\n$ apksigner verify --verbose example.apk\nVerifies\nVerified using v1 scheme (JAR signing): false\nVerified using v2 scheme (APK Signature Scheme v2): true\nVerified using v3 scheme (APK Signature Scheme v3): true\nVerified using v3.1 scheme (APK Signature Scheme v3.1): false\nVerified using v4 scheme (APK Signature Scheme v4): false\nVerified for SourceStamp: false\nNumber of signers: 1\n```\n\nThe contents of the signing certificate can be also examined with apksigner:\n\n```bash\n$ apksigner verify --print-certs --verbose example.apk\n[...]\nSigner #1 certificate DN: CN=Example Developers, OU=Android, O=Example\nSigner #1 certificate SHA-256 digest: 1fc4de52d0daa33a9c0e3d67217a77c895b46266ef020fad0d48216a6ad6cb70\nSigner #1 certificate SHA-1 digest: 1df329fda8317da4f17f99be83aa64da62af406b\nSigner #1 certificate MD5 digest: 3dbdca9c1b56f6c85415b67957d15310\nSigner #1 key algorithm: RSA\nSigner #1 key size (bits): 2048\nSigner #1 public key SHA-256 digest: 296b4e40a31de2dcfa2ed277ccf787db0a524db6fc5eacdcda5e50447b3b1a26\nSigner #1 public key SHA-1 digest: 3e02ebf64f1bd4ca85732186b3774e9ccd60cb86\nSigner #1 public key MD5 digest: 24afa3496f98c66343fc9c8a0a7ff5a2\n```\n\nThe signing configuration can be managed through Android Studio or the `signingConfigs` section in `build.gradle` or `build.gradle.kts`. To activate both the v3 and v4 schemes, the following values must be set:\n\n```default\n// build.gradle\nandroid {\n  ...\n  signingConfigs {\n    config {\n        ...\n        enableV3Signing true\n        enableV4Signing true\n    }\n  }\n}\n```\n\nNote that APK v4 signing is optional and the lack of it does not represent a vulnerability. It is meant to allow developers to quickly deploy large APKs using the [ADB Incremental APK installation](https://developer.android.com/about/versions/11/features#incremental) in Android 11 and above.\n\n## Dynamic Analysis\n\nStatic analysis should be used to verify the APK signature."
  },
  {
    "id": "MASTG-TEST-0039",
    "title": "Testing whether the App is Debuggable",
    "category": "Anti-Reverse Engineering",
    "description": "Check `AndroidManifest.xml` to determine whether the `android:debuggable` attribute has been set and to find the attribute's value:",
    "full_description": "## Overview\n\n## Static Analysis\n\nCheck `AndroidManifest.xml` to determine whether the `android:debuggable` attribute has been set and to find the attribute's value:\n\n```xml\n    ...\n    <application android:allowBackup=\"true\" android:debuggable=\"true\" android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme\">\n    ...\n```\n\nYou can use `aapt` tool from the Android SDK with the following command line to quickly check if the `android:debuggable=\"true\"` directive is present:\n\n```bash\n# If the command print 1 then the directive is present\n# The regex search for this line: android:debuggable(0x0101000f)=(type 0x12)0xffffffff\n$ aapt d xmltree sieve.apk AndroidManifest.xml | grep -Ec \"android:debuggable\\(0x[0-9a-f]+\\)=\\(type\\s0x[0-9a-f]+\\)0xffffffff\"\n1\n```\n\nFor a release build, this attribute should always be set to `\"false\"` (the default value).\n\n## Static Analysis\n\nCheck `AndroidManifest.xml` to determine whether the `android:debuggable` attribute has been set and to find the attribute's value:\n\n```xml\n    ...\n    <application android:allowBackup=\"true\" android:debuggable=\"true\" android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme\">\n    ...\n```\n\nYou can use `aapt` tool from the Android SDK with the following command line to quickly check if the `android:debuggable=\"true\"` directive is present:\n\n```bash\n# If the command print 1 then the directive is present\n# The regex search for this line: android:debuggable(0x0101000f)=(type 0x12)0xffffffff\n$ aapt d xmltree sieve.apk AndroidManifest.xml | grep -Ec \"android:debuggable\\(0x[0-9a-f]+\\)=\\(type\\s0x[0-9a-f]+\\)0xffffffff\"\n1\n```\n\nFor a release build, this attribute should always be set to `\"false\"` (the default value).\n\n## Dynamic Analysis\n\n`adb` can be used to determine whether an application is debuggable.\n\nUse the following command:\n\n```bash\n# If the command print a number superior to zero then the application have the debug flag\n# The regex search for these lines:\n# flags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n# pkgFlags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n$ adb shell dumpsys package com.mwr.example.sieve | grep -c \"DEBUGGABLE\"\n2\n$ adb shell dumpsys package com.nondebuggableapp | grep -c \"DEBUGGABLE\"\n0\n```\n\nIf an application is debuggable, executing application commands is trivial. In the `adb` shell, execute `run-as` by appending the package name and application command to the binary name:\n\n```bash\n$ run-as com.vulnerable.app id\nuid=10084(u0_a84) gid=10084(u0_a84) groups=10083(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) context=u:r:untrusted_app:s0:c512,c768\n```\n\n[Android Studio](https://developer.android.com/tools/debugging/debugging-studio.html \"Debugging with Android Studio\") can also be used to debug an application and verify debugging activation for an app.\n\nAnother method for determining whether an application is debuggable is attaching `jdb` to the running process. If this is successful, debugging will be activated.\n\nThe following procedure can be used to start a debug session with `jdb`:\n\n1. Using `adb` and `jdwp`, identify the PID of the active application that you want to debug:\n\n    ```bash\n    $ adb jdwp\n    2355\n    16346  <== last launched, corresponds to our application\n    ```\n\n2. Create a communication channel by using `adb` between the application process (with the PID) and your host computer by using a specific local port:\n\n    ```bash\n    # adb forward tcp:[LOCAL_PORT] jdwp:[APPLICATION_PID]\n    $ adb forward tcp:55555 jdwp:16346\n    ```\n\n3. Using `jdb`, attach the debugger to the local communication channel port and start a debug session:\n\n    ```bash\n    $ jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=55555\n    Set uncaught java.lang.Throwable\n    Set deferred uncaught java.lang.Throwable\n    Initializing jdb ...\n    > help\n    ```\n\nA few notes about debugging:\n\n- @MASTG-TOOL-0018 can be used to identify interesting locations for breakpoint insertion.\n- Usage of basic commands for jdb can be found at [Tutorialspoint](https://www.tutorialspoint.com/jdb/jdb_basic_commands.htm \"jdb basic commands\").\n- If you get an error telling that \"the connection to the debugger has been closed\" while `jdb` is being bound to the local communication channel port, kill all adb sessions and start a single new session."
  },
  {
    "id": "MASTG-TEST-0040",
    "title": "Testing for Debugging Symbols",
    "category": "Anti-Reverse Engineering",
    "description": "Symbols are usually stripped during the build process, so you need the compiled bytecode and libraries to make sure that unnecessary metadata has been discarded.",
    "full_description": "## Overview\n\n## Static Analysis\n\nSymbols are usually stripped during the build process, so you need the compiled bytecode and libraries to make sure that unnecessary metadata has been discarded.\n\nFirst, find the `nm` binary in your Android NDK and export it (or create an alias).\n\n```bash\nexport NM = $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm\n```\n\nTo display debug symbols:\n\n```bash\n$NM -a libfoo.so\n/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm: libfoo.so: no symbols\n```\n\nTo display dynamic symbols:\n\n```bash\n$NM -D libfoo.so\n```\n\nAlternatively, open the file in your favorite disassembler and check the symbol tables manually.\n\nDynamic symbols can be stripped via the `visibility` compiler flag. Adding this flag causes gcc to discard the function names while preserving the names of functions declared as `JNIEXPORT`.\n\nMake sure that the following has been added to build.gradle:\n\n```default\nexternalNativeBuild {\n    cmake {\n        cppFlags \"-fvisibility=hidden\"\n    }\n}\n```\n\n## Static Analysis\n\nSymbols are usually stripped during the build process, so you need the compiled bytecode and libraries to make sure that unnecessary metadata has been discarded.\n\nFirst, find the `nm` binary in your Android NDK and export it (or create an alias).\n\n```bash\nexport NM = $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm\n```\n\nTo display debug symbols:\n\n```bash\n$NM -a libfoo.so\n/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm: libfoo.so: no symbols\n```\n\nTo display dynamic symbols:\n\n```bash\n$NM -D libfoo.so\n```\n\nAlternatively, open the file in your favorite disassembler and check the symbol tables manually.\n\nDynamic symbols can be stripped via the `visibility` compiler flag. Adding this flag causes gcc to discard the function names while preserving the names of functions declared as `JNIEXPORT`.\n\nMake sure that the following has been added to build.gradle:\n\n```default\nexternalNativeBuild {\n    cmake {\n        cppFlags \"-fvisibility=hidden\"\n    }\n}\n```\n\n## Dynamic Analysis\n\nStatic analysis should be used to verify debugging symbols."
  },
  {
    "id": "MASTG-TEST-0041",
    "title": "Testing for Debugging Code and Verbose Error Logging",
    "category": "Anti-Reverse Engineering",
    "description": "To determine whether [`StrictMode`](https://developer.android.com/reference/android/os/StrictMode) is enabled, you can look for the `StrictMode.setThreadPolicy` or `StrictMode.setVmPolicy` methods. Mo...",
    "full_description": "## Overview\n\n## Static Analysis\n\nTo determine whether [`StrictMode`](https://developer.android.com/reference/android/os/StrictMode) is enabled, you can look for the `StrictMode.setThreadPolicy` or `StrictMode.setVmPolicy` methods. Most likely, they will be in the `onCreate` method.\n\nThe detection methods for the thread policy are:\n\n- `detectDiskWrites()`\n- `detectDiskReads()`\n- `detectNetwork()`\n\nThe penalties for thread policy violation are:\n\n- `penaltyLog()`: Logs a message to LogCat.\n- `penaltyDeath()`: Crashes application, runs at the end of all enabled penalties.\n- `penaltyDialog()`: Shows a dialog.\n\nHave a look at the [best practices](https://code.tutsplus.com/tutorials/android-best-practices-strictmode--mobile-7581 \"Android Best Practices: StrictMode\") for using StrictMode.\n\n## Static Analysis\n\nTo determine whether [`StrictMode`](https://developer.android.com/reference/android/os/StrictMode) is enabled, you can look for the `StrictMode.setThreadPolicy` or `StrictMode.setVmPolicy` methods. Most likely, they will be in the `onCreate` method.\n\nThe detection methods for the thread policy are:\n\n- `detectDiskWrites()`\n- `detectDiskReads()`\n- `detectNetwork()`\n\nThe penalties for thread policy violation are:\n\n- `penaltyLog()`: Logs a message to LogCat.\n- `penaltyDeath()`: Crashes application, runs at the end of all enabled penalties.\n- `penaltyDialog()`: Shows a dialog.\n\nHave a look at the [best practices](https://code.tutsplus.com/tutorials/android-best-practices-strictmode--mobile-7581 \"Android Best Practices: StrictMode\") for using StrictMode.\n\n## Dynamic Analysis\n\nThere are several ways of detecting `StrictMode`; the best choice depends on how the policies' roles are implemented. They include\n\n- Logcat,\n- a warning dialog,\n- application crash."
  },
  {
    "id": "MASTG-TEST-0045",
    "title": "Testing Root Detection",
    "category": "Anti-Reverse Engineering",
    "description": "Test for testing root detection",
    "full_description": "Mobile application security test as per OWASP MASTG guidelines."
  },
  {
    "id": "MASTG-TEST-0046",
    "title": "Testing Anti-Debugging Detection",
    "category": "Anti-Reverse Engineering",
    "description": "Test for testing anti-debugging detection",
    "full_description": "Mobile application security test as per OWASP MASTG guidelines."
  },
  {
    "id": "MASTG-TEST-0047",
    "title": "Testing File Integrity Checks",
    "category": "Anti-Reverse Engineering",
    "description": "Test for testing file integrity checks",
    "full_description": "Mobile application security test as per OWASP MASTG guidelines."
  },
  {
    "id": "MASTG-TEST-0048",
    "title": "Testing Reverse Engineering Tools Detection",
    "category": "Anti-Reverse Engineering",
    "description": "Test for testing reverse engineering tools detection",
    "full_description": "Mobile application security test as per OWASP MASTG guidelines."
  },
  {
    "id": "MASTG-TEST-0049",
    "title": "Testing Emulator Detection",
    "category": "Anti-Reverse Engineering",
    "description": "Test for testing emulator detection",
    "full_description": "Mobile application security test as per OWASP MASTG guidelines."
  },
  {
    "id": "MASTG-TEST-0050",
    "title": "Testing Runtime Integrity Checks",
    "category": "Anti-Reverse Engineering",
    "description": "Test for testing runtime integrity checks",
    "full_description": "Mobile application security test as per OWASP MASTG guidelines."
  },
  {
    "id": "MASTG-TEST-0051",
    "title": "Testing Obfuscation",
    "category": "Anti-Reverse Engineering",
    "description": "Decompile the APK (@MASTG-TECH-0017) and review it (@MASTG-TECH-0023) to determine whether the codebase has been obfuscated.",
    "full_description": "## Overview\n\n## Static Analysis\n\nDecompile the APK (@MASTG-TECH-0017) and review it (@MASTG-TECH-0023) to determine whether the codebase has been obfuscated.\n\nBelow you can find a sample for an obfuscated code block:\n\n```java\npackage com.a.a.a;\n\nimport com.a.a.b.a;\nimport java.util.List;\n\nclass a$b\n  extends a\n{\n  public a$b(List paramList)\n  {\n    super(paramList);\n  }\n\n  public boolean areAllItemsEnabled()\n  {\n    return true;\n  }\n\n  public boolean isEnabled(int paramInt)\n  {\n    return true;\n  }\n}\n```\n\nHere are some considerations:\n\n- Meaningful identifiers, such as class names, method names, and variable names, might have been discarded.\n- String resources and strings in binaries might have been encrypted.\n- Code and data related to the protected functionality might be encrypted, packed, or otherwise concealed.\n\nFor native code:\n\n- [libc APIs](https://man7.org/linux/man-pages/dir_section_3.html) (e.g open, read) might have been replaced with OS [syscalls](https://man7.org/linux/man-pages/man2/syscalls.2.html).\n- [Obfuscator-LLVM](https://github.com/obfuscator-llvm/obfuscator \"Obfuscator-LLVM\") might have been applied to perform [\"Control Flow Flattening\"](https://github.com/obfuscator-llvm/obfuscator/wiki/Control-Flow-Flattening) or [\"Bogus Control Flow\"](https://github.com/obfuscator-llvm/obfuscator/wiki/Bogus-Control-Flow).\n\nSome of these techniques are discussed and analyzed in the blog post [\"Security hardening of Android native code\"](https://darvincitech.wordpress.com/2020/01/07/security-hardening-of-android-native-code/) by Gautam Arvind and in the [\"APKiD: Fast Identification of AppShielding Products\"](https://github.com/enovella/cve-bio-enovella/blob/master/slides/APKiD-NowSecure-Connect19-enovella.pdf) presentation by Eduardo Novella.\n\nFor a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used. Tools such as @MASTG-TOOL-0009 may give you additional indications about which techniques were used for the target app such as obfuscators, packers and anti-debug measures.\n\n## Static Analysis\n\nDecompile the APK (@MASTG-TECH-0017) and review it (@MASTG-TECH-0023) to determine whether the codebase has been obfuscated.\n\nBelow you can find a sample for an obfuscated code block:\n\n```java\npackage com.a.a.a;\n\nimport com.a.a.b.a;\nimport java.util.List;\n\nclass a$b\n  extends a\n{\n  public a$b(List paramList)\n  {\n    super(paramList);\n  }\n\n  public boolean areAllItemsEnabled()\n  {\n    return true;\n  }\n\n  public boolean isEnabled(int paramInt)\n  {\n    return true;\n  }\n}\n```\n\nHere are some considerations:\n\n- Meaningful identifiers, such as class names, method names, and variable names, might have been discarded.\n- String resources and strings in binaries might have been encrypted.\n- Code and data related to the protected functionality might be encrypted, packed, or otherwise concealed.\n\nFor native code:\n\n- [libc APIs](https://man7.org/linux/man-pages/dir_section_3.html) (e.g open, read) might have been replaced with OS [syscalls](https://man7.org/linux/man-pages/man2/syscalls.2.html).\n- [Obfuscator-LLVM](https://github.com/obfuscator-llvm/obfuscator \"Obfuscator-LLVM\") might have been applied to perform [\"Control Flow Flattening\"](https://github.com/obfuscator-llvm/obfuscator/wiki/Control-Flow-Flattening) or [\"Bogus Control Flow\"](https://github.com/obfuscator-llvm/obfuscator/wiki/Bogus-Control-Flow).\n\nSome of these techniques are discussed and analyzed in the blog post [\"Security hardening of Android native code\"](https://darvincitech.wordpress.com/2020/01/07/security-hardening-of-android-native-code/) by Gautam Arvind and in the [\"APKiD: Fast Identification of AppShielding Products\"](https://github.com/enovella/cve-bio-enovella/blob/master/slides/APKiD-NowSecure-Connect19-enovella.pdf) presentation by Eduardo Novella.\n\nFor a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used. Tools such as @MASTG-TOOL-0009 may give you additional indications about which techniques were used for the target app such as obfuscators, packers and anti-debug measures.\n\n## Dynamic Analysis\n\nYou can use @MASTG-TOOL-0009 to detect if the app has been obfuscated.\n\nExample using the @MASTG-APP-0015:\n\n```sh\napkid mastg/Crackmes/Android/Level_04/r2pay-v1.0.apk\n[+] APKiD 2.1.2 :: from RedNaga :: rednaga.io\n[*] mastg/Crackmes/Android/Level_04/r2pay-v1.0.apk!classes.dex\n |-> anti_vm : Build.TAGS check, possible ro.secure check\n |-> compiler : r8\n |-> obfuscator : unreadable field names, unreadable method names\n```\n\nIn this case it detects that the app has unreadable field names and method names, among other things."
  },
  {
    "id": "MASTG-TEST-0001",
    "title": "Testing Local Storage for Sensitive Data",
    "category": "Data Storage and Privacy",
    "description": "First of all, try to determine the kind of storage used by the Android app and to find out whether the app processes sensitive data insecurely.",
    "full_description": "## Overview\n\nThis test case focuses on identifying potentially sensitive data stored by an application and verifying if it is securely stored. The following checks should be performed:\n\n- Analyze data storage in the source code.\n- Be sure to trigger all possible functionality in the application (e.g. by clicking everywhere possible) in order to ensure data generation.\n- Check all application generated and modified files and ensure that the storage method is sufficiently secure.\n    - This includes `SharedPreferences`, databases, Internal Storage, External Storage, etc.\n\n**NOTE:** For MASVS L1 compliance, it is sufficient to store data unencrypted in the application's internal storage directory (sandbox). For L2 compliance, additional encryption is required using cryptographic keys securely managed in the Android KeyStore. This includes using envelope encryption (DEK+KEK) or equivalent methods, or using the Android Security Library's [`EncryptedFile`](https://developer.android.com/reference/androidx/security/crypto/EncryptedFile)/[`EncryptedSharedPreferences`](https://developer.android.com/reference/androidx/security/crypto/EncryptedSharedPreferences).\n\n!!! Warning\n\n    The **Jetpack security crypto library**, including the `EncryptedFile` and  `EncryptedSharedPreferences` classes, has been [deprecated](https://developer.android.com/privacy-and-security/cryptography#jetpack_security_crypto_library). However, since an official replacement has not yet been released, we recommend using these classes until one is available.\n\n## Static Analysis\n\nFirst of all, try to determine the kind of storage used by the Android app and to find out whether the app processes sensitive data insecurely.\n\n- Check `AndroidManifest.xml` for read/write external storage permissions, for example, `uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"`.\n- Check the source code for keywords and API calls that are used to store data:\n    - File permissions, such as:\n        - `MODE_WORLD_READABLE` or `MODE_WORLD_WRITABLE`: You should avoid using `MODE_WORLD_WRITEABLE` and `MODE_WORLD_READABLE` for files because any app will be able to read from or write to the files, even if they are stored in the app's private data directory. If data must be shared with other applications, consider a content provider. A content provider offers read and write permissions to other apps and can grant dynamic permission on a case-by-case basis.\n    - Classes and functions, such as:\n        - the `SharedPreferences` class ( stores key-value pairs)\n        - the `FileOutPutStream` class (uses internal or external storage)\n        - the `getExternal*` functions (use external storage)\n        - the `getWritableDatabase` function (returns a SQLiteDatabase for writing)\n        - the `getReadableDatabase` function (returns a SQLiteDatabase for reading)\n        - the `getCacheDir` and `getExternalCacheDirs` function (use cached files)\n\nEncryption should be implemented using proven SDK functions. The following describes bad practices to look for in the source code:\n\n- Locally stored sensitive information \"encrypted\" via simple bit operations like XOR or bit flipping. These operations should be avoided because the encrypted data can be recovered easily.\n- Keys used or created without Android onboard features, such as the Android KeyStore\n- Keys disclosed by hard-coding\n\nA typical misuse are hard-coded cryptographic keys. Hard-coded and world-readable cryptographic keys significantly increase the possibility that encrypted data will be recovered. Once an attacker obtains the data, decrypting it is trivial. Symmetric cryptography keys must be stored on the device, so identifying them is just a matter of time and effort. Consider the following code:\n\n```java\nthis.db = localUserSecretStore.getWritableDatabase(\"SuperPassword123\");\n```\n\nObtaining the key is trivial because it is contained in the source code and identical for all installations of the app. Encrypting data this way is not beneficial. Look for hard-coded API keys/private keys and other valuable data; they pose a similar risk. Encoded/encrypted keys represent another attempt to make it harder but not impossible to get the crown jewels.\n\nConsider the following code:\n\nExample in Java:\n\n```java\n//A more complicated effort to store the XOR'ed halves of a key (instead of the key itself)\nprivate static final String[] myCompositeKey = new String[]{\n  \"oNQavjbaNNSgEqoCkT9Em4imeQQ=\",\"3o8eFOX4ri/F8fgHgiy/BS47\"\n};\n```\n\nExample in Kotlin:\n\n```kotlin\nprivate val myCompositeKey = arrayOf<String>(\"oNQavjbaNNSgEqoCkT9Em4imeQQ=\", \"3o8eFOX4ri/F8fgHgiy/BS47\")\n```\n\nThe algorithm for decoding the original key might be something like this:\n\nExample in Java:\n\n```java\npublic void useXorStringHiding(String myHiddenMessage) {\n  byte[] xorParts0 = Base64.decode(myCompositeKey[0],0);\n  byte[] xorParts1 = Base64.decode(myCompositeKey[1],0);\n\n  byte[] xorKey = new byte[xorParts0.length];\n  for(int i = 0; i < xorParts1.length; i++){\n    xorKey[i] = (byte) (xorParts0[i] ^ xorParts1[i]);\n  }\n  HidingUtil.doHiding(myHiddenMessage.getBytes(), xorKey, false);\n}\n```\n\nExample in Kotlin:\n\n```kotlin\nfun useXorStringHiding(myHiddenMessage:String) {\n  val xorParts0 = Base64.decode(myCompositeKey[0], 0)\n  val xorParts1 = Base64.decode(myCompositeKey[1], 0)\n  val xorKey = ByteArray(xorParts0.size)\n  for (i in xorParts1.indices)\n  {\n    xorKey[i] = (xorParts0[i] xor xorParts1[i]).toByte()\n  }\n  HidingUtil.doHiding(myHiddenMessage.toByteArray(), xorKey, false)\n}\n```\n\nVerify common locations of secrets:\n\n- resources (typically at res/values/strings.xml)\n  Example:\n\n  ```xml\n  <resources>\n      <string name=\"app_name\">SuperApp</string>\n      <string name=\"hello_world\">Hello world!</string>\n      <string name=\"action_settings\">Settings</string>\n      <string name=\"secret_key\">My_Secret_Key</string>\n    </resources>\n  ```\n\n- build configs, such as in local.properties or gradle.properties\n  Example:\n\n  ```json\n  buildTypes {\n    debug {\n      minifyEnabled true\n      buildConfigField \"String\", \"hiddenPassword\", \"\\\"${hiddenPassword}\\\"\"\n    }\n  }\n  ```\n\n## Dynamic Analysis\n\nInstall and use the app, executing all functions at least once. Data can be generated when entered by the user, sent by the endpoint, or shipped with the app. Then complete the following:\n\n- Check both internal and external local storage for any files created by the application that contain sensitive data.\n- Identify development files, backup files, and old files that shouldn't be included with a production release.\n- Determine whether SQLite databases are available and whether they contain sensitive information. SQLite databases are stored in `/data/data/<package-name>/databases`.\n- Identify if SQLite databases are encrypted. If so, determine how the database password is generated and stored and if this is sufficiently protected as described in the \"[Storing a Key](../../../Document/0x05d-Testing-Data-Storage.md#storing-a-cryptographic-key-techniques)\" section of the Keystore overview.\n- Check Shared Preferences that are stored as XML files (in `/data/data/<package-name>/shared_prefs`) for sensitive information. Shared Preferences are insecure and unencrypted by default. Some apps might opt to use [secure-preferences](https://github.com/scottyab/secure-preferences \"Secure-preferences encrypts the values of Shared Preferences\") to encrypt the values stored in Shared Preferences.\n- Check the permissions of the files in `/data/data/<package-name>`. Only the user and group created when you installed the app (e.g., u0_a82) should have user read, write, and execute permissions (`rwx`). Other users should not have permission to access files, but they may have execute permissions for directories.\n- Check for the usage of any Firebase Real-time databases and attempt to identify if they are misconfigured by making the following network call:\n    - `https://_firebaseProjectName_.firebaseio.com/.json`\n- Determine whether a Realm database is available in `/data/data/<package-name>/files/`, whether it is unencrypted, and whether it contains sensitive information. By default, the file extension is `realm` and the file name is `default`. Inspect the Realm database with the [Realm Browser](https://github.com/realm/realm-browser-osx \"Realm Browser for macOS\")."
  },
  {
    "id": "MASTG-TEST-0003",
    "title": "Testing Logs for Sensitive Data",
    "category": "Data Storage and Privacy",
    "description": "Applications will often use the [Log Class](https://developer.android.com/reference/android/util/Log.html \"Log Class\") and [Logger Class](https://developer.android.com/reference/java/util/logging/Logg...",
    "full_description": "## Overview\n\nThis test case focuses on identifying any sensitive application data within both system and application logs. The following checks should be performed:\n\n- Analyze source code for logging related code.\n- Check application data directory for log files.\n- Gather system messages and logs and analyze for any sensitive data.\n\nAs a general recommendation to avoid potential sensitive application data leakage, logging statements should be removed from production releases unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.\n\n## Static Analysis\n\nApplications will often use the [Log Class](https://developer.android.com/reference/android/util/Log.html \"Log Class\") and [Logger Class](https://developer.android.com/reference/java/util/logging/Logger.html \"Logger Class\") to create logs. To discover this, you should audit the application's source code for any such logging classes. These can often be found by searching for the following keywords:\n\n- Functions and classes, such as:\n    - `android.util.Log`\n    - `Log.d` | `Log.e` | `Log.i` | `Log.v` | `Log.w` | `Log.wtf`\n    - `Logger`\n\n- Keywords and system output:\n    - `System.out.print` | `System.err.print`\n    - logfile\n    - logging\n    - logs\n\nWhile preparing the production release, you can use tools like @MASTG-TOOL-0022 (included in Android Studio). To determine whether all logging functions from the `android.util.Log` class have been removed, check the ProGuard configuration file (proguard-rules.pro) for the following options (according to this [example of removing logging code](https://www.guardsquare.com/en/products/proguard/manual/examples#logging \"ProGuard\\'s example of removing logging code\") and this article about [enabling ProGuard in an Android Studio project](https://developer.android.com/studio/build/shrink-code#enable \"Android Developer - Enable shrinking, obfuscation, and optimization\")):\n\n```default\n-assumenosideeffects class android.util.Log\n{\n  public static boolean isLoggable(java.lang.String, int);\n  public static int v(...);\n  public static int i(...);\n  public static int w(...);\n  public static int d(...);\n  public static int e(...);\n  public static int wtf(...);\n}\n```\n\nNote that the example above only ensures that calls to the Log class' methods will be removed. If the string that will be logged is dynamically constructed, the code that constructs the string may remain in the bytecode. For example, the following code issues an implicit `StringBuilder` to construct the log statement:\n\nExample in Java:\n\n```java\nLog.v(\"Private key tag\", \"Private key [byte format]: \" + key);\n```\n\nExample in Kotlin:\n\n```kotlin\nLog.v(\"Private key tag\", \"Private key [byte format]: $key\")\n```\n\nThe compiled bytecode, however, is equivalent to the bytecode of the following log statement, which constructs the string explicitly:\n\nExample in Java:\n\n```java\nLog.v(\"Private key tag\", new StringBuilder(\"Private key [byte format]: \").append(key.toString()).toString());\n```\n\nExample in Kotlin:\n\n```kotlin\nLog.v(\"Private key tag\", StringBuilder(\"Private key [byte format]: \").append(key).toString())\n```\n\nProGuard guarantees removal of the `Log.v` method call. Whether the rest of the code (`new StringBuilder ...`) will be removed depends on the complexity of the code and the [ProGuard version](https://stackoverflow.com/questions/6009078/removing-unused-strings-during-proguard-optimisation \"Removing unused strings during ProGuard optimization \").\n\nThis is a security risk because the (unused) string leaks plain text data into memory, which can be accessed via a debugger or memory dumping.\n\nUnfortunately, no silver bullet exists for this issue, but one option would be to implement a custom logging facility that takes simple arguments and constructs the log statements internally.\n\n```java\nSecureLog.v(\"Private key [byte format]: \", key);\n```\n\nThen configure ProGuard to strip its calls.\n\n## Dynamic Analysis\n\nUse all the mobile app functions at least once, then identify the application's data directory and look for log files (`/data/data/<package-name>`). Check the application logs to determine whether log data has been generated; some mobile applications create and store their own logs in the data directory.\n\nMany application developers still use `System.out.println` or `printStackTrace` instead of a proper logging class. Therefore, your testing strategy must include all output generated while the application is starting, running and closing. To determine what data is directly printed by `System.out.println` or `printStackTrace`, you can use [`Logcat`](https://developer.android.com/tools/debugging/debugging-log.html \"Debugging with Logcat\") as explained in the chapter \"Basic Security Testing\", section \"Monitoring System Logs\".\n\nRemember that you can target a specific app by filtering the Logcat output as follows:\n\n```bash\nadb logcat | grep \"$(adb shell ps | grep <package-name> | awk '{print $2}')\"\n```\n\n> If you already know the app PID you may give it directly using `--pid` flag.\n\nYou may also want to apply further filters or regular expressions (using `logcat`'s regex flags `-e <expr>, --regex=<expr>` for example) if you expect certain strings or patterns to come up in the logs."
  },
  {
    "id": "MASTG-TEST-0004",
    "title": "Determining Whether Sensitive Data Is Shared with Third Parties via Embedded",
    "category": "Data Storage and Privacy",
    "description": "To determine whether API calls and functions provided by the third-party library are used according to best practices, review their source code, requested permissions and check for any known vulnerabi...",
    "full_description": "## Overview\n\n## Static Analysis\n\nTo determine whether API calls and functions provided by the third-party library are used according to best practices, review their source code, requested permissions and check for any known vulnerabilities.\n\nAll data that's sent to third-party services should be anonymized to prevent exposure of PII (Personal Identifiable Information) that would allow the third party to identify the user account. No other data (such as IDs that can be mapped to a user account or session) should be sent to a third party.\n\n## Static Analysis\n\nTo determine whether API calls and functions provided by the third-party library are used according to best practices, review their source code, requested permissions and check for any known vulnerabilities.\n\nAll data that's sent to third-party services should be anonymized to prevent exposure of PII (Personal Identifiable Information) that would allow the third party to identify the user account. No other data (such as IDs that can be mapped to a user account or session) should be sent to a third party.\n\n## Dynamic Analysis\n\nCheck all requests to external services for embedded sensitive information.\nTo intercept traffic between the client and server, you can perform dynamic analysis by launching a [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) attack with @MASTG-TOOL-0077 or @MASTG-TOOL-0079. Once you route the traffic through the interception proxy, you can try to sniff the traffic that passes between the app and server. All app requests that aren't sent directly to the server on which the main function is hosted should be checked for sensitive information, such as PII in a tracker or ad service."
  },
  {
    "id": "MASTG-TEST-0005",
    "title": "Determining Whether Sensitive Data Is Shared with Third Parties via Notifications",
    "category": "Data Storage and Privacy",
    "description": "Search for any usage of the `NotificationManager` class which might be an indication of some form of notification management. If the class is being used, the next step would be to understand how the a...",
    "full_description": "## Overview\n\n## Static Analysis\n\nSearch for any usage of the `NotificationManager` class which might be an indication of some form of notification management. If the class is being used, the next step would be to understand how the application is [generating the notifications](https://developer.android.com/training/notify-user/build-notification#SimpleNotification \"Create a Notification\") and which data ends up being shown.\n\n## Static Analysis\n\nSearch for any usage of the `NotificationManager` class which might be an indication of some form of notification management. If the class is being used, the next step would be to understand how the application is [generating the notifications](https://developer.android.com/training/notify-user/build-notification#SimpleNotification \"Create a Notification\") and which data ends up being shown.\n\n## Dynamic Analysis\n\nRun the application and start tracing all calls to functions related to the notifications creation, e.g. `setContentTitle` or `setContentText` from [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder). Observe the trace in the end and evaluate if it contains any sensitive information which another app might have eavesdropped."
  },
  {
    "id": "MASTG-TEST-0006",
    "title": "Determining Whether the Keyboard Cache Is Disabled for Text Input Fields",
    "category": "Data Storage and Privacy",
    "description": "In the layout definition of an activity, you can define `TextViews` that have XML attributes. If the XML attribute `android:inputType` is given the value `textNoSuggestions`, the keyboard cache will n...",
    "full_description": "## Overview\n\n## Static Analysis\n\nIn the layout definition of an activity, you can define `TextViews` that have XML attributes. If the XML attribute `android:inputType` is given the value `textNoSuggestions`, the keyboard cache will not be shown when the input field is selected. The user will have to type everything manually.\n\n```xml\n   <EditText\n        android:id=\"@+id/KeyBoardCache\"\n        android:inputType=\"textNoSuggestions\" />\n```\n\nThe code for all input fields that take sensitive information should include this XML attribute to [disable the keyboard suggestions](https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_NO_SUGGESTIONS \"Disable keyboard suggestions\").\n\nAlternatively, the developer can use the following constants:\n\n| XML `android:inputType` | Code `InputType` | API level |\n| -- | --- | - |\n| [`textPassword`](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType:~:text=_SUGGESTIONS.-,textPassword,-81) | [`TYPE_TEXT_VARIATION_PASSWORD`](https://developer.android.com/reference/android/text/InputType#TYPE_TEXT_VARIATION_PASSWORD \"Text password input type\") | 3 |\n| [`textVisiblePassword`](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType:~:text=_URI.-,textVisiblePassword,-91) | [`TYPE_TEXT_VARIATION_VISIBLE_PASSWORD`](https://developer.android.com/reference/android/text/InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD \"Text visible password input type\") | 3 |\n| [`numberPassword`](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType:~:text=_DECIMAL.-,numberPassword,-12) | [`TYPE_NUMBER_VARIATION_PASSWORD`](https://developer.android.com/reference/android/text/InputType#TYPE_NUMBER_VARIATION_PASSWORD \"A numeric password field\") | 11 |\n| [`textWebPassword`](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType:~:text=_ADDRESS.-,textWebPassword,-e1) | [`TYPE_TEXT_VARIATION_WEB_PASSWORD`](https://developer.android.com/reference/android/text/InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD \"Text web password input type\") | 11 |\n\nCheck the application code to verify that none of the input types are being overwritten. For example, by doing `findViewById(R.id.KeyBoardCache).setInputType(InputType.TYPE_CLASS_TEXT)` the input type of the input field `KeyBoardCache` is set to `text` reenabling the keyboard cache.\n\nFinally, check the minimum required SDK version in the Android Manifest (`android:minSdkVersion`) since it must support the used constants (for example, Android SDK version 11 is required for `textWebPassword`). Otherwise, the compiled app would not honor the used input type constants allowing keyboard caching.\n\n### Dynamic Analysis\n\nStart the app and click in the input fields that take sensitive data. If strings are suggested, the keyboard cache has not been disabled for these fields.\n\n## Static Analysis\n\nIn the layout definition of an activity, you can define `TextViews` that have XML attributes. If the XML attribute `android:inputType` is given the value `textNoSuggestions`, the keyboard cache will not be shown when the input field is selected. The user will have to type everything manually.\n\n```xml\n   <EditText\n        android:id=\"@+id/KeyBoardCache\"\n        android:inputType=\"textNoSuggestions\" />\n```\n\nThe code for all input fields that take sensitive information should include this XML attribute to [disable the keyboard suggestions](https://developer.android.com/reference/android/text/InputType.html#TYPE_TEXT_FLAG_NO_SUGGESTIONS \"Disable keyboard suggestions\").\n\nAlternatively, the developer can use the following constants:\n\n| XML `android:inputType` | Code `InputType` | API level |\n| -- | --- | - |\n| [`textPassword`](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType:~:text=_SUGGESTIONS.-,textPassword,-81) | [`TYPE_TEXT_VARIATION_PASSWORD`](https://developer.android.com/reference/android/text/InputType#TYPE_TEXT_VARIATION_PASSWORD \"Text password input type\") | 3 |\n| [`textVisiblePassword`](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType:~:text=_URI.-,textVisiblePassword,-91) | [`TYPE_TEXT_VARIATION_VISIBLE_PASSWORD`](https://developer.android.com/reference/android/text/InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD \"Text visible password input type\") | 3 |\n| [`numberPassword`](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType:~:text=_DECIMAL.-,numberPassword,-12) | [`TYPE_NUMBER_VARIATION_PASSWORD`](https://developer.android.com/reference/android/text/InputType#TYPE_NUMBER_VARIATION_PASSWORD \"A numeric password field\") | 11 |\n| [`textWebPassword`](https://developer.android.com/reference/android/widget/TextView#attr_android:inputType:~:text=_ADDRESS.-,textWebPassword,-e1) | [`TYPE_TEXT_VARIATION_WEB_PASSWORD`](https://developer.android.com/reference/android/text/InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD \"Text web password input type\") | 11 |\n\nCheck the application code to verify that none of the input types are being overwritten. For example, by doing `findViewById(R.id.KeyBoardCache).setInputType(InputType.TYPE_CLASS_TEXT)` the input type of the input field `KeyBoardCache` is set to `text` reenabling the keyboard cache.\n\nFinally, check the minimum required SDK version in the Android Manifest (`android:minSdkVersion`) since it must support the used constants (for example, Android SDK version 11 is required for `textWebPassword`). Otherwise, the compiled app would not honor the used input type constants allowing keyboard caching.\n\n### Dynamic Analysis\n\nStart the app and click in the input fields that take sensitive data. If strings are suggested, the keyboard cache has not been disabled for these fields.\n\n## Dynamic Analysis\n\nStart the app and click in the input fields that take sensitive data. If strings are suggested, the keyboard cache has not been disabled for these fields."
  },
  {
    "id": "MASTG-TEST-0009",
    "title": "Testing Backups for Sensitive Data",
    "category": "Data Storage and Privacy",
    "description": "Check the `AndroidManifest.xml` file for the following flag:",
    "full_description": "## Overview\n\n## Static Analysis\n\n### Local\n\nCheck the `AndroidManifest.xml` file for the following flag:\n\n```xml\nandroid:allowBackup=\"true\"\n```\n\nIf the flag value is **true**, determine whether the app saves any kind of sensitive data (check the test case \"Testing for Sensitive Data in Local Storage\").\n\n### Cloud\n\nRegardless of whether you use key/value backup or auto backup, you must determine the following:\n\n- which files are sent to the cloud (e.g., SharedPreferences)\n- whether the files contain sensitive information\n- whether sensitive information is encrypted before being sent to the cloud.\n\n> If you don't want to share files with Google Cloud, you can exclude them from [Auto Backup](https://developer.android.com/guide/topics/data/autobackup.html#IncludingFiles \"Exclude files from Auto Backup\"). Sensitive information stored at rest on the device should be encrypted before being sent to the cloud.\n\n- **Auto Backup**: You configure Auto Backup via the boolean attribute `android:allowBackup` within the application's manifest file. [Auto Backup](https://developer.android.com/guide/topics/data/autobackup.html#EnablingAutoBackup \"Enabling AutoBackup\") is enabled by default for applications that target Android 6.0 (API level 23). You can use the attribute `android:fullBackupOnly` to activate auto backup when implementing a backup agent, but this attribute is available for Android versions 6.0 and above only. Other Android versions use key/value backup instead.\n\n```xml\nandroid:fullBackupOnly\n```\n\nAuto backup includes almost all the app files and stores up 25 MB of them per app in the user's Google Drive account. Only the most recent backup is stored; the previous backup is deleted.\n\n- **Key/Value Backup**: To enable key/value backup, you must define the backup agent in the manifest file. Look in `AndroidManifest.xml` for the following attribute:\n\n```xml\nandroid:backupAgent\n```\n\nTo implement key/value backup, extend one of the following classes:\n\n- [BackupAgent](https://developer.android.com/reference/android/app/backup/BackupAgent.html \"BackupAgent\")\n- [BackupAgentHelper](https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html \"BackupAgentHelper\")\n\nTo check for key/value backup implementations, look for these classes in the source code.\n\n## Static Analysis\n\n### Local\n\nCheck the `AndroidManifest.xml` file for the following flag:\n\n```xml\nandroid:allowBackup=\"true\"\n```\n\nIf the flag value is **true**, determine whether the app saves any kind of sensitive data (check the test case \"Testing for Sensitive Data in Local Storage\").\n\n### Cloud\n\nRegardless of whether you use key/value backup or auto backup, you must determine the following:\n\n- which files are sent to the cloud (e.g., SharedPreferences)\n- whether the files contain sensitive information\n- whether sensitive information is encrypted before being sent to the cloud.\n\n> If you don't want to share files with Google Cloud, you can exclude them from [Auto Backup](https://developer.android.com/guide/topics/data/autobackup.html#IncludingFiles \"Exclude files from Auto Backup\"). Sensitive information stored at rest on the device should be encrypted before being sent to the cloud.\n\n- **Auto Backup**: You configure Auto Backup via the boolean attribute `android:allowBackup` within the application's manifest file. [Auto Backup](https://developer.android.com/guide/topics/data/autobackup.html#EnablingAutoBackup \"Enabling AutoBackup\") is enabled by default for applications that target Android 6.0 (API level 23). You can use the attribute `android:fullBackupOnly` to activate auto backup when implementing a backup agent, but this attribute is available for Android versions 6.0 and above only. Other Android versions use key/value backup instead.\n\n```xml\nandroid:fullBackupOnly\n```\n\nAuto backup includes almost all the app files and stores up 25 MB of them per app in the user's Google Drive account. Only the most recent backup is stored; the previous backup is deleted.\n\n- **Key/Value Backup**: To enable key/value backup, you must define the backup agent in the manifest file. Look in `AndroidManifest.xml` for the following attribute:\n\n```xml\nandroid:backupAgent\n```\n\nTo implement key/value backup, extend one of the following classes:\n\n- [BackupAgent](https://developer.android.com/reference/android/app/backup/BackupAgent.html \"BackupAgent\")\n- [BackupAgentHelper](https://developer.android.com/reference/android/app/backup/BackupAgentHelper.html \"BackupAgentHelper\")\n\nTo check for key/value backup implementations, look for these classes in the source code.\n\n## Dynamic Analysis\n\nAfter executing all available app functions, attempt to back up via `adb`. If the backup is successful, inspect the backup archive for sensitive data. Open a terminal and run the following command:\n\n```bash\nadb backup -apk -nosystem <package-name>\n```\n\nADB should respond now with \"Now unlock your device and confirm the backup operation\" and you should be asked on the Android phone for a password. This is an optional step and you don't need to provide one. If the phone does not prompt this message, try the following command including the quotes:\n\n```bash\nadb backup \"-apk -nosystem <package-name>\"\n```\n\nThe problem happens when your device has an adb version prior to 1.0.31. If that's the case you must use an adb version of 1.0.31 also on your host computer. Versions of adb after 1.0.32 [broke the backwards compatibility.](https://issuetracker.google.com/issues/37096097 \"adb backup is broken since ADB version 1.0.32\")\n\nApprove the backup from your device by selecting the _Back up my data_ option. After the backup process is finished, the file _.ab_ will be in your working directory.\nRun the following command to convert the .ab file to tar.\n\n```bash\ntail -c +25 backup.ab |openssl zlib -d > backup.tar\n```\n\nIn case you get the error `openssl:Error: 'zlib' is an invalid command.` you can try to use Python instead.\n\n```bash\ntail -c +25 backup.ab | python -c \"import zlib,sys;sys.stdout.buffer.write(zlib.decompress(sys.stdin.buffer.read()))\" > backup.tar\n```\n\nThe [_Android Backup Extractor_](https://github.com/nelenkov/android-backup-extractor \"Android Backup Extractor\") is another alternative backup tool. To make the tool to work, you have to download the Oracle JCE Unlimited Strength Jurisdiction Policy Files for [JRE7](https://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html \"Oracle JCE Unlimited Strength Jurisdiction Policy Files JRE7\") or [JRE8](http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html \"Oracle JCE Unlimited Strength Jurisdiction Policy Files JRE8\") and place them in the JRE lib/security folder. Run the following command to convert the tar file:\n\n```bash\njava -jar abe.jar unpack backup.ab\n```\n\nif it shows some Cipher information and usage, which means it hasn't unpacked successfully. In this case you can give a try with more arguments:\n\n```bash\nabe [-debug] [-useenv=yourenv] unpack <backup.ab> <backup.tar> [password]\n```\n\n`[password]` is the password when your android device asked you earlier. For example here is: 123\n\n```bash\njava -jar abe.jar unpack backup.ab backup.tar 123\n```\n\nExtract the tar file to your working directory.\n\n```bash\ntar xvf backup.tar\n```"
  },
  {
    "id": "MASTG-TEST-0011",
    "title": "Testing Memory for Sensitive Data",
    "category": "Data Storage and Privacy",
    "description": "When performing static analysis to identify sensitive data that is exposed in memory, you should:",
    "full_description": "## Overview\n\nAnalyzing memory can help developers identify the root causes of several problems, such as application crashes. However, it can also be used to access sensitive data. This section describes how to check for data disclosure via process memory.\n\nFirst identify sensitive information that is stored in memory. Sensitive assets have likely been loaded into memory at some point. The objective is to verify that this information is exposed as briefly as possible.\n\nTo investigate an application's memory, you must first create a memory dump. You can also analyze the memory in real-time, e.g., via a debugger. Regardless of your approach, memory dumping is a very error-prone process in terms of verification because each dump contains the output of executed functions. You may miss executing critical scenarios. In addition, overlooking data during analysis is probable unless you know the data's footprint (either the exact value or the data format). For example, if the app encrypts with a randomly generated symmetric key, you likely won't be able to spot it in memory unless you can recognize the key's value in another context.\n\nTherefore, you are better off starting with static analysis.\n\n## Static Analysis\n\nWhen performing static analysis to identify sensitive data that is exposed in memory, you should:\n\n- Try to identify application components and map where data is used.\n- Make sure that sensitive data is handled by as few components as possible.\n- Make sure that object references are properly removed once the object containing the sensitive data is no longer needed.\n- Make sure that garbage collection is requested after references have been removed.\n- Make sure that sensitive data gets overwritten as soon as it is no longer needed.\n    - Don't represent such data with immutable data types (such as `String` and `BigInteger`).\n    - Avoid non-primitive data types (such as `StringBuilder`).\n    - Overwrite references before removing them, outside the `finalize` method.\n    - Pay attention to third-party components (libraries and frameworks).\n      Public APIs are good indicators. Determine whether the public API handles the sensitive data as described in this chapter.\n\n**The following section describes pitfalls of data leakage in memory and best practices for avoiding them.**\n\nDon't use immutable structures (e.g., `String` and `BigInteger`) to represent secrets. Nullifying these structures will be ineffective: the garbage collector may collect them, but they may remain on the heap after garbage collection. Nevertheless, you should ask for garbage collection after every critical operation (e.g., encryption, parsing server responses that contain sensitive information). When copies of the information have not been properly cleaned (as explained below), your request will help reduce the length of time for which these copies are available in memory.\n\nTo properly clean sensitive information from memory, store it in primitive data types, such as byte-arrays (`byte[]`) and char-arrays (`char[]`). You should avoid storing the information in mutable non-primitive data types.\n\nMake sure to overwrite the content of the critical object once the object is no longer needed. Overwriting the content with zeroes is one simple and very popular method:\n\nExample in Java:\n\n```java\nbyte[] secret = null;\ntry{\n    //get or generate the secret, do work with it, make sure you make no local copies\n} finally {\n    if (null != secret) {\n        Arrays.fill(secret, (byte) 0);\n    }\n}\n```\n\nExample in Kotlin:\n\n```kotlin\nval secret: ByteArray? = null\ntry {\n     //get or generate the secret, do work with it, make sure you make no local copies\n} finally {\n    if (null != secret) {\n        Arrays.fill(secret, 0.toByte())\n    }\n}\n```\n\nThis doesn't, however, guarantee that the content will be overwritten at runtime. To optimize the bytecode, the compiler will analyze and decide not to overwrite data because it will not be used afterwards (i.e., it is an unnecessary operation). Even if the code is in the compiled DEX, the optimization may occur during the just-in-time or ahead-of-time compilation in the VM.\n\nThere is no silver bullet for this problem because different solutions have different consequences. For example, you may perform additional calculations (e.g., XOR the data into a dummy buffer), but you'll have no way to know the extent of the compiler's optimization analysis. On the other hand, using the overwritten data outside the compiler's scope (e.g., serializing it in a temp file) guarantees that it will be overwritten but obviously impacts performance and maintenance.\n\nThen, using `Arrays.fill` to overwrite the data is a bad idea because the method is an obvious hooking target (see @MASTG-TECH-0043 for more details).\n\nThe final issue with the above example is that the content was overwritten with zeroes only. You should try to overwrite critical objects with random data or content from non-critical objects. This will make it really difficult to construct scanners that can identify sensitive data on the basis of its management.\n\nBelow is an improved version of the previous example:\n\nExample in Java:\n\n```java\nbyte[] nonSecret = somePublicString.getBytes(\"ISO-8859-1\");\nbyte[] secret = null;\ntry{\n    //get or generate the secret, do work with it, make sure you make no local copies\n} finally {\n    if (null != secret) {\n        for (int i = 0; i < secret.length; i++) {\n            secret[i] = nonSecret[i % nonSecret.length];\n        }\n\n        FileOutputStream out = new FileOutputStream(\"/dev/null\");\n        out.write(secret);\n        out.flush();\n        out.close();\n    }\n}\n```\n\nExample in Kotlin:\n\n```kotlin\nval nonSecret: ByteArray = somePublicString.getBytes(\"ISO-8859-1\")\nval secret: ByteArray? = null\ntry {\n     //get or generate the secret, do work with it, make sure you make no local copies\n} finally {\n    if (null != secret) {\n        for (i in secret.indices) {\n            secret[i] = nonSecret[i % nonSecret.size]\n        }\n\n        val out = FileOutputStream(\"/dev/null\")\n        out.write(secret)\n        out.flush()\n        out.close()\n        }\n}\n```\n\nFor more information, take a look at [Securely Storing Sensitive Data in RAM](https://github.com/nowsecure/secure-mobile-development/blob/master/en/coding-practices/securely-store-sensitive-data-in-ram.md).\n\nIn the \"Static Analysis\" section, we mentioned the proper way to handle cryptographic keys when you are using `AndroidKeyStore` or `SecretKey`.\n\nFor a better implementation of `SecretKey`, look at the `SecureSecretKey` class below. Although the implementation is probably missing some boilerplate code that would make the class compatible with `SecretKey`, it addresses the main security concerns:\n\n- No cross-context handling of sensitive data. Each copy of the key can be cleared from within the scope in which it was created.\n- The local copy is cleared according to the recommendations given above.\n\nExample in Java:\n\n```java\n  public class SecureSecretKey implements javax.crypto.SecretKey, Destroyable {\n      private byte[] key;\n      private final String algorithm;\n\n      /** Constructs SecureSecretKey instance out of a copy of the provided key bytes.\n        * The caller is responsible of clearing the key array provided as input.\n        * The internal copy of the key can be cleared by calling the destroy() method.\n        */\n      public SecureSecretKey(final byte[] key, final String algorithm) {\n          this.key = key.clone();\n          this.algorithm = algorithm;\n      }\n\n      public String getAlgorithm() {\n          return this.algorithm;\n      }\n\n      public String getFormat() {\n          return \"RAW\";\n      }\n\n      /** Returns a copy of the key.\n        * Make sure to clear the returned byte array when no longer needed.\n        */\n      public byte[] getEncoded() {\n          if(null == key){\n              throw new NullPointerException();\n          }\n\n          return key.clone();\n      }\n\n      /** Overwrites the key with dummy data to ensure this copy is no longer present in memory.*/\n      public void destroy() {\n          if (isDestroyed()) {\n              return;\n          }\n\n          byte[] nonSecret = new String(\"RuntimeException\").getBytes(\"ISO-8859-1\");\n          for (int i = 0; i < key.length; i++) {\n            key[i] = nonSecret[i % nonSecret.length];\n          }\n\n          FileOutputStream out = new FileOutputStream(\"/dev/null\");\n          out.write(key);\n          out.flush();\n          out.close();\n\n          this.key = null;\n          System.gc();\n      }\n\n      public boolean isDestroyed() {\n          return key == null;\n      }\n  }\n```\n\nExample in Kotlin:\n\n```kotlin\nclass SecureSecretKey(key: ByteArray, algorithm: String) : SecretKey, Destroyable {\n    private var key: ByteArray?\n    private val algorithm: String\n    override fun getAlgorithm(): String {\n        return algorithm\n    }\n\n    override fun getFormat(): String {\n        return \"RAW\"\n    }\n\n    /** Returns a copy of the key.\n     * Make sure to clear the returned byte array when no longer needed.\n     */\n    override fun getEncoded(): ByteArray {\n        if (null == key) {\n            throw NullPointerException()\n        }\n        return key!!.clone()\n    }\n\n    /** Overwrites the key with dummy data to ensure this copy is no longer present in memory. */\n    override fun destroy() {\n        if (isDestroyed) {\n            return\n        }\n        val nonSecret: ByteArray = String(\"RuntimeException\").toByteArray(charset(\"ISO-8859-1\"))\n        for (i in key!!.indices) {\n            key!![i] = nonSecret[i % nonSecret.size]\n        }\n        val out = FileOutputStream(\"/dev/null\")\n        out.write(key)\n        out.flush()\n        out.close()\n        key = null\n        System.gc()\n    }\n\n    override fun isDestroyed(): Boolean {\n        return key == null\n    }\n\n    /** Constructs SecureSecretKey instance out of a copy of the provided key bytes.\n     * The caller is responsible of clearing the key array provided as input.\n     * The internal copy of the key can be cleared by calling the destroy() method.\n     */\n    init {\n        this.key = key.clone()\n        this.algorithm = algorithm\n    }\n}\n```\n\nSecure user-provided data is the final secure information type usually found in memory. This is often managed by implementing a custom input method, for which you should follow the recommendations given here. However, Android allows information to be partially erased from `EditText` buffers via a custom `Editable.Factory`.\n\n```java\nEditText editText = ...; //  point your variable to your EditText instance\nEditText.setEditableFactory(new Editable.Factory() {\n  public Editable newEditable(CharSequence source) {\n  ... // return a new instance of a secure implementation of Editable.\n  }\n});\n```\n\nRefer to the `SecureSecretKey` example above for an example `Editable` implementation. Note that you will be able to securely handle all copies made by `editText.getText` if you provide your factory. You can also try to overwrite the internal `EditText` buffer by calling `editText.setText`, but there is no guarantee that the buffer will not have been copied already. If you choose to rely on the default input method and `EditText`, you will have no control over the keyboard or other components that are used. Therefore, you should use this approach for semi-confidential information only.\n\nIn all cases, make sure that sensitive data in memory is cleared when a user signs out of the application. Finally, make sure that highly sensitive information is cleared out the moment an Activity or Fragment's `onPause` event is triggered.\n\n> Note that this might mean that a user has to re-authenticate every time the application resumes.\n\n## Dynamic Analysis\n\nStatic analysis will help you identify potential problems, but it can't provide statistics about how long data has been exposed in memory, nor can it help you identify problems in closed-source dependencies. This is where dynamic analysis comes into play.\n\nThere are various ways to analyze the memory of a process, e.g. live analysis via a debugger/dynamic instrumentation and analyzing one or more memory dumps.\n\n### Retrieving and Analyzing a Memory Dump\n\nWhether you are using a rooted or a non-rooted device, you can dump the app's process memory with @MASTG-TOOL-0038 and @MASTG-TOOL-0106. You can find a detailed explanation of this process in @MASTG-TECH-0044, in the chapter \"Tampering and Reverse Engineering on Android\".\n\nAfter the memory has been dumped (e.g. to a file called \"memory\"), depending on the nature of the data you're looking for, you'll need a set of different tools to process and analyze that memory dump. For instance, if you're focusing on strings, it might be sufficient for you to execute the command `strings` or `rabin2 -zz` from @MASTG-TOOL-0129 to extract those strings.\n\n```bash\n# using strings\n$ strings memory > strings.txt\n\n# using rabin2\n$ rabin2 -ZZ memory > strings.txt\n```\n\nOpen `strings.txt` in your favorite editor and dig through it to identify sensitive information.\n\nHowever if you'd like to inspect other kind of data, you'd rather want to use radare2 and its search capabilities. See radare2's help on the search command (`/?`) for more information and a list of options. The following shows only a subset of them:\n\n```bash\n$ r2 <name_of_your_dump_file>\n\n[0x00000000]> /?\nUsage: /[!bf] [arg]  Search stuff (see 'e??search' for options)\n|Use io.va for searching in non virtual addressing spaces\n| / foo\\x00                    search for string 'foo\\0'\n| /c[ar]                       search for crypto materials\n| /e /E.F/i                    match regular expression\n| /i foo                       search for string 'foo' ignoring case\n| /m[?][ebm] magicfile         search for magic, filesystems or binary headers\n| /v[1248] value               look for an `cfg.bigendian` 32bit value\n| /w foo                       search for wide string 'f\\0o\\0o\\0'\n| /x ff0033                    search for hex string\n| /z min max                   search for strings of given size\n...\n```\n\n### Runtime Memory Analysis\n\nInstead of dumping the memory to your host computer, you can alternatively use @MASTG-TOOL-0036. With it, you can analyze and inspect the app's memory while it's running.\nFor example, you may run the previous search commands from r2frida and search the memory for a string, hexadecimal values, etc. When doing so, remember to prepend the search command (and any other r2frida specific commands) with a backslash `:` after starting the session with `r2 frida://usb//<name_of_your_app>`.\n\nFor more information, options and approaches, please refer to @MASTG-TECH-0044 for more information.\n\n### Explicitly Dumping and Analyzing the Java Heap\n\nFor rudimentary analysis, you can use Android Studio's built-in tools. They are on the _Android Monitor_ tab. To dump memory, select the device and app you want to analyze and click _Dump Java Heap_. This will create a _.hprof_ file in the _captures_ directory, which is on the app's project path.\n\n<img src=\"Images/Chapters/0x05d/Dump_Java_Heap.png\" width=\"100%\" />\n\nTo navigate through class instances that were saved in the memory dump, select the Package Tree View in the tab showing the _.hprof_ file.\n\n<img src=\"Images/Chapters/0x05d/Package_Tree_View.png\" width=\"100%\" />\n\nFor more advanced analysis of the memory dump, use the [Eclipse Memory Analyzer Tool (MAT)](https://eclipse.org/mat/downloads.php \"Eclipse Memory Analyzer Tool\"). It is available as an Eclipse plugin and as a standalone application.\n\nTo analyze the dump in MAT, use the _hprof-conv_ platform tool, which comes with the Android SDK.\n\n```bash\n./hprof-conv memory.hprof memory-mat.hprof\n```\n\nMAT provides several tools for analyzing the memory dump. For example, the _Histogram_ provides an estimate of the number of objects that have been captured from a given type, and the _Thread Overview_ shows processes' threads and stack frames. The _Dominator Tree_ provides information about keep-alive dependencies between objects. You can use regular expressions to filter the results these tools provide.\n\n_Object Query Language_ studio is a MAT feature that allows you to query objects from the memory dump with an SQL-like language. The tool allows you to transform simple objects by invoking Java methods on them, and it provides an API for building sophisticated tools on top of the MAT.\n\n```sql\nSELECT * FROM java.lang.String\n```\n\nIn the example above, all `String` objects present in the memory dump will be selected. The results will include the object's class, memory address, value, and retain count. To filter this information and see only the value of each string, use the following code:\n\n```sql\nSELECT toString(object) FROM java.lang.String object\n```\n\nOr\n\n```sql\nSELECT object.toString() FROM java.lang.String object\n```\n\nSQL supports primitive data types as well, so you can do something like the following to access the content of all `char` arrays:\n\n```sql\nSELECT toString(arr) FROM char[] arr\n```\n\nDon't be surprised if you get results that are similar to the previous results; after all, `String` and other Java data types are just wrappers around primitive data types. Now let's filter the results. The following sample code will select all byte arrays that contain the ASN.1 OID of an RSA key. This doesn't imply that a given byte array actually contains an RSA (the same byte sequence may be part of something else), but this is probable.\n\n```sql\nSELECT * FROM byte[] b WHERE toString(b).matches(\".*1\\.2\\.840\\.113549\\.1\\.1\\.1.*\")\n```\n\nFinally, you don't have to select whole objects. Consider an SQL analogy: classes are tables, objects are rows, and fields are columns. If you want to find all objects that have a \"password\" field, you can do something like the following:\n\n```sql\nSELECT password FROM \".*\" WHERE (null != password)\n```\n\nDuring your analysis, search for:\n\n- Indicative field names: \"password\", \"pass\", \"pin\", \"secret\", \"private\", etc.\n- Indicative patterns (e.g., RSA footprints) in strings, char arrays, byte arrays, etc.\n- Known secrets (e.g., a credit card number that you've entered or an authentication token provided by the backend)\n- etc.\n\nRepeating tests and memory dumps will help you obtain statistics about the length of data exposure. Furthermore, observing the way a particular memory segment (e.g., a byte array) changes may lead you to some otherwise unrecognizable sensitive data (more on this in the \"Remediation\" section below)."
  },
  {
    "id": "MASTG-TEST-0012",
    "title": "Testing the Device-Access-Security Policy",
    "category": "Data Storage and Privacy",
    "description": "To test the device-access-security policy that the app enforces, a written copy of the policy must be provided. The policy should define available checks and their enforcement. For example, one check ...",
    "full_description": "## Overview\n\nApps that process or query sensitive information should run in a trusted and secure environment. To create this environment, the app can check the device for the following:\n\n- PIN- or password-protected device locking\n- Recent Android OS version\n- USB Debugging activation\n- Device encryption\n- Device rooting (see also \"Testing Root Detection\")\n\n## Static Analysis\n\nTo test the device-access-security policy that the app enforces, a written copy of the policy must be provided. The policy should define available checks and their enforcement. For example, one check could require that the app run only on Android 6.0 (API level 23) or a more recent version, closing the app or displaying a warning if the Android version is less than 6.0.\n\nCheck the source code for functions that implement the policy and determine whether it can be bypassed.\n\nYou can implement checks on the Android device by querying [_Settings.Secure_](https://developer.android.com/reference/android/provider/Settings.Secure.html \"Settings.Secure\") for system preferences. [_Device Administration API_](https://developer.android.com/guide/topics/admin/device-admin.html \"Device Administration API\") offers techniques for creating applications that can enforce password policies and device encryption.\n\n## Dynamic Analysis\n\nThe dynamic analysis depends on the checks enforced by the app and their expected behavior. If the checks can be bypassed, they must be validated."
  },
  {
    "id": "MASTG-TEST-0064",
    "title": "Testing Biometric Authentication",
    "category": "Authentication and Authorization",
    "description": "It is important to remember that the LocalAuthentication framework is an event-based procedure and as such, should not be the sole method of authentication. Though this type of authentication is effec...",
    "full_description": "## Overview\n\nThe usage of frameworks in an app can be detected by analyzing the app binary's list of shared dynamic libraries. This can be done by using @MASTG-TOOL-0060:\n\n```bash\notool -L <AppName>.app/<AppName>\n```\n\nIf `LocalAuthentication.framework` is used in an app, the output will contain both of the following lines (remember that `LocalAuthentication.framework` uses `Security.framework` under the hood):\n\n```bash\n/System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication\n/System/Library/Frameworks/Security.framework/Security\n```\n\nIf `Security.framework` is used, only the second one will be shown.\n\n## Static Analysis\n\nIt is important to remember that the LocalAuthentication framework is an event-based procedure and as such, should not be the sole method of authentication. Though this type of authentication is effective on the user-interface level, it is easily bypassed through patching or instrumentation. Therefore, it is best to use the keychain service method, which means you should:\n\n- Verify that sensitive processes, such as re-authenticating a user performing a payment transaction, are protected using the keychain services method.\n- Verify that access control flags are set for the keychain item which ensure that the data of the keychain item can only be unlocked by means of authenticating the user. This can be done with one of the following flags:\n    - `kSecAccessControlBiometryCurrentSet` (before iOS 11.3 `kSecAccessControlTouchIDCurrentSet`). This will make sure that a user needs to authenticate with biometrics (e.g. Face ID or Touch ID) before accessing the data in the keychain item. Whenever the user adds a fingerprint or facial representation to the device, it will automatically invalidate the entry in the Keychain. This makes sure that the keychain item can only ever be unlocked by users that were enrolled when the item was added to the keychain.\n    - `kSecAccessControlBiometryAny` (before iOS 11.3 `kSecAccessControlTouchIDAny`). This will make sure that a user needs to authenticate with biometrics (e.g. Face ID or Touch ID) before accessing the data in the Keychain entry. The Keychain entry will survive any (re-)enroling of new fingerprints or facial representation. This can be very convenient if the user has a changing fingerprint. However, it also means that attackers, who are somehow able to enrole their fingerprints or facial representations to the device, can now access those entries as well.\n    - `kSecAccessControlUserPresence` can be used as an alternative. This will allow the user to authenticate through a passcode if the biometric authentication no longer works. This is considered to be weaker than `kSecAccessControlBiometryAny` since it is much easier to steal someone's passcode entry by means of shouldersurfing, than it is to bypass the Touch ID or Face ID service.\n- In order to make sure that biometrics can be used, verify that the `kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly` or the `kSecAttrAccessibleWhenPasscodeSet` protection class is set when the `SecAccessControlCreateWithFlags` method is called. Note that the `...ThisDeviceOnly` variant will make sure that the keychain item is not synchronized with other iOS devices.\n\n> Note, a data protection class specifies the access methodology used to secure the data. Each class uses different policies to determine when the data\nis accessible.\n\n## Dynamic Analysis\n\n[Objection Biometrics Bypass](https://github.com/sensepost/objection/wiki/Understanding-the-iOS-Biometrics-Bypass \"Understanding the iOS Biometrics Bypass\") can be used to bypass LocalAuthentication. Objection uses Frida to instrument the `evaluatePolicy` function so that it returns `True` even if authentication was not successfully performed. Use the `ios ui biometrics_bypass` command to bypass the insecure biometric authentication. Objection will register a job, which will replace the `evaluatePolicy` result. It will work in both, Swift and Objective-C implementations.\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios ui biometrics_bypass\n(agent) Registering job 3mhtws9x47q. Type: ios-biometrics-disable\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # (agent) [3mhtws9x47q] Localized Reason for auth requirement: Please authenticate yourself\n(agent) [3mhtws9x47q] OS authentication response: false\n(agent) [3mhtws9x47q] Marking OS response as True instead\n(agent) [3mhtws9x47q] Biometrics bypass hook complete\n```\n\nIf vulnerable, the module will automatically bypass the login form."
  },
  {
    "id": "MASTG-TEST-0079",
    "title": "Testing Object Persistence",
    "category": "Code Quality and Build Settings",
    "description": "All different flavors of object persistence share the following concerns:",
    "full_description": "## Overview\n\n## Static Analysis\n\nAll different flavors of object persistence share the following concerns:\n\n- If you use object persistence to store sensitive information on the device, then make sure that the data is encrypted: either at the database level, or specifically at the value level.\n- Need to guarantee the integrity of the information? Use an HMAC mechanism or sign the information stored. Always verify the HMAC/signature before processing the actual information stored in the objects.\n- Make sure that keys used in the two notions above are safely stored in the KeyChain and well protected. See the chapter \"[Data Storage on iOS](../../../Document/0x06d-Testing-Data-Storage.md)\" for more details.\n- Ensure that the data within the deserialized object is carefully validated before it is actively used (e.g., no exploit of business/application logic is possible).\n- Do not use persistence mechanisms that use [Runtime Reference](https://developer.apple.com/documentation/objectivec/objective-c_runtime \"Objective-C Runtime Reference\") to serialize/deserialize objects in high-risk applications, as the attacker might be able to manipulate the steps to execute business logic via this mechanism (see the chapter \"[iOS Anti-Reversing Defenses](../../../Document/0x06j-Testing-Resiliency-Against-Reverse-Engineering.md)\" for more details).\n- Note that in Swift 2 and beyond, a [Mirror](https://developer.apple.com/documentation/swift/mirror \"Mirror\") can be used to read parts of an object, but cannot be used to write against the object.\n\n## Static Analysis\n\nAll different flavors of object persistence share the following concerns:\n\n- If you use object persistence to store sensitive information on the device, then make sure that the data is encrypted: either at the database level, or specifically at the value level.\n- Need to guarantee the integrity of the information? Use an HMAC mechanism or sign the information stored. Always verify the HMAC/signature before processing the actual information stored in the objects.\n- Make sure that keys used in the two notions above are safely stored in the KeyChain and well protected. See the chapter \"[Data Storage on iOS](../../../Document/0x06d-Testing-Data-Storage.md)\" for more details.\n- Ensure that the data within the deserialized object is carefully validated before it is actively used (e.g., no exploit of business/application logic is possible).\n- Do not use persistence mechanisms that use [Runtime Reference](https://developer.apple.com/documentation/objectivec/objective-c_runtime \"Objective-C Runtime Reference\") to serialize/deserialize objects in high-risk applications, as the attacker might be able to manipulate the steps to execute business logic via this mechanism (see the chapter \"[iOS Anti-Reversing Defenses](../../../Document/0x06j-Testing-Resiliency-Against-Reverse-Engineering.md)\" for more details).\n- Note that in Swift 2 and beyond, a [Mirror](https://developer.apple.com/documentation/swift/mirror \"Mirror\") can be used to read parts of an object, but cannot be used to write against the object.\n\n## Dynamic Analysis\n\nThere are several ways to perform dynamic analysis:\n\n- For the actual persistence: Use the techniques described in the \"Data Storage on iOS\" chapter.\n- For the serialization itself: Use a debug build or use Frida / objection to see how the serialization methods are handled (e.g., whether the application crashes or extra information can be extracted by enriching the objects)."
  },
  {
    "id": "MASTG-TEST-0080",
    "title": "Testing Enforced Updating",
    "category": "Code Quality and Build Settings",
    "description": "First see whether there is an update mechanism at all: if it is not yet present, it might mean that users cannot be forced to update.\nIf the mechanism is present, see whether it enforces \"always lates...",
    "full_description": "## Overview\n\n## Static Analysis\n\nFirst see whether there is an update mechanism at all: if it is not yet present, it might mean that users cannot be forced to update.\nIf the mechanism is present, see whether it enforces \"always latest\" and whether that is indeed in line with the business strategy. Otherwise check if the mechanism is supporting to update to a given version.\nMake sure that every entry of the application goes through the updating mechanism in order to make sure that the update-mechanism cannot be bypassed.\n\n## Static Analysis\n\nFirst see whether there is an update mechanism at all: if it is not yet present, it might mean that users cannot be forced to update.\nIf the mechanism is present, see whether it enforces \"always latest\" and whether that is indeed in line with the business strategy. Otherwise check if the mechanism is supporting to update to a given version.\nMake sure that every entry of the application goes through the updating mechanism in order to make sure that the update-mechanism cannot be bypassed."
  },
  {
    "id": "MASTG-TEST-0085",
    "title": "Checking for Weaknesses in Third Party Libraries",
    "category": "Code Quality and Build Settings",
    "description": "In order to ensure that the libraries used by the apps are not carrying vulnerabilities, one can best check the dependencies installed by CocoaPods or Carthage.",
    "full_description": "## Overview\n\n## Static Analysis\n\n### Detecting vulnerabilities of third party libraries\n\nIn order to ensure that the libraries used by the apps are not carrying vulnerabilities, one can best check the dependencies installed by CocoaPods or Carthage.\n\n#### Swift Package Manager\n\nIn case [Swift Package Manager](https://swift.org/package-manager \"Swift Package Manager on Swift.org\") is used for managing third party dependencies, the following steps can be taken to analyze the third party libraries for vulnerabilities:\n\nFirst, at the root of the project, where the Package.swift file is located, type\n\n```bash\nswift build\n```\n\nNext, check the file Package.resolved for the actual versions used and inspect the given libraries for known vulnerabilities.\n\nYou can utilize the [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check/ \"OWASP Dependency-Check\")'s experimental [Swift Package Manager Analyzer](https://jeremylong.github.io/DependencyCheck/analyzers/swift.html \"dependency-check - SWIFT Package Manager Analyzer\") to identify the [Common Platform Enumeration (CPE)](https://nvd.nist.gov/products/cpe \"CPE\") naming scheme of all dependencies and any corresponding [Common Vulnerability and Exposure (CVE)](https://cve.mitre.org/ \"CVE\") entries. Scan the application's Package.swift file and generate a report of known vulnerable libraries with the following command:\n\n```bash\ndependency-check  --enableExperimental --out . --scan Package.swift\n```\n\n#### CocoaPods\n\nIn case [CocoaPods](https://cocoapods.org \"CocoaPods.org\") is used for managing third party dependencies, the following steps can be taken to analyze the third party libraries for vulnerabilities.\n\nFirst, at the root of the project, where the Podfile is located, execute the following commands:\n\n```bash\nsudo gem install cocoapods\npod install\n```\n\nNext, now that the dependency tree has been built, you can create an overview of the dependencies and their versions by running the following commands:\n\n```bash\nsudo gem install cocoapods-dependencies\npod dependencies\n```\n\nThe result of the steps above can now be used as input for searching different vulnerability feeds for known vulnerabilities.\n\n> Note:\n>\n> 1. If the developer packs all dependencies in terms of its own support library using a .podspec file, then this .podspec file can be checked with the experimental CocoaPods podspec checker.\n> 2. If the project uses CocoaPods in combination with Objective-C, SourceClear can be used.\n> 3. Using CocoaPods with HTTP-based links instead of HTTPS might allow for [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) attacks during the download of the dependency, allowing an attacker to replace (parts of) the library with other content. Therefore, always use HTTPS.\n\nYou can utilize the [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check/ \"OWASP Dependency-Check\")'s experimental [CocoaPods Analyzer](https://jeremylong.github.io/DependencyCheck/analyzers/cocoapods.html \"dependency-check - CocoaPods Analyzer\")\nto identify the [Common Platform Enumeration (CPE)](https://nvd.nist.gov/products/cpe \"CPE\") naming scheme of all dependencies and any corresponding [Common Vulnerability and Exposure (CVE)](https://cve.mitre.org/ \"CVE\") entries. Scan the application's \\*.podspec and/or Podfile.lock files and generate a report of known vulnerable libraries with the following command:\n\n```bash\ndependency-check  --enableExperimental --out . --scan Podfile.lock\n```\n\n#### Carthage\n\nIn case [Carthage](https://github.com/Carthage/Carthage \"Carthage on GitHub\") is used for third party dependencies, then the following steps can be taken to analyze the third party libraries for vulnerabilities.\n\nFirst, at the root of the project, where the Cartfile is located, type\n\n```bash\nbrew install carthage\ncarthage update --platform iOS\n```\n\nNext, check the Cartfile.resolved for actual versions used and inspect the given libraries for known vulnerabilities.\n\n> Note, at the time of writing this chapter, there is no automated support for Carthage based dependency analysis known to the authors. At least, this feature was already requested for the OWASP DependencyCheck tool but not yet implemented (see the [GitHub issue](https://github.com/jeremylong/DependencyCheck/issues/962 \"Add Carthage Analyze for Swift\")).\n\n### Discovered library vulnerabilities\n\nWhen a library is found to contain vulnerabilities, then the following reasoning applies:\n\n- Is the library packaged with the application? Then check whether the library has a version in which the vulnerability is patched. If not, check whether the vulnerability actually affects the application. If that is the case or might be the case in the future, then look for an alternative which provides similar functionality, but without the vulnerabilities.\n- Is the library not packaged with the application? See if there is a patched version in which the vulnerability is fixed. If this is not the case, check if the implications of the vulnerability for the build process. Could the vulnerability impede a build or weaken the security of the build-pipeline? Then try looking for an alternative in which the vulnerability is fixed.\n\nIn case frameworks are added manually as linked libraries:\n\n1. Open the xcodeproj file and check the project properties.\n2. Go to the tab **Build Phases** and check the entries in **Link Binary With Libraries** for any of the libraries. See earlier sections on how to obtain similar information using @MASTG-TOOL-0035.\n\nIn the case of copy-pasted sources: search the header files (in case of using Objective-C) and otherwise the Swift files for known method names for known libraries.\n\nNext, note that for hybrid applications, you will have to check the JavaScript dependencies with [RetireJS](https://retirejs.github.io/retire.js/ \"RetireJS\"). Similarly for Xamarin, you will have to check the C# dependencies.\n\nLast, if the application is a high-risk application, you will end up vetting the library manually. In that case there are specific requirements for native code, which are similar to the requirements established by the MASVS for the application as a whole. Next to that, it is good to vet whether all best practices for software engineering are applied.\n\n## Static Analysis\n\n### Detecting vulnerabilities of third party libraries\n\nIn order to ensure that the libraries used by the apps are not carrying vulnerabilities, one can best check the dependencies installed by CocoaPods or Carthage.\n\n#### Swift Package Manager\n\nIn case [Swift Package Manager](https://swift.org/package-manager \"Swift Package Manager on Swift.org\") is used for managing third party dependencies, the following steps can be taken to analyze the third party libraries for vulnerabilities:\n\nFirst, at the root of the project, where the Package.swift file is located, type\n\n```bash\nswift build\n```\n\nNext, check the file Package.resolved for the actual versions used and inspect the given libraries for known vulnerabilities.\n\nYou can utilize the [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check/ \"OWASP Dependency-Check\")'s experimental [Swift Package Manager Analyzer](https://jeremylong.github.io/DependencyCheck/analyzers/swift.html \"dependency-check - SWIFT Package Manager Analyzer\") to identify the [Common Platform Enumeration (CPE)](https://nvd.nist.gov/products/cpe \"CPE\") naming scheme of all dependencies and any corresponding [Common Vulnerability and Exposure (CVE)](https://cve.mitre.org/ \"CVE\") entries. Scan the application's Package.swift file and generate a report of known vulnerable libraries with the following command:\n\n```bash\ndependency-check  --enableExperimental --out . --scan Package.swift\n```\n\n#### CocoaPods\n\nIn case [CocoaPods](https://cocoapods.org \"CocoaPods.org\") is used for managing third party dependencies, the following steps can be taken to analyze the third party libraries for vulnerabilities.\n\nFirst, at the root of the project, where the Podfile is located, execute the following commands:\n\n```bash\nsudo gem install cocoapods\npod install\n```\n\nNext, now that the dependency tree has been built, you can create an overview of the dependencies and their versions by running the following commands:\n\n```bash\nsudo gem install cocoapods-dependencies\npod dependencies\n```\n\nThe result of the steps above can now be used as input for searching different vulnerability feeds for known vulnerabilities.\n\n> Note:\n>\n> 1. If the developer packs all dependencies in terms of its own support library using a .podspec file, then this .podspec file can be checked with the experimental CocoaPods podspec checker.\n> 2. If the project uses CocoaPods in combination with Objective-C, SourceClear can be used.\n> 3. Using CocoaPods with HTTP-based links instead of HTTPS might allow for [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) attacks during the download of the dependency, allowing an attacker to replace (parts of) the library with other content. Therefore, always use HTTPS.\n\nYou can utilize the [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check/ \"OWASP Dependency-Check\")'s experimental [CocoaPods Analyzer](https://jeremylong.github.io/DependencyCheck/analyzers/cocoapods.html \"dependency-check - CocoaPods Analyzer\")\nto identify the [Common Platform Enumeration (CPE)](https://nvd.nist.gov/products/cpe \"CPE\") naming scheme of all dependencies and any corresponding [Common Vulnerability and Exposure (CVE)](https://cve.mitre.org/ \"CVE\") entries. Scan the application's \\*.podspec and/or Podfile.lock files and generate a report of known vulnerable libraries with the following command:\n\n```bash\ndependency-check  --enableExperimental --out . --scan Podfile.lock\n```\n\n#### Carthage\n\nIn case [Carthage](https://github.com/Carthage/Carthage \"Carthage on GitHub\") is used for third party dependencies, then the following steps can be taken to analyze the third party libraries for vulnerabilities.\n\nFirst, at the root of the project, where the Cartfile is located, type\n\n```bash\nbrew install carthage\ncarthage update --platform iOS\n```\n\nNext, check the Cartfile.resolved for actual versions used and inspect the given libraries for known vulnerabilities.\n\n> Note, at the time of writing this chapter, there is no automated support for Carthage based dependency analysis known to the authors. At least, this feature was already requested for the OWASP DependencyCheck tool but not yet implemented (see the [GitHub issue](https://github.com/jeremylong/DependencyCheck/issues/962 \"Add Carthage Analyze for Swift\")).\n\n### Discovered library vulnerabilities\n\nWhen a library is found to contain vulnerabilities, then the following reasoning applies:\n\n- Is the library packaged with the application? Then check whether the library has a version in which the vulnerability is patched. If not, check whether the vulnerability actually affects the application. If that is the case or might be the case in the future, then look for an alternative which provides similar functionality, but without the vulnerabilities.\n- Is the library not packaged with the application? See if there is a patched version in which the vulnerability is fixed. If this is not the case, check if the implications of the vulnerability for the build process. Could the vulnerability impede a build or weaken the security of the build-pipeline? Then try looking for an alternative in which the vulnerability is fixed.\n\nIn case frameworks are added manually as linked libraries:\n\n1. Open the xcodeproj file and check the project properties.\n2. Go to the tab **Build Phases** and check the entries in **Link Binary With Libraries** for any of the libraries. See earlier sections on how to obtain similar information using @MASTG-TOOL-0035.\n\nIn the case of copy-pasted sources: search the header files (in case of using Objective-C) and otherwise the Swift files for known method names for known libraries.\n\nNext, note that for hybrid applications, you will have to check the JavaScript dependencies with [RetireJS](https://retirejs.github.io/retire.js/ \"RetireJS\"). Similarly for Xamarin, you will have to check the C# dependencies.\n\nLast, if the application is a high-risk application, you will end up vetting the library manually. In that case there are specific requirements for native code, which are similar to the requirements established by the MASVS for the application as a whole. Next to that, it is good to vet whether all best practices for software engineering are applied.\n\n## Dynamic Analysis\n\nThe dynamic analysis of this section comprises of two parts: the actual license verification and checking which libraries are involved in case of missing sources.\n\nIt need to be validated whether the copyrights of the licenses have been adhered to. This often means that the application should have an `about` or `EULA` section in which the copy-right statements are noted as required by the license of the third party library.\n\n### Listing Application Libraries\n\nWhen performing app analysis, it is important to also analyze the app dependencies (usually in form of libraries or so-called iOS Frameworks) and ensure that they don't contain any vulnerabilities. Even when you don't have the source code, you can still identify some of the app dependencies using tools like @MASTG-TOOL-0038, @MASTG-TOOL-0035 or the `otool -L` command. Objection is the recommended tool, since it provides the most accurate results and it is easy to use. It contains a module to work with iOS Bundles, which offers two commands: `list_bundles` and `list_frameworks`.\n\nThe `list_bundles` command lists all of the application's bundles that are not related to Frameworks. The output contains executable name, bundle id, version of the library and path to the library.\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios bundles list_bundles\nExecutable    Bundle                                       Version  Path\n------------  -----------------------------------------  ---------  -------------------------------------------\nDVIA-v2       com.highaltitudehacks.DVIAswiftv2.develop          2  ...-1F0C-4DB1-8C39-04ACBFFEE7C8/DVIA-v2.app\nCoreGlyphs    com.apple.CoreGlyphs                               1  ...m/Library/CoreServices/CoreGlyphs.bundle\n```\n\nThe `list_frameworks` command lists all of the application's bundles that represent Frameworks.\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios bundles list_frameworks\nExecutable      Bundle                                     Version    Path\n--------------  -----------------------------------------  ---------  -------------------------------------------\nBolts           org.cocoapods.Bolts                        1.9.0      ...8/DVIA-v2.app/Frameworks/Bolts.framework\nRealmSwift      org.cocoapods.RealmSwift                   4.1.1      ...A-v2.app/Frameworks/RealmSwift.framework\n                                                                      ...ystem/Library/Frameworks/IOKit.framework\n...\n```"
  },
  {
    "id": "MASTG-TEST-0086",
    "title": "Memory Corruption Bugs",
    "category": "Code Quality and Build Settings",
    "description": "Are there native code parts? If so: check for the given issues in the general memory corruption section. Native code is a little harder to spot when compiled. If you have the sources then you can see ...",
    "full_description": "## Overview\n\n## Static Analysis\n\nAre there native code parts? If so: check for the given issues in the general memory corruption section. Native code is a little harder to spot when compiled. If you have the sources then you can see that C files use .c source files and .h header files and C++ uses .cpp files and .h files. This is a little different from the .swift and the .m source files for Swift and Objective-C. These files can be part of the sources, or part of third party libraries, registered as frameworks and imported through various tools, such as Carthage, the Swift Package Manager or Cocoapods.\n\nFor any managed code (Objective-C / Swift) in the project, check the following items:\n\n- The doubleFree issue: when `free` is called twice for a given region instead of once.\n- Retaining cycles: look for cyclic dependencies by means of strong references of components to one another which keep materials in memory.\n- Using instances of `UnsafePointer` can be managed wrongly, which will allow for various memory corruption issues.\n- Trying to manage the reference count to an object by `Unmanaged` manually, leading to wrong counter numbers and a too late/too soon release.\n\n[A great talk is given on this subject at Realm academy](https://academy.realm.io/posts/russ-bishop-unsafe-swift/ \"Russh Bishop on Unsafe Swift\") and [a nice tutorial to see what is actually happening](https://www.raywenderlich.com/780-unsafe-swift-using-pointers-and-interacting-with-c \"Unsafe Swift: Using Pointers And Interacting With C\") is provided by Ray Wenderlich on this subject.\n\n> Please note that with Swift 5 you can only deallocate full blocks, which means the playground has changed a bit.\n\n## Static Analysis\n\nAre there native code parts? If so: check for the given issues in the general memory corruption section. Native code is a little harder to spot when compiled. If you have the sources then you can see that C files use .c source files and .h header files and C++ uses .cpp files and .h files. This is a little different from the .swift and the .m source files for Swift and Objective-C. These files can be part of the sources, or part of third party libraries, registered as frameworks and imported through various tools, such as Carthage, the Swift Package Manager or Cocoapods.\n\nFor any managed code (Objective-C / Swift) in the project, check the following items:\n\n- The doubleFree issue: when `free` is called twice for a given region instead of once.\n- Retaining cycles: look for cyclic dependencies by means of strong references of components to one another which keep materials in memory.\n- Using instances of `UnsafePointer` can be managed wrongly, which will allow for various memory corruption issues.\n- Trying to manage the reference count to an object by `Unmanaged` manually, leading to wrong counter numbers and a too late/too soon release.\n\n[A great talk is given on this subject at Realm academy](https://academy.realm.io/posts/russ-bishop-unsafe-swift/ \"Russh Bishop on Unsafe Swift\") and [a nice tutorial to see what is actually happening](https://www.raywenderlich.com/780-unsafe-swift-using-pointers-and-interacting-with-c \"Unsafe Swift: Using Pointers And Interacting With C\") is provided by Ray Wenderlich on this subject.\n\n> Please note that with Swift 5 you can only deallocate full blocks, which means the playground has changed a bit.\n\n## Dynamic Analysis\n\nThere are various tools provided which help to identify memory bugs within Xcode, such as the Debug Memory graph introduced in Xcode 8 and the Allocations and Leaks instrument in Xcode.\n\nNext, you can check whether memory is freed too fast or too slow by enabling `NSAutoreleaseFreedObjectCheckEnabled`, `NSZombieEnabled`, `NSDebugEnabled` in Xcode while testing the application.\n\nThere are various well written explanations which can help with taking care of memory management. These can be found in the reference list of this chapter."
  },
  {
    "id": "MASTG-TEST-0087",
    "title": "Make Sure That Free Security Features Are Activated",
    "category": "Code Quality and Build Settings",
    "description": "You can use radare2 to check the binary security features.",
    "full_description": "## Overview\n\n## Static Analysis\n\nYou can use radare2 to check the binary security features.\n\nLet's use the [Damn Vulnerable iOS App DVIA v1](https://github.com/prateek147/DVIA/) as an example. Open its main binary with radare2:\n\n```bash\nr2 DamnVulnerableIOSApp\n```\n\nAnd run the following commands:\n\n```bash\n[0x1000180c8]> i~pic,canary\ncanary   true\npic      true\n```\n\n```bash\n[0x1000180c8]> is~release,retain\n124  0x002951e0 0x1000891e0 LOCAL  FUNC 0        imp.dispatch_release\n149  0x00294e80 0x100088e80 LOCAL  FUNC 0        imp.objc_autorelease\n150  0x00294e8c 0x100088e8c LOCAL  FUNC 0        imp.objc_autoreleasePoolPop\n151  0x00294e98 0x100088e98 LOCAL  FUNC 0        imp.objc_autoreleasePoolPush\n152  0x00294ea4 0x100088ea4 LOCAL  FUNC 0        imp.objc_autoreleaseReturnValue\n165  0x00294f40 0x100088f40 LOCAL  FUNC 0        imp.objc_release\n167  0x00294f58 0x100088f58 LOCAL  FUNC 0        imp.objc_retainAutorelease\n168  0x00294f64 0x100088f64 LOCAL  FUNC 0        imp.objc_retainAutoreleaseReturnValue\n169  0x00294f70 0x100088f70 LOCAL  FUNC 0        imp.objc_retainAutoreleasedReturnValue\n```\n\nAll the features are enabled in these examples:\n\n- PIE (Position Independent Executable): indicated by the flag `pic true`.\n    - Applies to all apps independently of the language used.\n    - Applies only to the main executable (`MH_EXECUTE`), not to dynamic libraries (`MH_DYLIB`).\n\n- Stack Canary: indicated by the flag `canary true`.\n    - Applies to apps containing Objective-C code.\n    - Not necessarily required for pure Swift apps (Swift is memory safe by design).\n    - Especially important for apps containing C/C++ code, as they provide direct access to memory and pointers, making them more vulnerable to buffer overflows.\n\n- ARC (Automatic Reference Counting): indicated by symbols such as `objc_autorelease` or `objc_retainAutorelease`.\n    - Important for binaries containing Objective-C code.\n    - For binaries written purely in Swift, ARC is enabled by default.\n    - ARC is not relevant for binaries written purely in C/C++, as it's a memory management feature specific to Objective-C and Swift.\n\n## Static Analysis\n\nYou can use radare2 to check the binary security features.\n\nLet's use the [Damn Vulnerable iOS App DVIA v1](https://github.com/prateek147/DVIA/) as an example. Open its main binary with radare2:\n\n```bash\nr2 DamnVulnerableIOSApp\n```\n\nAnd run the following commands:\n\n```bash\n[0x1000180c8]> i~pic,canary\ncanary   true\npic      true\n```\n\n```bash\n[0x1000180c8]> is~release,retain\n124  0x002951e0 0x1000891e0 LOCAL  FUNC 0        imp.dispatch_release\n149  0x00294e80 0x100088e80 LOCAL  FUNC 0        imp.objc_autorelease\n150  0x00294e8c 0x100088e8c LOCAL  FUNC 0        imp.objc_autoreleasePoolPop\n151  0x00294e98 0x100088e98 LOCAL  FUNC 0        imp.objc_autoreleasePoolPush\n152  0x00294ea4 0x100088ea4 LOCAL  FUNC 0        imp.objc_autoreleaseReturnValue\n165  0x00294f40 0x100088f40 LOCAL  FUNC 0        imp.objc_release\n167  0x00294f58 0x100088f58 LOCAL  FUNC 0        imp.objc_retainAutorelease\n168  0x00294f64 0x100088f64 LOCAL  FUNC 0        imp.objc_retainAutoreleaseReturnValue\n169  0x00294f70 0x100088f70 LOCAL  FUNC 0        imp.objc_retainAutoreleasedReturnValue\n```\n\nAll the features are enabled in these examples:\n\n- PIE (Position Independent Executable): indicated by the flag `pic true`.\n    - Applies to all apps independently of the language used.\n    - Applies only to the main executable (`MH_EXECUTE`), not to dynamic libraries (`MH_DYLIB`).\n\n- Stack Canary: indicated by the flag `canary true`.\n    - Applies to apps containing Objective-C code.\n    - Not necessarily required for pure Swift apps (Swift is memory safe by design).\n    - Especially important for apps containing C/C++ code, as they provide direct access to memory and pointers, making them more vulnerable to buffer overflows.\n\n- ARC (Automatic Reference Counting): indicated by symbols such as `objc_autorelease` or `objc_retainAutorelease`.\n    - Important for binaries containing Objective-C code.\n    - For binaries written purely in Swift, ARC is enabled by default.\n    - ARC is not relevant for binaries written purely in C/C++, as it's a memory management feature specific to Objective-C and Swift.\n\n## Dynamic Analysis\n\nThese checks can be performed dynamically using @MASTG-TOOL-0038. Here's one example:\n\n```bash\ncom.yourcompany.PPClient on (iPhone: 13.2.3) [usb] # ios info binary\nName                  Type     Encrypted    PIE    ARC    Canary    Stack Exec    RootSafe\n--------------------  -------  -----------  -----  -----  --------  ------------  ----------\nPayPal                execute  True         True   True   True      False         False\nCardinalMobile        dylib    False        False  True   True      False         False\nFraudForce            dylib    False        False  True   True      False         False\n...\n```"
  },
  {
    "id": "MASTG-TEST-0061",
    "title": "Verifying the Configuration of Cryptographic Standard Algorithms",
    "category": "Cryptography",
    "description": "For each of the libraries that are used by the application, the used algorithms and cryptographic configurations need to be verified to make sure they are not deprecated and used correctly.",
    "full_description": "## Overview\n\n## Static Analysis\n\nFor each of the libraries that are used by the application, the used algorithms and cryptographic configurations need to be verified to make sure they are not deprecated and used correctly.\n\nPay attention to how-to-be-removed key-holding datastructures and plain-text data structures are defined. If the keyword `let` is used, then you create an immutable structure which is harder to wipe from memory. Make sure that it is part of a parent structure which can be easily removed from memory (e.g. a `struct` that lives temporally).\n\nEnsure that the best practices outlined in the \"[Cryptography for Mobile Apps](../../../Document/0x04g-Testing-Cryptography.md)\" chapter are followed. Look at [insecure and deprecated algorithms](../../../Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms) and [common configuration issues](../../../Document/0x04g-Testing-Cryptography.md#common-configuration-issues).\n\n### CommonCryptor\n\nIf the app uses standard cryptographic implementations provided by Apple, the easiest way to determine the status of the related algorithm is to check for calls to functions from `CommonCryptor`, such as `CCCrypt` and `CCCryptorCreate`. The [source code](https://web.archive.org/web/20240606000307/https://opensource.apple.com/source/CommonCrypto/CommonCrypto-36064/CommonCrypto/CommonCryptor.h \"CommonCryptor.h\") contains the signatures of all functions of CommonCryptor.h. For instance, `CCCryptorCreate` has following signature:\n\n```c\nCCCryptorStatus CCCryptorCreate(\n    CCOperation op,             /* kCCEncrypt, etc. */\n    CCAlgorithm alg,            /* kCCAlgorithmDES, etc. */\n    CCOptions options,          /* kCCOptionPKCS7Padding, etc. */\n    const void *key,            /* raw key material */\n    size_t keyLength,\n    const void *iv,             /* optional initialization vector */\n    CCCryptorRef *cryptorRef);  /* RETURNED */\n```\n\nYou can then compare all the `enum` types to determine which algorithm, padding, and key material is used. Pay attention to the keying material: the key should be generated securely - either using a key derivation function or a random-number generation function.\nNote that functions which are noted in chapter \"Cryptography for Mobile Apps\" as deprecated, are still programmatically supported. They should not be used.\n\n### Third party libraries\n\nGiven the continuous evolution of all third party libraries, this should not be the place to evaluate each library in terms of static analysis. Still there are some points of attention:\n\n- **Find the library being used**: This can be done using the following methods:\n    - Check the [cartfile](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile \"cartfile\") if Carthage is used.\n    - Check the [podfile](https://guides.cocoapods.org/syntax/podfile.html \"podfile\") if Cocoapods is used.\n    - Check the linked libraries: Open the xcodeproj file and check the project properties. Go to the **Build Phases** tab and check the entries in **Link Binary With Libraries** for any of the libraries. See earlier sections on how to obtain similar information using @MASTG-TOOL-0035.\n    - In the case of copy-pasted sources: search the headerfiles (in case of using Objective-C) and otherwise the Swift files for known methodnames for known libraries.\n- **Determine the version being used**: Always check the version of the library being used and check whether there is a new version available in which possible vulnerabilities or shortcomings are patched. Even without a newer version of a library, it can be the case that cryptographic functions have not been reviewed yet. Therefore we always recommend using a library that has been validated or ensure that you have the ability, knowledge and experience to do validation yourself.\n- **By hand?**: We recommend not to roll your own crypto, nor to implement known cryptographic functions yourself.\n\n## Static Analysis\n\nFor each of the libraries that are used by the application, the used algorithms and cryptographic configurations need to be verified to make sure they are not deprecated and used correctly.\n\nPay attention to how-to-be-removed key-holding datastructures and plain-text data structures are defined. If the keyword `let` is used, then you create an immutable structure which is harder to wipe from memory. Make sure that it is part of a parent structure which can be easily removed from memory (e.g. a `struct` that lives temporally).\n\nEnsure that the best practices outlined in the \"[Cryptography for Mobile Apps](../../../Document/0x04g-Testing-Cryptography.md)\" chapter are followed. Look at [insecure and deprecated algorithms](../../../Document/0x04g-Testing-Cryptography.md#identifying-insecure-andor-deprecated-cryptographic-algorithms) and [common configuration issues](../../../Document/0x04g-Testing-Cryptography.md#common-configuration-issues).\n\n### CommonCryptor\n\nIf the app uses standard cryptographic implementations provided by Apple, the easiest way to determine the status of the related algorithm is to check for calls to functions from `CommonCryptor`, such as `CCCrypt` and `CCCryptorCreate`. The [source code](https://web.archive.org/web/20240606000307/https://opensource.apple.com/source/CommonCrypto/CommonCrypto-36064/CommonCrypto/CommonCryptor.h \"CommonCryptor.h\") contains the signatures of all functions of CommonCryptor.h. For instance, `CCCryptorCreate` has following signature:\n\n```c\nCCCryptorStatus CCCryptorCreate(\n    CCOperation op,             /* kCCEncrypt, etc. */\n    CCAlgorithm alg,            /* kCCAlgorithmDES, etc. */\n    CCOptions options,          /* kCCOptionPKCS7Padding, etc. */\n    const void *key,            /* raw key material */\n    size_t keyLength,\n    const void *iv,             /* optional initialization vector */\n    CCCryptorRef *cryptorRef);  /* RETURNED */\n```\n\nYou can then compare all the `enum` types to determine which algorithm, padding, and key material is used. Pay attention to the keying material: the key should be generated securely - either using a key derivation function or a random-number generation function.\nNote that functions which are noted in chapter \"Cryptography for Mobile Apps\" as deprecated, are still programmatically supported. They should not be used.\n\n### Third party libraries\n\nGiven the continuous evolution of all third party libraries, this should not be the place to evaluate each library in terms of static analysis. Still there are some points of attention:\n\n- **Find the library being used**: This can be done using the following methods:\n    - Check the [cartfile](https://github.com/Carthage/Carthage/blob/master/Documentation/Artifacts.md#cartfile \"cartfile\") if Carthage is used.\n    - Check the [podfile](https://guides.cocoapods.org/syntax/podfile.html \"podfile\") if Cocoapods is used.\n    - Check the linked libraries: Open the xcodeproj file and check the project properties. Go to the **Build Phases** tab and check the entries in **Link Binary With Libraries** for any of the libraries. See earlier sections on how to obtain similar information using @MASTG-TOOL-0035.\n    - In the case of copy-pasted sources: search the headerfiles (in case of using Objective-C) and otherwise the Swift files for known methodnames for known libraries.\n- **Determine the version being used**: Always check the version of the library being used and check whether there is a new version available in which possible vulnerabilities or shortcomings are patched. Even without a newer version of a library, it can be the case that cryptographic functions have not been reviewed yet. Therefore we always recommend using a library that has been validated or ensure that you have the ability, knowledge and experience to do validation yourself.\n- **By hand?**: We recommend not to roll your own crypto, nor to implement known cryptographic functions yourself."
  },
  {
    "id": "MASTG-TEST-0062",
    "title": "Testing Key Management",
    "category": "Cryptography",
    "description": "There are various keywords to look for: check the libraries mentioned in the overview and static analysis of the section \"Verifying the Configuration of Cryptographic Standard Algorithms\" for which ke...",
    "full_description": "## Overview\n\n## Static Analysis\n\nThere are various keywords to look for: check the libraries mentioned in the overview and static analysis of the section \"Verifying the Configuration of Cryptographic Standard Algorithms\" for which keywords you can best check on how keys are stored.\n\nAlways make sure that:\n\n- keys are not synchronized over devices if it is used to protect high-risk data.\n- keys are not stored without additional protection.\n- keys are not hardcoded.\n- keys are not derived from stable features of the device.\n- keys are not hidden by use of lower level languages (e.g. C/C++).\n- keys are not imported from unsafe locations.\n\nCheck also the [list of common cryptographic configuration issues](../../../Document/0x04g-Testing-Cryptography.md#common-configuration-issues).\n\nMost of the recommendations for static analysis can already be found in chapter \"Testing Data Storage for iOS\". Next, you can read up on it at the following pages:\n\n- [Apple Developer Documentation: Certificates and keys](https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys \"Certificates and keys\")\n- [Apple Developer Documentation: Generating new keys](https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/generating_new_cryptographic_keys \"Generating new keys\")\n- [Apple Developer Documentation: Key generation attributes](https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/key_generation_attributes \"Key Generation attributes\")\n\n## Static Analysis\n\nThere are various keywords to look for: check the libraries mentioned in the overview and static analysis of the section \"Verifying the Configuration of Cryptographic Standard Algorithms\" for which keywords you can best check on how keys are stored.\n\nAlways make sure that:\n\n- keys are not synchronized over devices if it is used to protect high-risk data.\n- keys are not stored without additional protection.\n- keys are not hardcoded.\n- keys are not derived from stable features of the device.\n- keys are not hidden by use of lower level languages (e.g. C/C++).\n- keys are not imported from unsafe locations.\n\nCheck also the [list of common cryptographic configuration issues](../../../Document/0x04g-Testing-Cryptography.md#common-configuration-issues).\n\nMost of the recommendations for static analysis can already be found in chapter \"Testing Data Storage for iOS\". Next, you can read up on it at the following pages:\n\n- [Apple Developer Documentation: Certificates and keys](https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys \"Certificates and keys\")\n- [Apple Developer Documentation: Generating new keys](https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/generating_new_cryptographic_keys \"Generating new keys\")\n- [Apple Developer Documentation: Key generation attributes](https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/key_generation_attributes \"Key Generation attributes\")\n\n## Dynamic Analysis\n\nHook cryptographic methods and analyze the keys that are being used. Monitor file system access while cryptographic operations are being performed to assess where key material is written to or read from."
  },
  {
    "id": "MASTG-TEST-0063",
    "title": "Testing Random Number Generation",
    "category": "Cryptography",
    "description": "In Swift, the [`SecRandomCopyBytes` API](https://developer.apple.com/reference/security/1399291-secrandomcopybytes \"SecRandomCopyBytes (Swift)\") is defined as follows:",
    "full_description": "## Overview\n\n## Static Analysis\n\nIn Swift, the [`SecRandomCopyBytes` API](https://developer.apple.com/reference/security/1399291-secrandomcopybytes \"SecRandomCopyBytes (Swift)\") is defined as follows:\n\n```default\nfunc SecRandomCopyBytes(_ rnd: SecRandomRef?,\n                      _ count: Int,\n                      _ bytes: UnsafeMutablePointer<UInt8>) -> Int32\n```\n\nThe [Objective-C version](https://developer.apple.com/reference/security/1399291-secrandomcopybytes?language=objc \"SecRandomCopyBytes (Objective-C)\") is\n\n```objectivec\nint SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes);\n```\n\nThe following is an example of the APIs usage:\n\n```objectivec\nint result = SecRandomCopyBytes(kSecRandomDefault, 16, randomBytes);\n```\n\nNote: if other mechanisms are used for random numbers in the code, verify that these are either wrappers around the APIs mentioned above or review them for their secure-randomness. Often this is too hard, which means you can best stick with the implementation above.\n\n## Static Analysis\n\nIn Swift, the [`SecRandomCopyBytes` API](https://developer.apple.com/reference/security/1399291-secrandomcopybytes \"SecRandomCopyBytes (Swift)\") is defined as follows:\n\n```default\nfunc SecRandomCopyBytes(_ rnd: SecRandomRef?,\n                      _ count: Int,\n                      _ bytes: UnsafeMutablePointer<UInt8>) -> Int32\n```\n\nThe [Objective-C version](https://developer.apple.com/reference/security/1399291-secrandomcopybytes?language=objc \"SecRandomCopyBytes (Objective-C)\") is\n\n```objectivec\nint SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes);\n```\n\nThe following is an example of the APIs usage:\n\n```objectivec\nint result = SecRandomCopyBytes(kSecRandomDefault, 16, randomBytes);\n```\n\nNote: if other mechanisms are used for random numbers in the code, verify that these are either wrappers around the APIs mentioned above or review them for their secure-randomness. Often this is too hard, which means you can best stick with the implementation above.\n\n## Dynamic Analysis\n\nIf you want to test for randomness, you can try to capture a large set of numbers and check with [Burp's sequencer plugin](https://portswigger.net/burp/documentation/desktop/tools/sequencer \"Sequencer\") to see how good the quality of the randomness is."
  },
  {
    "id": "MASTG-TEST-0065",
    "title": "Testing Data Encryption on the Network",
    "category": "Network Communication",
    "description": "First, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make sure that sensitive information is sent over secure channels by using [`URLSession`...",
    "full_description": "## Overview\n\nAll the presented cases must be carefully analyzed as a whole. For example, even if the app does not permit cleartext traffic in its Info.plist, it might actually still be sending HTTP traffic. That could be the case if it's using a low-level API (for which ATS is ignored) or a badly configured cross-platform framework.\n\n> IMPORTANT: You should apply these tests to the app main code but also to any app extensions, frameworks or Watch apps embedded within the app as well.\n\nFor more information refer to the article [\"Preventing Insecure Network Connections\"](https://developer.apple.com/documentation/security/preventing_insecure_network_connections) and [\"Fine-tune your App Transport Security settings\"](https://developer.apple.com/news/?id=jxky8h89) in the Apple Developer Documentation.\n\n## Static Analysis\n\n### Testing Network Requests over Secure Protocols\n\nFirst, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make sure that sensitive information is sent over secure channels by using [`URLSession`](https://developer.apple.com/documentation/foundation/urlsession) (which uses the standard [URL Loading System from iOS](https://developer.apple.com/documentation/foundation/url_loading_system)) or [`Network`](https://developer.apple.com/documentation/network) (for socket-level communication using TLS and access to TCP and UDP).\n\n### Check for Low-Level Networking API Usage\n\nIdentify the network APIs used by the app and see if it uses any low-level networking APIs.\n\n> **Apple Recommendation: Prefer High-Level Frameworks in Your App**: \"ATS doesn't apply to calls your app makes to lower-level networking interfaces like the Network framework or CFNetwork. In these cases, you take responsibility for ensuring the security of the connection. You can construct a secure connection this way, but mistakes are both easy to make and costly. It's typically safest to rely on the URL Loading System instead\" (see [source](https://developer.apple.com/documentation/security/preventing_insecure_network_connections)).\n\nIf the app uses any low-level APIs such as [`Network`](https://developer.apple.com/documentation/network) or [`CFNetwork`](https://developer.apple.com/documentation/cfnetwork), you should carefully investigate if they are being used securely. For apps using cross-platform frameworks (e.g. Flutter, Xamarin, ...) and third party frameworks (e.g. Alamofire) you should analyze if they're being configured and used securely according to their best practices.\n\nMake sure that the app:\n\n- verifies the challenge type and the host name and credentials when performing server trust evaluation.\n- doesn't ignore TLS errors.\n- doesn't use any insecure TLS configurations (see @MASTG-TEST-0066)\n\nThese checks are orientative, we cannot name specific APIs since every app might use a different framework. Please use this information as a reference when inspecting the code.\n\n### Testing for Cleartext Traffic\n\nEnsure that the app is not allowing cleartext HTTP traffic. Since iOS 9.0 cleartext HTTP traffic is blocked by default (due to App Transport Security (ATS)) but there are multiple ways in which an application can still send it:\n\n- Configuring ATS to enable cleartext traffic by setting the `NSAllowsArbitraryLoads` attribute to `true` (or `YES`) on `NSAppTransportSecurity` in the app's `Info.plist`.\n- Retrieve the `Info.plist` (see @MASTG-TECH-0058)\n- Check that `NSAllowsArbitraryLoads` is not set to `true` globally of for any domain.\n\n- If the application opens third party web sites in WebViews, then from iOS 10 onwards `NSAllowsArbitraryLoadsInWebContent` can be used to disable ATS restrictions for the content loaded in web views.\n\n> **Apple warns:** Disabling ATS means that unsecured HTTP connections are allowed. HTTPS connections are also allowed, and are still subject to default server trust evaluation. However, extended security checks—like requiring a minimum Transport Layer Security (TLS) protocol version—are disabled. Without ATS, you're also free to loosen the default server trust requirements, as described in [\"Performing Manual Server Trust Authentication\"](https://developer.apple.com/documentation/foundation/url_loading_system/handling_an_authentication_challenge/performing_manual_server_trust_authentication).\n\nThe following snippet shows a **vulnerable example** of an app disabling ATS restrictions globally.\n\n```xml\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSAllowsArbitraryLoads</key>\n    <true/>\n</dict>\n```\n\nATS should be examined taking the application's context into consideration. The application may _have to_ define ATS exceptions to fulfill its intended purpose. For example, the [Firefox iOS application has ATS disabled globally](https://github.com/mozilla-mobile/firefox-ios/blob/v97.0/Client/Info.plist#L82). This exception is acceptable because otherwise the application would not be able to connect to any HTTP website that does not have all the ATS requirements. In some cases, apps might disable ATS globally but enable it for certain domains to e.g. securely load metadata or still allow secure login.\n\nATS should include a [justification string](https://developer.apple.com/documentation/security/preventing_insecure_network_connections#3138036) for this (e.g. \"The app must connect to a server managed by another entity that doesn't support secure connections.\").\n\n## Dynamic Analysis\n\nIntercept the tested app's incoming and outgoing network traffic and make sure that this traffic is encrypted. You can intercept network traffic in any of the following ways:\n\n- Capture all HTTP(S) and Websocket traffic with an interception proxy like @MASTG-TOOL-0079 or @MASTG-TOOL-0077 and make sure all requests are made via HTTPS instead of HTTP.\n- Interception proxies like Burp and @MASTG-TOOL-0079 will show web related traffic primarily (e.g. HTTP(S), Web Sockets, gRPC, etc.). You can, however, use a Burp plugin such as [Burp-non-HTTP-Extension](https://github.com/summitt/Burp-Non-HTTP-Extension \"Burp-non-HTTP-Extension\") or the tool [mitm-relay](https://github.com/jrmdev/mitm_relay \"mitm-relay\") to decode and visualize communication via XMPP and other protocols.\n\n> Some applications may not work with proxies like Burp and ZAP because of Certificate Pinning. In such a scenario, please check @MASTG-TEST-0068.\n\nFor more details refer to:\n\n- [\"Intercepting Network Traffic Through MITM\"](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm)\n- @MASTG-TECH-0062"
  },
  {
    "id": "MASTG-TEST-0066",
    "title": "Testing the TLS Settings",
    "category": "Network Communication",
    "description": "Remember to [inspect the corresponding justifications](https://developer.apple.com/documentation/security/preventing_insecure_network_connections#3138036) to discard that it might be part of the app i",
    "full_description": "## Overview\n\nRemember to [inspect the corresponding justifications](https://developer.apple.com/documentation/security/preventing_insecure_network_connections#3138036) to discard that it might be part of the app intended purpose.\n\nIt is possible to verify which ATS settings can be used when communicating to a certain endpoint. On macOS the command line utility `nscurl` can be used. A permutation of different settings will be executed and verified against the specified endpoint. If the default ATS secure connection test is passing, ATS can be used in its default secure configuration. If there are any fails in the nscurl output, please change the server side configuration of TLS to make the server side more secure, rather than weakening the configuration in ATS on the client. See the article \"Identifying the Source of Blocked Connections\" in the [Apple Developer Documentation](https://developer.apple.com/documentation/security/preventing_insecure_network_connections/identifying_the_source_of_blocked_connections) for more details.\n\nRefer to section \"Verifying the TLS Settings\" in chapter [Testing Network Communication](../../../Document/0x04f-Testing-Network-Communication.md#verifying-the-tls-settings) for details."
  },
  {
    "id": "MASTG-TEST-0067",
    "title": "Testing Endpoint Identity Verification",
    "category": "Network Communication",
    "description": "Using TLS to transport sensitive information over the network is essential for security. However, encrypting communication between a mobile application and its backend API is not trivial. Developers o...",
    "full_description": "## Overview\n\n## Static Analysis\n\nUsing TLS to transport sensitive information over the network is essential for security. However, encrypting communication between a mobile application and its backend API is not trivial. Developers often decide on simpler but less secure solutions (e.g., those that accept any certificate) to facilitate the development process, and sometimes these weak solutions make it into the production version, potentially exposing users to [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) attacks. See [\"CWE-295: Improper Certificate Validation\"](https://cwe.mitre.org/data/definitions/295.html \"CWE-295: Improper Certificate Validation\").\n\nThese are some of the issues should be addressed:\n\n- Check if the app links against an SDK older than iOS 9.0. In that case ATS is disabled no matter which version of the OS the app runs on.\n- Verify that a certificate comes from a trusted source, i.e. a trusted CA (Certificate Authority).\n- Determine whether the endpoint server presents the right certificate.\n\nMake sure that the hostname and the certificate itself are verified correctly. Examples and common pitfalls are available in the [official Apple documentation](https://developer.apple.com/documentation/security/preventing_insecure_network_connections \"Preventing Insecure Network Connections\").\n\nWe highly recommend supporting static analysis with the dynamic analysis. If you don't have the source code or the app is difficult to reverse engineer, having a solid dynamic analysis strategy can definitely help. In that case you won't know if the app uses low or high-level APIs but you can still test for different trust evaluation scenarios (e.g. \"does the app accept a self-signed certificate?\").\n\n## Static Analysis\n\nUsing TLS to transport sensitive information over the network is essential for security. However, encrypting communication between a mobile application and its backend API is not trivial. Developers often decide on simpler but less secure solutions (e.g., those that accept any certificate) to facilitate the development process, and sometimes these weak solutions make it into the production version, potentially exposing users to [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) attacks. See [\"CWE-295: Improper Certificate Validation\"](https://cwe.mitre.org/data/definitions/295.html \"CWE-295: Improper Certificate Validation\").\n\nThese are some of the issues should be addressed:\n\n- Check if the app links against an SDK older than iOS 9.0. In that case ATS is disabled no matter which version of the OS the app runs on.\n- Verify that a certificate comes from a trusted source, i.e. a trusted CA (Certificate Authority).\n- Determine whether the endpoint server presents the right certificate.\n\nMake sure that the hostname and the certificate itself are verified correctly. Examples and common pitfalls are available in the [official Apple documentation](https://developer.apple.com/documentation/security/preventing_insecure_network_connections \"Preventing Insecure Network Connections\").\n\nWe highly recommend supporting static analysis with the dynamic analysis. If you don't have the source code or the app is difficult to reverse engineer, having a solid dynamic analysis strategy can definitely help. In that case you won't know if the app uses low or high-level APIs but you can still test for different trust evaluation scenarios (e.g. \"does the app accept a self-signed certificate?\").\n\n## Dynamic Analysis\n\nOur test approach is to gradually relax security of the SSL handshake negotiation and check which security mechanisms are enabled.\n\n1. Having Burp set up as a proxy, make sure that there is no certificate added to the trust store (**Settings** -> **General** -> **Profiles**) and that tools like SSL Kill Switch are deactivated. Launch your application and check if you can see the traffic in Burp. Any failures will be reported under 'Alerts' tab. If you can see the traffic, it means that there is no certificate validation performed at all. If however, you can't see any traffic and you have an information about SSL handshake failure, follow the next point.\n2. Now, install the Burp certificate, as explained in [Burp's user documentation](https://support.portswigger.net/customer/portal/articles/1841109-installing-burp-s-ca-certificate-in-an-ios-device \"Installing Burp\\'s CA Certificate in an iOS Device\"). If the handshake is successful and you can see the traffic in Burp, it means that the certificate is validated against the device's trust store, but no pinning is performed.\n\nIf executing the instructions from the previous step doesn't lead to traffic being proxied, it may mean that certificate pinning is actually implemented and all security measures are in place. However, you still need to bypass the pinning in order to test the application. Please refer to @MASTG-TECH-0064 for more information on this."
  },
  {
    "id": "MASTG-TEST-0068",
    "title": "Testing Custom Certificate Stores and Certificate Pinning",
    "category": "Network Communication",
    "description": "Verify that the server certificate is pinned. Pinning can be implemented on various levels in terms of the certificate tree presented by the server:",
    "full_description": "## Overview\n\n## Static Analysis\n\nVerify that the server certificate is pinned. Pinning can be implemented on various levels in terms of the certificate tree presented by the server:\n\n1. Including server's certificate in the application bundle and performing verification on each connection. This requires an update mechanisms whenever the certificate on the server is updated.\n2. Limiting certificate issuer to e.g. one entity and bundling the intermediate CA's public key into the application. In this way we limit the attack surface and have a valid certificate.\n3. Owning and managing your own PKI. The application would contain the intermediate CA's public key. This avoids updating the application every time you change the certificate on the server, due to e.g. expiration. Note that using your own CA would cause the certificate to be self-singed.\n\nThe latest approach recommended by Apple is to specify a pinned CA public key in the `Info.plist` file under App Transport Security Settings. You can find an example in their article [Identity Pinning: How to configure server certificates for your app](https://developer.apple.com/news/?id=g9ejcf8y \"Identity Pinning: How to configure server certificates for your app\").\n\nAnother common approach is to use the [`connection:willSendRequestForAuthenticationChallenge:`](https://developer.apple.com/documentation/foundation/nsurlconnectiondelegate/1414078-connection?language=objc \"connection:willSendRequestForAuthenticationChallenge:\") method of `NSURLConnectionDelegate` to check if the certificate provided by the server is valid and matches the certificate stored in the app. You can find more details in the [HTTPS Server Trust Evaluation](https://developer.apple.com/library/archive/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECNSURLCONNECTION \"HTTPS Server Trust Evaluation\") technical note.\n\nThe following third-party libraries include pinning functionality:\n\n- [TrustKit](https://github.com/datatheorem/TrustKit \"TrustKit\"): here you can pin by setting the public key hashes in your Info.plist or provide the hashes in a dictionary. See their README for more details.\n- [AlamoFire](https://github.com/Alamofire/Alamofire \"AlamoFire\"): here you can define a `ServerTrustPolicy` per domain for which you can define a `PinnedCertificatesTrustEvaluator`. See its [documentation](https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security) for more details.\n- [AFNetworking](https://github.com/AFNetworking/AFNetworking \"AfNetworking\"): here you can set an `AFSecurityPolicy` to configure your pinning.\n\n## Static Analysis\n\nVerify that the server certificate is pinned. Pinning can be implemented on various levels in terms of the certificate tree presented by the server:\n\n1. Including server's certificate in the application bundle and performing verification on each connection. This requires an update mechanisms whenever the certificate on the server is updated.\n2. Limiting certificate issuer to e.g. one entity and bundling the intermediate CA's public key into the application. In this way we limit the attack surface and have a valid certificate.\n3. Owning and managing your own PKI. The application would contain the intermediate CA's public key. This avoids updating the application every time you change the certificate on the server, due to e.g. expiration. Note that using your own CA would cause the certificate to be self-singed.\n\nThe latest approach recommended by Apple is to specify a pinned CA public key in the `Info.plist` file under App Transport Security Settings. You can find an example in their article [Identity Pinning: How to configure server certificates for your app](https://developer.apple.com/news/?id=g9ejcf8y \"Identity Pinning: How to configure server certificates for your app\").\n\nAnother common approach is to use the [`connection:willSendRequestForAuthenticationChallenge:`](https://developer.apple.com/documentation/foundation/nsurlconnectiondelegate/1414078-connection?language=objc \"connection:willSendRequestForAuthenticationChallenge:\") method of `NSURLConnectionDelegate` to check if the certificate provided by the server is valid and matches the certificate stored in the app. You can find more details in the [HTTPS Server Trust Evaluation](https://developer.apple.com/library/archive/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECNSURLCONNECTION \"HTTPS Server Trust Evaluation\") technical note.\n\nThe following third-party libraries include pinning functionality:\n\n- [TrustKit](https://github.com/datatheorem/TrustKit \"TrustKit\"): here you can pin by setting the public key hashes in your Info.plist or provide the hashes in a dictionary. See their README for more details.\n- [AlamoFire](https://github.com/Alamofire/Alamofire \"AlamoFire\"): here you can define a `ServerTrustPolicy` per domain for which you can define a `PinnedCertificatesTrustEvaluator`. See its [documentation](https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security) for more details.\n- [AFNetworking](https://github.com/AFNetworking/AFNetworking \"AfNetworking\"): here you can set an `AFSecurityPolicy` to configure your pinning.\n\n## Dynamic Analysis\n\n### Server certificate pinning\n\nFollow the instructions from the Dynamic Analysis section of @MASTG-TEST-0067. If doing so doesn't lead to traffic being proxied, it may mean that certificate pinning is actually implemented and all security measures are in place. Does the same happen for all domains?\n\nAs a quick smoke test, you can try to bypass certificate pinning using @MASTG-TOOL-0038 as described in @MASTG-TECH-0064. Pinning related APIs being hooked by objection should appear in objection's output.\n\n<img src=\"Images/Chapters/0x06b/ios_ssl_pinning_bypass.png\" width=\"100%\" />\n\nHowever, keep in mind that:\n\n- the APIs might not be complete.\n- if nothing is hooked, that doesn't necessarily mean that the app doesn't implement pinning.\n\nIn both cases, the app or some of its components might implement custom pinning in a way that is [supported by objection](https://github.com/sensepost/objection/blob/master/agent/src/ios/pinning.ts). Please check the static analysis section for specific pinning indicators and more in-depth testing.\n\n### Client certificate validation\n\nSome applications use mTLS (mutual TLS), meaning that the application verifies the server's certificate and the server verifies the client's certificate. You can notice this if there is an error in Burp **Alerts** tab indicating that client failed to negotiate connection.\n\nThere are a couple of things worth noting:\n\n1. The client certificate contains a private key that will be used for the key exchange.\n2. Usually the certificate would also need a password to use (decrypt) it.\n3. The certificate can be stored in the binary itself, data directory or in the Keychain.\n\nThe most common and improper way of using mTLS is to store the client certificate within the application bundle and hardcode the password. This obviously does not bring much security, because all clients will share the same certificate.\n\nSecond way of storing the certificate (and possibly password) is to use the Keychain. Upon first login, the application should download the personal certificate and store it securely in the Keychain.\n\nSometimes applications have one certificate that is hardcoded and use it for the first login and then the personal certificate is downloaded. In this case, check if it's possible to still use the 'generic' certificate to connect to the server.\n\nOnce you have extracted the certificate from the application (e.g. using Frida), add it as client certificate in Burp, and you will be able to intercept the traffic."
  },
  {
    "id": "MASTG-TEST-0056",
    "title": "Determining Whether Sensitive Data Is Exposed via IPC Mechanisms",
    "category": "Platform Interaction",
    "description": "The following section summarizes keywords that you should look for to identify IPC implementations within iOS source code.",
    "full_description": "## Overview\n\n## Static Analysis\n\nThe following section summarizes keywords that you should look for to identify IPC implementations within iOS source code.\n\n### XPC Services\n\nSeveral classes may be used to implement the NSXPCConnection API:\n\n- NSXPCConnection\n- NSXPCInterface\n- NSXPCListener\n- NSXPCListenerEndpoint\n\nYou can set [security attributes](https://www.objc.io/issues/14-mac/xpc/#security-attributes-of-the-connection \"Security Attributes of NSXPCConnection\") for the connection. The attributes should be verified.\n\nCheck for the following two files in the Xcode project for the XPC Services API (which is C-based):\n\n- [`xpc.h`](https://developer.apple.com/documentation/xpc/xpc_services_xpc.h \"xpc.h\")\n- `connection.h`\n\n### Mach Ports\n\nKeywords to look for in low-level implementations:\n\n- mach\\_port\\_t\n- mach\\_msg\\_*\n\nKeywords to look for in high-level implementations (Core Foundation and Foundation wrappers):\n\n- CFMachPort\n- CFMessagePort\n- NSMachPort\n- NSMessagePort\n\n### NSFileCoordinator\n\nKeywords to look for:\n\n- NSFileCoordinator\n\n## Static Analysis\n\nThe following section summarizes keywords that you should look for to identify IPC implementations within iOS source code.\n\n### XPC Services\n\nSeveral classes may be used to implement the NSXPCConnection API:\n\n- NSXPCConnection\n- NSXPCInterface\n- NSXPCListener\n- NSXPCListenerEndpoint\n\nYou can set [security attributes](https://www.objc.io/issues/14-mac/xpc/#security-attributes-of-the-connection \"Security Attributes of NSXPCConnection\") for the connection. The attributes should be verified.\n\nCheck for the following two files in the Xcode project for the XPC Services API (which is C-based):\n\n- [`xpc.h`](https://developer.apple.com/documentation/xpc/xpc_services_xpc.h \"xpc.h\")\n- `connection.h`\n\n### Mach Ports\n\nKeywords to look for in low-level implementations:\n\n- mach\\_port\\_t\n- mach\\_msg\\_*\n\nKeywords to look for in high-level implementations (Core Foundation and Foundation wrappers):\n\n- CFMachPort\n- CFMessagePort\n- NSMachPort\n- NSMessagePort\n\n### NSFileCoordinator\n\nKeywords to look for:\n\n- NSFileCoordinator\n\n## Dynamic Analysis\n\nVerify IPC mechanisms with static analysis of the iOS source code. No iOS tool is currently available to verify IPC usage."
  },
  {
    "id": "MASTG-TEST-0057",
    "title": "Checking for Sensitive Data Disclosed Through the User Interface",
    "category": "Platform Interaction",
    "description": "A text field that masks its input can be configured in two ways:",
    "full_description": "## Overview\n\n## Static Analysis\n\nA text field that masks its input can be configured in two ways:\n\n**Storyboard**\nIn the iOS project's storyboard, navigate to the configuration options for the text field that takes sensitive data. Make sure that the option \"Secure Text Entry\" is selected. If this option is activated, dots are shown in the text field in place of the text input.\n\n**Source Code**\nIf the text field is defined in the source code, make sure that the option [`isSecureTextEntry`](https://developer.apple.com/documentation/uikit/uitextinputtraits/1624427-issecuretextentry \"isSecureTextEntry in Text Field\") is set to \"true\". This option obscures the text input by showing dots.\n\n```swift\nsensitiveTextField.isSecureTextEntry = true\n```\n\n## Static Analysis\n\nA text field that masks its input can be configured in two ways:\n\n**Storyboard**\nIn the iOS project's storyboard, navigate to the configuration options for the text field that takes sensitive data. Make sure that the option \"Secure Text Entry\" is selected. If this option is activated, dots are shown in the text field in place of the text input.\n\n**Source Code**\nIf the text field is defined in the source code, make sure that the option [`isSecureTextEntry`](https://developer.apple.com/documentation/uikit/uitextinputtraits/1624427-issecuretextentry \"isSecureTextEntry in Text Field\") is set to \"true\". This option obscures the text input by showing dots.\n\n```swift\nsensitiveTextField.isSecureTextEntry = true\n```\n\n## Dynamic Analysis\n\nTo determine whether the application leaks any sensitive information to the user interface, run the application and identify components that either show such information or take it as input.\n\nIf the information is masked by, for example, asterisks or dots, the app isn't leaking data to the user interface."
  },
  {
    "id": "MASTG-TEST-0059",
    "title": "Testing Auto-Generated Screenshots for Sensitive Information",
    "category": "Platform Interaction",
    "description": "If you have the source code, search for the [`applicationDidEnterBackground`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622997-applicationdidenterbackground) method to det...",
    "full_description": "## Overview\n\n## Static Analysis\n\nIf you have the source code, search for the [`applicationDidEnterBackground`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622997-applicationdidenterbackground) method to determine whether the application sanitizes the screen before being backgrounded.\n\nThe following is a sample implementation using a default background image (`overlayImage.png`) whenever the application is backgrounded, overriding the current view:\n\nSwift:\n\n```swift\nprivate var backgroundImage: UIImageView?\n\nfunc applicationDidEnterBackground(_ application: UIApplication) {\n    let myBanner = UIImageView(image: #imageLiteral(resourceName: \"overlayImage\"))\n    myBanner.frame = UIScreen.main.bounds\n    backgroundImage = myBanner\n    window?.addSubview(myBanner)\n}\n\nfunc applicationWillEnterForeground(_ application: UIApplication) {\n    backgroundImage?.removeFromSuperview()\n}\n```\n\nObjective-C:\n\n```objectivec\n@property (UIImageView *)backgroundImage;\n\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n    UIImageView *myBanner = [[UIImageView alloc] initWithImage:@\"overlayImage.png\"];\n    self.backgroundImage = myBanner;\n    self.backgroundImage.bounds = UIScreen.mainScreen.bounds;\n    [self.window addSubview:myBanner];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    [self.backgroundImage removeFromSuperview];\n}\n```\n\nThis sets the background image to `overlayImage.png` whenever the application is backgrounded. It prevents sensitive data leaks because `overlayImage.png` will always override the current view.\n\n## Static Analysis\n\nIf you have the source code, search for the [`applicationDidEnterBackground`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622997-applicationdidenterbackground) method to determine whether the application sanitizes the screen before being backgrounded.\n\nThe following is a sample implementation using a default background image (`overlayImage.png`) whenever the application is backgrounded, overriding the current view:\n\nSwift:\n\n```swift\nprivate var backgroundImage: UIImageView?\n\nfunc applicationDidEnterBackground(_ application: UIApplication) {\n    let myBanner = UIImageView(image: #imageLiteral(resourceName: \"overlayImage\"))\n    myBanner.frame = UIScreen.main.bounds\n    backgroundImage = myBanner\n    window?.addSubview(myBanner)\n}\n\nfunc applicationWillEnterForeground(_ application: UIApplication) {\n    backgroundImage?.removeFromSuperview()\n}\n```\n\nObjective-C:\n\n```objectivec\n@property (UIImageView *)backgroundImage;\n\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n    UIImageView *myBanner = [[UIImageView alloc] initWithImage:@\"overlayImage.png\"];\n    self.backgroundImage = myBanner;\n    self.backgroundImage.bounds = UIScreen.mainScreen.bounds;\n    [self.window addSubview:myBanner];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    [self.backgroundImage removeFromSuperview];\n}\n```\n\nThis sets the background image to `overlayImage.png` whenever the application is backgrounded. It prevents sensitive data leaks because `overlayImage.png` will always override the current view.\n\n## Dynamic Analysis\n\nYou can use a _visual approach_ to quickly validate this test case using any iOS device (jailbroken or not):\n\n1. Navigate to an application screen that displays sensitive information, such as a username, an email address, or account details.\n2. Background the application by hitting the **Home** button on your iOS device.\n3. Verify that a default image is shown as the top view element instead of the view containing the sensitive information.\n\nIf required, you may also collect evidence by performing steps 1 to 3 on a jailbroken device or a non-jailbroken device after repackaging the app with the Frida Gadget (@MASTG-TECH-0090). After that, connect to the iOS device with SSH (@MASTG-TECH-0052) or by other means (@MASTG-TECH-0053) and navigate to the Snapshots directory. The location may differ on each iOS version but it's usually inside the app's Library directory. For instance, on iOS 14.5 the Snapshots directory is located at:\n\n```txt\n/var/mobile/Containers/Data/Application/$APP_ID/Library/SplashBoard/Snapshots/sceneID:$APP_NAME-default/\n```\n\nThe screenshots inside that folder should not contain any sensitive information."
  },
  {
    "id": "MASTG-TEST-0069",
    "title": "Testing App Permissions",
    "category": "Platform Interaction",
    "description": "Since iOS 10, these are the main areas which you need to inspect for permissions:",
    "full_description": "## Overview\n\n## Static Analysis\n\nSince iOS 10, these are the main areas which you need to inspect for permissions:\n\n- Purpose Strings in the Info.plist File\n- Code Signing Entitlements File\n- Embedded Provisioning Profile File\n- Entitlements Embedded in the Compiled App Binary\n- Usage of Permissions in Source Code\n\n### Purpose Strings in the Info.plist File\n\nIf having the original source code, you can verify the permissions included in the `Info.plist` file:\n\n- Open the project with Xcode.\n- Find and open the `Info.plist` file in the default editor and search for the keys starting with `\"Privacy -\"`.\n\nYou may switch the view to display the raw values by right-clicking and selecting \"Show Raw Keys/Values\" (this way for example `\"Privacy - Location When In Use Usage Description\"` will turn into `NSLocationWhenInUseUsageDescription`).\n\n<img src=\"Images/Chapters/0x06h/purpose_strings_xcode.png\" width=\"100%\" />\n\nIf only having the IPA:\n\n- Unzip the IPA.\n- The `Info.plist` is located in `Payload/<appname>.app/Info.plist`.\n- Convert it if needed (e.g. `plutil -convert xml1 Info.plist`) as explained in the chapter \"iOS Basic Security Testing\", section \"The Info.plist File\".\n- Inspect all _purpose strings Info.plist keys_, usually ending with `UsageDescription`:\n\n    ```xml\n    <plist version=\"1.0\">\n    <dict>\n        <key>NSLocationWhenInUseUsageDescription</key>\n        <string>Your location is used to provide turn-by-turn directions to your destination.</string>\n    ```\n\nFor each purpose string in the `Info.plist` file, check if the permission makes sense.\n\nFor example, imagine the following lines were extracted from a `Info.plist` file used by a Solitaire game:\n\n```xml\n<key>NSHealthClinicalHealthRecordsShareUsageDescription</key>\n<string>Share your health data with us!</string>\n<key>NSCameraUsageDescription</key>\n<string>We want to access your camera</string>\n```\n\nIt should be suspicious that a regular solitaire game requests this kind of resource access as it probably does not have any need for [accessing the camera](https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW24 \"NSCameraUsageDescription\") nor a [user's health-records](https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW76 \"NSHealthClinicalHealthRecordsShareUsageDescription\").\n\nApart from simply checking if the permissions make sense, further analysis steps might be derived from analyzing purpose strings e.g. if they are related to storage sensitive data. For example, `NSPhotoLibraryUsageDescription` can be considered as a storage permission giving access to files that are outside of the app's sandbox and might also be accessible by other apps. In this case, it should be tested that no sensitive data is being stored there (photos in this case). For other purpose strings like `NSLocationAlwaysUsageDescription`, it must be also considered if the app is storing this data securely. Refer to the \"Testing Data Storage\" chapter for more information and best practices on securely storing sensitive data.\n\n### Embedded Provisioning Profile File\n\nWhen you do not have the original source code, you should analyze the IPA and search inside for the _embedded provisioning profile_ that is usually located in the root app bundle folder (`Payload/<appname>.app/`) under the name `embedded.mobileprovision`.\n\nThis file is not a `.plist`, it is encoded using [Cryptographic Message Syntax](https://en.wikipedia.org/wiki/Cryptographic_Message_Syntax \"Cryptographic Message Syntax\"). On macOS you can [inspect an embedded provisioning profile's entitlements](https://developer.apple.com/library/archive/technotes/tn2415/_index.html#//apple_ref/doc/uid/DTS40016427-CH1-PROFILESENTITLEMENTS \"Inspecting a profile\\'s entitlements\") using the following command:\n\n```bash\nsecurity cms -D -i embedded.mobileprovision\n```\n\nand then search for the Entitlements key region (`<key>Entitlements</key>`).\n\n### Entitlements Embedded in the Compiled App Binary\n\nIf you only have the app's IPA or simply the installed app on a jailbroken device, you normally won't be able to find `.entitlements` files. This could also be the case for the `embedded.mobileprovision` file. Still, you should be able to extract the entitlements property lists from the app binary yourself (see @MASTG-TECH-0111).\n\n### Usage of Permissions in Source Code\n\nAfter having checked the `<appname>.entitlements` file and the `Info.plist` file, it is time to verify how the requested permissions and assigned capabilities are put to use. For this, a source code review should be enough. However, if you don't have the original source code, verifying the use of permissions might be specially challenging as you might need to reverse engineer the app, refer to the \"Dynamic Analysis\" for more details on how to proceed.\n\nWhen doing a source code review, pay attention to:\n\n- whether the _purpose strings_ in the `Info.plist` file match the programmatic implementations.\n- whether the registered capabilities are used in such a way that no confidential information is leaking.\n\nUsers can grant or revoke authorization at any time via \"Settings\", therefore apps normally check the authorization status of a feature before accessing it. This can be done by using dedicated APIs available for many system frameworks that provide access to protected resources.\n\nYou can use the [Apple Developer Documentation](https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc#3037319 \"Check for Authorization\") as a starting point. For example:\n\n- Bluetooth: the [`state`](https://developer.apple.com/documentation/corebluetooth/cbmanager/1648600-state?language=objc \"CBManager state\") property of the [`CBCentralManager`](https://developer.apple.com/documentation/corebluetooth/cbcentralmanager?language=objc \"CBCentralManager\") class is used to check system-authorization status for using Bluetooth peripherals.\n- Location: search for methods of `CLLocationManager`, e.g. [`locationServicesEnabled`](https://developer.apple.com/documentation/corelocation/cllocationmanager/1423648-locationservicesenabled?language=objc \"CLLocationManager locationServicesEnabled\").\n\n    ```default\n    func checkForLocationServices() {\n        if CLLocationManager.locationServicesEnabled() {\n            // Location services are available, so query the user’s location.\n        } else {\n            // Update your app’s UI to show that the location is unavailable.\n        }\n    }\n    ```\n\n    See Table1 in [\"Determining the Availability of Location Services\"](https://developer.apple.com/documentation/corelocation/adding_location_services_to_your_app \"Getting the availability of Core Location services\") (Apple Developer Documentation) for a complete list.\n\nGo through the application searching for usages of these APIs and check what happens to sensitive data that might be obtained from them. For example, it might be stored or transmitted over the network, if this is the case, proper data protection and transport security should be additionally verified.\n\n## Static Analysis\n\nSince iOS 10, these are the main areas which you need to inspect for permissions:\n\n- Purpose Strings in the Info.plist File\n- Code Signing Entitlements File\n- Embedded Provisioning Profile File\n- Entitlements Embedded in the Compiled App Binary\n- Usage of Permissions in Source Code\n\n### Purpose Strings in the Info.plist File\n\nIf having the original source code, you can verify the permissions included in the `Info.plist` file:\n\n- Open the project with Xcode.\n- Find and open the `Info.plist` file in the default editor and search for the keys starting with `\"Privacy -\"`.\n\nYou may switch the view to display the raw values by right-clicking and selecting \"Show Raw Keys/Values\" (this way for example `\"Privacy - Location When In Use Usage Description\"` will turn into `NSLocationWhenInUseUsageDescription`).\n\n<img src=\"Images/Chapters/0x06h/purpose_strings_xcode.png\" width=\"100%\" />\n\nIf only having the IPA:\n\n- Unzip the IPA.\n- The `Info.plist` is located in `Payload/<appname>.app/Info.plist`.\n- Convert it if needed (e.g. `plutil -convert xml1 Info.plist`) as explained in the chapter \"iOS Basic Security Testing\", section \"The Info.plist File\".\n- Inspect all _purpose strings Info.plist keys_, usually ending with `UsageDescription`:\n\n    ```xml\n    <plist version=\"1.0\">\n    <dict>\n        <key>NSLocationWhenInUseUsageDescription</key>\n        <string>Your location is used to provide turn-by-turn directions to your destination.</string>\n    ```\n\nFor each purpose string in the `Info.plist` file, check if the permission makes sense.\n\nFor example, imagine the following lines were extracted from a `Info.plist` file used by a Solitaire game:\n\n```xml\n<key>NSHealthClinicalHealthRecordsShareUsageDescription</key>\n<string>Share your health data with us!</string>\n<key>NSCameraUsageDescription</key>\n<string>We want to access your camera</string>\n```\n\nIt should be suspicious that a regular solitaire game requests this kind of resource access as it probably does not have any need for [accessing the camera](https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW24 \"NSCameraUsageDescription\") nor a [user's health-records](https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW76 \"NSHealthClinicalHealthRecordsShareUsageDescription\").\n\nApart from simply checking if the permissions make sense, further analysis steps might be derived from analyzing purpose strings e.g. if they are related to storage sensitive data. For example, `NSPhotoLibraryUsageDescription` can be considered as a storage permission giving access to files that are outside of the app's sandbox and might also be accessible by other apps. In this case, it should be tested that no sensitive data is being stored there (photos in this case). For other purpose strings like `NSLocationAlwaysUsageDescription`, it must be also considered if the app is storing this data securely. Refer to the \"Testing Data Storage\" chapter for more information and best practices on securely storing sensitive data.\n\n### Embedded Provisioning Profile File\n\nWhen you do not have the original source code, you should analyze the IPA and search inside for the _embedded provisioning profile_ that is usually located in the root app bundle folder (`Payload/<appname>.app/`) under the name `embedded.mobileprovision`.\n\nThis file is not a `.plist`, it is encoded using [Cryptographic Message Syntax](https://en.wikipedia.org/wiki/Cryptographic_Message_Syntax \"Cryptographic Message Syntax\"). On macOS you can [inspect an embedded provisioning profile's entitlements](https://developer.apple.com/library/archive/technotes/tn2415/_index.html#//apple_ref/doc/uid/DTS40016427-CH1-PROFILESENTITLEMENTS \"Inspecting a profile\\'s entitlements\") using the following command:\n\n```bash\nsecurity cms -D -i embedded.mobileprovision\n```\n\nand then search for the Entitlements key region (`<key>Entitlements</key>`).\n\n### Entitlements Embedded in the Compiled App Binary\n\nIf you only have the app's IPA or simply the installed app on a jailbroken device, you normally won't be able to find `.entitlements` files. This could also be the case for the `embedded.mobileprovision` file. Still, you should be able to extract the entitlements property lists from the app binary yourself (see @MASTG-TECH-0111).\n\n### Usage of Permissions in Source Code\n\nAfter having checked the `<appname>.entitlements` file and the `Info.plist` file, it is time to verify how the requested permissions and assigned capabilities are put to use. For this, a source code review should be enough. However, if you don't have the original source code, verifying the use of permissions might be specially challenging as you might need to reverse engineer the app, refer to the \"Dynamic Analysis\" for more details on how to proceed.\n\nWhen doing a source code review, pay attention to:\n\n- whether the _purpose strings_ in the `Info.plist` file match the programmatic implementations.\n- whether the registered capabilities are used in such a way that no confidential information is leaking.\n\nUsers can grant or revoke authorization at any time via \"Settings\", therefore apps normally check the authorization status of a feature before accessing it. This can be done by using dedicated APIs available for many system frameworks that provide access to protected resources.\n\nYou can use the [Apple Developer Documentation](https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc#3037319 \"Check for Authorization\") as a starting point. For example:\n\n- Bluetooth: the [`state`](https://developer.apple.com/documentation/corebluetooth/cbmanager/1648600-state?language=objc \"CBManager state\") property of the [`CBCentralManager`](https://developer.apple.com/documentation/corebluetooth/cbcentralmanager?language=objc \"CBCentralManager\") class is used to check system-authorization status for using Bluetooth peripherals.\n- Location: search for methods of `CLLocationManager`, e.g. [`locationServicesEnabled`](https://developer.apple.com/documentation/corelocation/cllocationmanager/1423648-locationservicesenabled?language=objc \"CLLocationManager locationServicesEnabled\").\n\n    ```default\n    func checkForLocationServices() {\n        if CLLocationManager.locationServicesEnabled() {\n            // Location services are available, so query the user’s location.\n        } else {\n            // Update your app’s UI to show that the location is unavailable.\n        }\n    }\n    ```\n\n    See Table1 in [\"Determining the Availability of Location Services\"](https://developer.apple.com/documentation/corelocation/adding_location_services_to_your_app \"Getting the availability of Core Location services\") (Apple Developer Documentation) for a complete list.\n\nGo through the application searching for usages of these APIs and check what happens to sensitive data that might be obtained from them. For example, it might be stored or transmitted over the network, if this is the case, proper data protection and transport security should be additionally verified.\n\n## Dynamic Analysis\n\nWith help of the static analysis you should already have a list of the included permissions and app capabilities in use. However, as mentioned in \"Source Code Inspection\", spotting the sensitive data and APIs related to those permissions and app capabilities might be a challenging task when you don't have the original source code. Dynamic analysis can help here getting inputs to iterate onto the static analysis.\n\nFollowing an approach like the one presented below should help you spotting the mentioned sensitive data and APIs:\n\n1. Consider the list of permissions / capabilities identified in the static analysis (e.g. `NSLocationWhenInUseUsageDescription`).\n2. Map them to the dedicated APIs available for the corresponding system frameworks (e.g. `Core Location`). You may use the [Apple Developer Documentation](https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc#3037319 \"Check for Authorization\") for this.\n3. Trace classes or specific methods of those APIs (e.g. `CLLocationManager`), for example, using [`frida-trace`](https://www.frida.re/docs/frida-trace/ \"frida-trace\").\n4. Identify which methods are being really used by the app while accessing the related feature (e.g. \"Share your location\").\n5. Get a backtrace for those methods and try to build a call graph.\n\nOnce all methods were identified, you might use this knowledge to reverse engineer the app and try to find out how the data is being handled. While doing that you might spot new methods involved in the process which you can again feed to step 3. above and keep iterating between static and dynamic analysis.\n\nIn the following example we use Telegram to open the share dialog from a chat and frida-trace to identify which methods are being called.\n\nFirst we launch Telegram and start a trace for all methods matching the string \"authorizationStatus\" (this is a general approach because more classes apart from `CLLocationManager` implement this method):\n\n```bash\nfrida-trace -U \"Telegram\" -m \"*[* *authorizationStatus*]\"\n```\n\n> `-U` connects to the USB device. `-m` includes an Objective-C method to the traces. You can use a [glob pattern](https://en.wikipedia.org/wiki/Glob_%28programming%29 \"Glob (programming)\") (e.g. with the \"*\" wildcard, `-m \"*[* *authorizationStatus*]\"` means \"include any Objective-C method of any class containing 'authorizationStatus'\"). Type `frida-trace -h` for more information.\n\nNow we open the share dialog:\n\n<img src=\"Images/Chapters/0x06h/telegram_share_something.png\" width=\"400px\" />\n\nThe following methods are displayed:\n\n```bash\n  1942 ms  +[PHPhotoLibrary authorizationStatus]\n  1959 ms  +[TGMediaAssetsLibrary authorizationStatusSignal]\n  1959 ms     | +[TGMediaAssetsModernLibrary authorizationStatusSignal]\n```\n\nIf we click on **Location**, another method will be traced:\n\n```bash\n 11186 ms  +[CLLocationManager authorizationStatus]\n 11186 ms     | +[CLLocationManager _authorizationStatus]\n 11186 ms     |    | +[CLLocationManager _authorizationStatusForBundleIdentifier:0x0 bundle:0x0]\n```\n\nUse the auto-generated stubs of frida-trace to get more information like the return values and a backtrace. Do the following modifications to the JavaScript file below (the path is relative to the current directory):\n\n```javascript\n\n// __handlers__/__CLLocationManager_authorizationStatus_.js\n\n  onEnter: function (log, args, state) {\n    log(\"+[CLLocationManager authorizationStatus]\");\n    log(\"Called from:\\n\" +\n        Thread.backtrace(this.context, Backtracer.ACCURATE)\n        .map(DebugSymbol.fromAddress).join(\"\\n\\t\") + \"\\n\");\n  },\n  onLeave: function (log, retval, state) {\n    console.log('RET :' + retval.toString());\n  }\n```\n\nClicking again on \"Location\" reveals more information:\n\n```bash\n  3630 ms  -[CLLocationManager init]\n  3630 ms     | -[CLLocationManager initWithEffectiveBundleIdentifier:0x0 bundle:0x0]\n  3634 ms  -[CLLocationManager setDelegate:0x14c9ab000]\n  3641 ms  +[CLLocationManager authorizationStatus]\nRET: 0x4\n  3641 ms  Called from:\n0x1031aa158 TelegramUI!+[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:]\n    0x10337e2c0 TelegramUI!-[TGLocationPickerController initWithContext:intent:]\n    0x101ee93ac TelegramUI!0x1013ac\n```\n\nWe see that `+[CLLocationManager authorizationStatus]` returned `0x4` ([CLAuthorizationStatus.authorizedWhenInUse](https://developer.apple.com/documentation/corelocation/clauthorizationstatus/authorizedwheninuse \"CLAuthorizationStatus.authorizedWhenInUse\")) and was called by `+[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:]`. As we anticipated before, you might use this kind of information as an entry point when reverse engineering the app and from there get inputs (e.g. names of classes or methods) to keep feeding the dynamic analysis.\n\nNext, there is a _visual_ way to inspect the status of some app permissions when using the iPhone/iPad by opening \"Settings\" and scrolling down until you find the app you're interested in. When clicking on it, this will open the \"ALLOW APP_NAME TO ACCESS\" screen. However, not all permissions might be displayed yet. You will have to trigger them in order to be listed on that screen.\n\n<img src=\"Images/Chapters/0x06h/settings_allow_screen.png\" width=\"100%\" />\n\nFor example, in the previous example, the \"Location\" entry was not being listed until we triggered the permission dialogue for the first time. Once we did it, no matter if we allowed the access or not, the the \"Location\" entry will be displayed."
  },
  {
    "id": "MASTG-TEST-0070",
    "title": "Testing Universal Links",
    "category": "Platform Interaction",
    "description": "Testing universal links on a static approach includes doing the following:",
    "full_description": "## Overview\n\n## Static Analysis\n\nTesting universal links on a static approach includes doing the following:\n\n- Checking the Associated Domains entitlement\n- Retrieving the Apple App Site Association file\n- Checking the link receiver method\n- Checking the data handler method\n- Checking if the app is calling other app's universal links\n\n### Checking the Associated Domains Entitlement\n\nUniversal links require the developer to add the Associated Domains entitlement and include in it a list of the domains that the app supports.\n\nIn Xcode, go to the **Capabilities** tab and search for **Associated Domains**. You can also inspect the `.entitlements` file looking for `com.apple.developer.associated-domains`. Each of the domains must be prefixed with `applinks:`, such as `applinks:www.mywebsite.com`.\n\nHere's an example from Telegram's `.entitlements` file:\n\n```xml\n    <key>com.apple.developer.associated-domains</key>\n    <array>\n        <string>applinks:telegram.me</string>\n        <string>applinks:t.me</string>\n    </array>\n```\n\nMore detailed information can be found in the [archived Apple Developer Documentation](https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2 \"Preparing Your App to Handle Universal Links\").\n\nIf you don't have the original source code you can extract them from the MachO file as explained in @MASTG-TECH-0111.\n\n### Retrieving the Apple App Site Association File\n\nTry to retrieve the `apple-app-site-association` file from the server using the associated domains you got from the previous step. This file needs to be accessible via HTTPS, without any redirects, at `https://<domain>/apple-app-site-association` or `https://<domain>/.well-known/apple-app-site-association`.\n\nYou can retrieve it yourself using your browser and navigating to `https://<domain>/apple-app-site-association`, `https://<domain>/.well-known/apple-app-site-association` or using Apple's CDN at `https://app-site-association.cdn-apple.com/a/v1/<domain>`.\n\nAlternatively, you can use the [Apple App Site Association (AASA) Validator](https://branch.io/resources/aasa-validator/ \"AASA\"). After entering the domain, it will display the file, verify it for you and show the results (e.g. if it is not being properly served over HTTPS). See the following example from apple.com `https://www.apple.com/.well-known/apple-app-site-association`:\n\n<img src=\"Images/Chapters/0x06h/apple-app-site-association-file_validation.png\" width=\"100%\" />\n\n```json\n{\n    \"activitycontinuation\": {\n    \"apps\": [\n        \"W74U47NE8E.com.apple.store.Jolly\"\n    ]\n    },\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n            \"appID\": \"W74U47NE8E.com.apple.store.Jolly\",\n            \"paths\": [\n                \"NOT /shop/buy-iphone/*\",\n                \"NOT /us/shop/buy-iphone/*\",\n                \"/xc/*\",\n                \"/shop/buy-*\",\n                \"/shop/product/*\",\n                \"/shop/bag/shared_bag/*\",\n                \"/shop/order/list\",\n                \"/today\",\n                \"/shop/watch/watch-accessories\",\n                \"/shop/watch/watch-accessories/*\",\n                \"/shop/watch/bands\",\n            ] } ] }\n}\n```\n\nThe \"details\" key inside \"applinks\" contains a JSON representation of an array that might contain one or more apps. The \"appID\" should match the \"application-identifier\" key from the app's entitlements. Next, using the \"paths\" key, the developers can specify certain paths to be handled on a per app basis. Some apps, like Telegram use a standalone * (`\"paths\": [\"*\"]`) in order to allow all possible paths. Only if specific areas of the website should **not** be handled by some app, the developer can restrict access by excluding them by prepending a `\"NOT \"` (note the whitespace after the T) to the corresponding path. Also remember that the system will look for matches by following the order of the dictionaries in the array (first match wins).\n\nThis path exclusion mechanism is not to be seen as a security feature but rather as a filter that developer might use to specify which apps open which links. By default, iOS does not open any unverified links.\n\nRemember that universal links verification occurs at installation time. iOS retrieves the AASA file for the declared domains (`applinks`) in its `com.apple.developer.associated-domains` entitlement. iOS will refuse to open those links if the verification did not succeed. Some reasons to fail verification might include:\n\n- The AASA file is not served over HTTPS.\n- The AASA is not available.\n- The `appID`s do not match (this would be the case of a _malicious_ app). iOS would successfully prevent any possible hijacking attacks.\n\n### Checking the Link Receiver Method\n\nIn order to receive links and handle them appropriately, the app delegate has to implement [`application:continueUserActivity:restorationHandler:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623072-application \"UIApplicationDelegate application:continueUserActivity:restorationHandler:\"). If you have the original project try searching for this method.\n\nPlease note that if the app uses [`openURL:options:completionHandler:`](https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc \"UIApplication openURL:options:completionHandler:\") to open a universal link to the app's website, the link won't open in the app. As the call originates from the app, it won't be handled as a universal link.\n\n> From Apple Docs: When iOS launches your app after a user taps a universal link, you receive an `NSUserActivity` object with an `activityType` value of `NSUserActivityTypeBrowsingWeb`. The activity object's `webpageURL` property contains the URL that the user is accessing. The webpage URL property always contains an HTTP or HTTPS URL, and you can use `NSURLComponents` APIs to manipulate the components of the URL. [...] To protect users' privacy and security, you should not use HTTP when you need to transport data; instead, use a secure transport protocol such as HTTPS.\n\nFrom the note above we can highlight that:\n\n- The mentioned `NSUserActivity` object comes from the `continueUserActivity` parameter, as seen in the method above.\n- The scheme of the `webpageURL` must be HTTP or HTTPS (any other scheme should throw an exception). The [`scheme` instance property](https://developer.apple.com/documentation/foundation/urlcomponents/1779624-scheme \"URLComponents scheme\") of `URLComponents` / `NSURLComponents` can be used to verify this.\n\nIf you don't have the original source code you can use @MASTG-TOOL-0073 or @MASTG-TOOL-0129 to search the binary strings for the link receiver method:\n\n```bash\n$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep restorationHan\n\n0x1000deea9 53 52 application:continueUserActivity:restorationHandler:\n```\n\n### Checking the Data Handler Method\n\nYou should check how the received data is validated. Apple [explicitly warns about this](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links \"Handling Universal Links\"):\n\n> Universal links offer a potential attack vector into your app, so make sure to validate all URL parameters and discard any malformed URLs. In addition, limit the available actions to those that do not risk the user's data. For example, do not allow universal links to directly delete content or access sensitive information about the user. When testing your URL-handling code, make sure your test cases include improperly formatted URLs.\n\nAs stated in the [Apple Developer Documentation](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links \"Handling Universal Links\"), when iOS opens an app as the result of a universal link, the app receives an `NSUserActivity` object with an `activityType` value of `NSUserActivityTypeBrowsingWeb`. The activity object's `webpageURL` property contains the HTTP or HTTPS URL that the user accesses. The following example in Swift verifies exactly this before opening the URL:\n\n```default\nfunc application(_ application: UIApplication, continue userActivity: NSUserActivity,\n                 restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n    // ...\n    if userActivity.activityType == NSUserActivityTypeBrowsingWeb, let url = userActivity.webpageURL {\n        application.open(url, options: [:], completionHandler: nil)\n    }\n\n    return true\n}\n```\n\nIn addition, remember that if the URL includes parameters, they should not be trusted before being carefully sanitized and validated (even when coming from trusted domain). For example, they might have been spoofed by an attacker or might include malformed data. If that is the case, the whole URL and therefore the universal link request must be discarded.\n\nThe `NSURLComponents` API can be used to parse and manipulate the components of the URL. This can be also part of the method `application:continueUserActivity:restorationHandler:` itself or might occur on a separate method being called from it. The following [example](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links#3001935 \"An example of handling a universal link\") demonstrates this:\n\n```default\nfunc application(_ application: UIApplication,\n                 continue userActivity: NSUserActivity,\n                 restorationHandler: @escaping ([Any]?) -> Void) -> Bool {\n    guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,\n        let incomingURL = userActivity.webpageURL,\n        let components = NSURLComponents(url: incomingURL, resolvingAgainstBaseURL: true),\n        let path = components.path,\n        let params = components.queryItems else {\n        return false\n    }\n\n    if let albumName = params.first(where: { $0.name == \"albumname\" })?.value,\n        let photoIndex = params.first(where: { $0.name == \"index\" })?.value {\n        // Interact with album name and photo index\n\n        return true\n\n    } else {\n        // Handle when album and/or album name or photo index missing\n\n        return false\n    }\n}\n```\n\nFinally, as stated above, be sure to verify that the actions triggered by the URL do not expose sensitive information or risk the user's data on any way.\n\n### Checking if the App is Calling Other App's Universal Links\n\nAn app might be calling other apps via universal links in order to simply trigger some actions or to transfer information, in that case, it should be verified that it is not leaking sensitive information.\n\nIf you have the original source code, you can search it for the `openURL:options: completionHandler:` method and check the data being handled.\n\n> Note that the `openURL:options:completionHandler:` method is not only used to open universal links but also to call custom URL schemes.\n\nThis is an example from the Telegram app:\n\n```default\n}, openUniversalUrl: { url, completion in\n    if #available(iOS 10.0, *) {\n        var parsedUrl = URL(string: url)\n        if let parsed = parsedUrl {\n            if parsed.scheme == nil || parsed.scheme!.isEmpty {\n                parsedUrl = URL(string: \"https://\\(url)\")\n            }\n        }\n\n        if let parsedUrl = parsedUrl {\n            return UIApplication.shared.open(parsedUrl,\n                        options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n                        completionHandler: { value in completion.completion(value)}\n            )\n```\n\nNote how the app adapts the `scheme` to \"https\" before opening it and how it uses the option `UIApplicationOpenURLOptionUniversalLinksOnly: true` that [opens the URL only if the URL is a valid universal link and there is an installed app capable of opening that URL](https://developer.apple.com/documentation/uikit/uiapplicationopenurloptionuniversallinksonly?language=objc \"UIApplicationOpenURLOptionUniversalLinksOnly\").\n\nIf you don't have the original source code, search in the symbols and in the strings of the app binary. For example, we will search for Objective-C methods that contain \"openURL\":\n\n```bash\n$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep openURL\n\n0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:\n0x1000dee71 29 28 application:openURL:options:\n0x1000df2c9 9 8 openURL:\n0x1000df772 35 34 openURL:options:completionHandler:\n```\n\nAs expected, `openURL:options:completionHandler:` is among the ones found (remember that it might be also present because the app opens custom URL schemes). Next, to ensure that no sensitive information is being leaked you'll have to perform dynamic analysis and inspect the data being transmitted. Please refer to @MASTG-TEST-0075 for some examples on hooking and tracing this method.\n\n## Static Analysis\n\nTesting universal links on a static approach includes doing the following:\n\n- Checking the Associated Domains entitlement\n- Retrieving the Apple App Site Association file\n- Checking the link receiver method\n- Checking the data handler method\n- Checking if the app is calling other app's universal links\n\n### Checking the Associated Domains Entitlement\n\nUniversal links require the developer to add the Associated Domains entitlement and include in it a list of the domains that the app supports.\n\nIn Xcode, go to the **Capabilities** tab and search for **Associated Domains**. You can also inspect the `.entitlements` file looking for `com.apple.developer.associated-domains`. Each of the domains must be prefixed with `applinks:`, such as `applinks:www.mywebsite.com`.\n\nHere's an example from Telegram's `.entitlements` file:\n\n```xml\n    <key>com.apple.developer.associated-domains</key>\n    <array>\n        <string>applinks:telegram.me</string>\n        <string>applinks:t.me</string>\n    </array>\n```\n\nMore detailed information can be found in the [archived Apple Developer Documentation](https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2 \"Preparing Your App to Handle Universal Links\").\n\nIf you don't have the original source code you can extract them from the MachO file as explained in @MASTG-TECH-0111.\n\n### Retrieving the Apple App Site Association File\n\nTry to retrieve the `apple-app-site-association` file from the server using the associated domains you got from the previous step. This file needs to be accessible via HTTPS, without any redirects, at `https://<domain>/apple-app-site-association` or `https://<domain>/.well-known/apple-app-site-association`.\n\nYou can retrieve it yourself using your browser and navigating to `https://<domain>/apple-app-site-association`, `https://<domain>/.well-known/apple-app-site-association` or using Apple's CDN at `https://app-site-association.cdn-apple.com/a/v1/<domain>`.\n\nAlternatively, you can use the [Apple App Site Association (AASA) Validator](https://branch.io/resources/aasa-validator/ \"AASA\"). After entering the domain, it will display the file, verify it for you and show the results (e.g. if it is not being properly served over HTTPS). See the following example from apple.com `https://www.apple.com/.well-known/apple-app-site-association`:\n\n<img src=\"Images/Chapters/0x06h/apple-app-site-association-file_validation.png\" width=\"100%\" />\n\n```json\n{\n    \"activitycontinuation\": {\n    \"apps\": [\n        \"W74U47NE8E.com.apple.store.Jolly\"\n    ]\n    },\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n            \"appID\": \"W74U47NE8E.com.apple.store.Jolly\",\n            \"paths\": [\n                \"NOT /shop/buy-iphone/*\",\n                \"NOT /us/shop/buy-iphone/*\",\n                \"/xc/*\",\n                \"/shop/buy-*\",\n                \"/shop/product/*\",\n                \"/shop/bag/shared_bag/*\",\n                \"/shop/order/list\",\n                \"/today\",\n                \"/shop/watch/watch-accessories\",\n                \"/shop/watch/watch-accessories/*\",\n                \"/shop/watch/bands\",\n            ] } ] }\n}\n```\n\nThe \"details\" key inside \"applinks\" contains a JSON representation of an array that might contain one or more apps. The \"appID\" should match the \"application-identifier\" key from the app's entitlements. Next, using the \"paths\" key, the developers can specify certain paths to be handled on a per app basis. Some apps, like Telegram use a standalone * (`\"paths\": [\"*\"]`) in order to allow all possible paths. Only if specific areas of the website should **not** be handled by some app, the developer can restrict access by excluding them by prepending a `\"NOT \"` (note the whitespace after the T) to the corresponding path. Also remember that the system will look for matches by following the order of the dictionaries in the array (first match wins).\n\nThis path exclusion mechanism is not to be seen as a security feature but rather as a filter that developer might use to specify which apps open which links. By default, iOS does not open any unverified links.\n\nRemember that universal links verification occurs at installation time. iOS retrieves the AASA file for the declared domains (`applinks`) in its `com.apple.developer.associated-domains` entitlement. iOS will refuse to open those links if the verification did not succeed. Some reasons to fail verification might include:\n\n- The AASA file is not served over HTTPS.\n- The AASA is not available.\n- The `appID`s do not match (this would be the case of a _malicious_ app). iOS would successfully prevent any possible hijacking attacks.\n\n### Checking the Link Receiver Method\n\nIn order to receive links and handle them appropriately, the app delegate has to implement [`application:continueUserActivity:restorationHandler:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623072-application \"UIApplicationDelegate application:continueUserActivity:restorationHandler:\"). If you have the original project try searching for this method.\n\nPlease note that if the app uses [`openURL:options:completionHandler:`](https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc \"UIApplication openURL:options:completionHandler:\") to open a universal link to the app's website, the link won't open in the app. As the call originates from the app, it won't be handled as a universal link.\n\n> From Apple Docs: When iOS launches your app after a user taps a universal link, you receive an `NSUserActivity` object with an `activityType` value of `NSUserActivityTypeBrowsingWeb`. The activity object's `webpageURL` property contains the URL that the user is accessing. The webpage URL property always contains an HTTP or HTTPS URL, and you can use `NSURLComponents` APIs to manipulate the components of the URL. [...] To protect users' privacy and security, you should not use HTTP when you need to transport data; instead, use a secure transport protocol such as HTTPS.\n\nFrom the note above we can highlight that:\n\n- The mentioned `NSUserActivity` object comes from the `continueUserActivity` parameter, as seen in the method above.\n- The scheme of the `webpageURL` must be HTTP or HTTPS (any other scheme should throw an exception). The [`scheme` instance property](https://developer.apple.com/documentation/foundation/urlcomponents/1779624-scheme \"URLComponents scheme\") of `URLComponents` / `NSURLComponents` can be used to verify this.\n\nIf you don't have the original source code you can use @MASTG-TOOL-0073 or @MASTG-TOOL-0129 to search the binary strings for the link receiver method:\n\n```bash\n$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep restorationHan\n\n0x1000deea9 53 52 application:continueUserActivity:restorationHandler:\n```\n\n### Checking the Data Handler Method\n\nYou should check how the received data is validated. Apple [explicitly warns about this](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links \"Handling Universal Links\"):\n\n> Universal links offer a potential attack vector into your app, so make sure to validate all URL parameters and discard any malformed URLs. In addition, limit the available actions to those that do not risk the user's data. For example, do not allow universal links to directly delete content or access sensitive information about the user. When testing your URL-handling code, make sure your test cases include improperly formatted URLs.\n\nAs stated in the [Apple Developer Documentation](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links \"Handling Universal Links\"), when iOS opens an app as the result of a universal link, the app receives an `NSUserActivity` object with an `activityType` value of `NSUserActivityTypeBrowsingWeb`. The activity object's `webpageURL` property contains the HTTP or HTTPS URL that the user accesses. The following example in Swift verifies exactly this before opening the URL:\n\n```default\nfunc application(_ application: UIApplication, continue userActivity: NSUserActivity,\n                 restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n    // ...\n    if userActivity.activityType == NSUserActivityTypeBrowsingWeb, let url = userActivity.webpageURL {\n        application.open(url, options: [:], completionHandler: nil)\n    }\n\n    return true\n}\n```\n\nIn addition, remember that if the URL includes parameters, they should not be trusted before being carefully sanitized and validated (even when coming from trusted domain). For example, they might have been spoofed by an attacker or might include malformed data. If that is the case, the whole URL and therefore the universal link request must be discarded.\n\nThe `NSURLComponents` API can be used to parse and manipulate the components of the URL. This can be also part of the method `application:continueUserActivity:restorationHandler:` itself or might occur on a separate method being called from it. The following [example](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/handling_universal_links#3001935 \"An example of handling a universal link\") demonstrates this:\n\n```default\nfunc application(_ application: UIApplication,\n                 continue userActivity: NSUserActivity,\n                 restorationHandler: @escaping ([Any]?) -> Void) -> Bool {\n    guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,\n        let incomingURL = userActivity.webpageURL,\n        let components = NSURLComponents(url: incomingURL, resolvingAgainstBaseURL: true),\n        let path = components.path,\n        let params = components.queryItems else {\n        return false\n    }\n\n    if let albumName = params.first(where: { $0.name == \"albumname\" })?.value,\n        let photoIndex = params.first(where: { $0.name == \"index\" })?.value {\n        // Interact with album name and photo index\n\n        return true\n\n    } else {\n        // Handle when album and/or album name or photo index missing\n\n        return false\n    }\n}\n```\n\nFinally, as stated above, be sure to verify that the actions triggered by the URL do not expose sensitive information or risk the user's data on any way.\n\n### Checking if the App is Calling Other App's Universal Links\n\nAn app might be calling other apps via universal links in order to simply trigger some actions or to transfer information, in that case, it should be verified that it is not leaking sensitive information.\n\nIf you have the original source code, you can search it for the `openURL:options: completionHandler:` method and check the data being handled.\n\n> Note that the `openURL:options:completionHandler:` method is not only used to open universal links but also to call custom URL schemes.\n\nThis is an example from the Telegram app:\n\n```default\n}, openUniversalUrl: { url, completion in\n    if #available(iOS 10.0, *) {\n        var parsedUrl = URL(string: url)\n        if let parsed = parsedUrl {\n            if parsed.scheme == nil || parsed.scheme!.isEmpty {\n                parsedUrl = URL(string: \"https://\\(url)\")\n            }\n        }\n\n        if let parsedUrl = parsedUrl {\n            return UIApplication.shared.open(parsedUrl,\n                        options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n                        completionHandler: { value in completion.completion(value)}\n            )\n```\n\nNote how the app adapts the `scheme` to \"https\" before opening it and how it uses the option `UIApplicationOpenURLOptionUniversalLinksOnly: true` that [opens the URL only if the URL is a valid universal link and there is an installed app capable of opening that URL](https://developer.apple.com/documentation/uikit/uiapplicationopenurloptionuniversallinksonly?language=objc \"UIApplicationOpenURLOptionUniversalLinksOnly\").\n\nIf you don't have the original source code, search in the symbols and in the strings of the app binary. For example, we will search for Objective-C methods that contain \"openURL\":\n\n```bash\n$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep openURL\n\n0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:\n0x1000dee71 29 28 application:openURL:options:\n0x1000df2c9 9 8 openURL:\n0x1000df772 35 34 openURL:options:completionHandler:\n```\n\nAs expected, `openURL:options:completionHandler:` is among the ones found (remember that it might be also present because the app opens custom URL schemes). Next, to ensure that no sensitive information is being leaked you'll have to perform dynamic analysis and inspect the data being transmitted. Please refer to @MASTG-TEST-0075 for some examples on hooking and tracing this method.\n\n## Dynamic Analysis\n\nIf an app is implementing universal links, you should have the following outputs from the static analysis:\n\n- the associated domains\n- the Apple App Site Association file\n- the link receiver method\n- the data handler method\n\nYou can use this now to dynamically test them:\n\n- Triggering universal links\n- Identifying valid universal links\n- Tracing the link receiver method\n- Checking how the links are opened\n\n### Triggering Universal Links\n\nUnlike custom URL schemes, unfortunately you cannot test universal links from Safari just by typing them in the search bar directly as this is not allowed by Apple. But you can test them anytime using other apps like the Notes app:\n\n- Open the Notes app and create a new note.\n- Write the links including the domain.\n- Leave the editing mode in the Notes app.\n- Long press the links to open them (remember that a standard click triggers the default option).\n\n> To do it from Safari you will have to find an existing link on a website that once clicked, it will be recognized as a Universal Link. This can be a bit time consuming.\n\nAlternatively you can also use Frida for this, see @MASTG-TEST-0075 for more details.\n\n### Identifying Valid Universal Links\n\nFirst of all we will see the difference between opening an allowed Universal Link and one that shouldn't be allowed.\n\nFrom the `apple-app-site-association` of apple.com we have seen above we chose the following paths:\n\n```default\n\"paths\": [\n    \"NOT /shop/buy-iphone/*\",\n    ...\n    \"/today\",\n```\n\nOne of them should offer the \"Open in app\" option and the other should not.\n\nIf we long press on the first one (`http://www.apple.com/shop/buy-iphone/iphone-xr`) it only offers the option to open it (in the browser).\n\n<img src=\"Images/Chapters/0x06h/forbidden_universal_link.png\" width=\"400px\" />\n\nIf we long press on the second (`http://www.apple.com/today`) it shows options to open it in Safari and in \"Apple Store\":\n\n<img src=\"Images/Chapters/0x06h/allowed_universal_link.png\" width=\"400px\" />\n\n> Note that there is a difference between a click and a long press. Once we long press a link and select an option, e.g. \"Open in Safari\", this will become the default option for all future clicks until we long press again and select another option.\n\nIf we repeat the process on the method `application:continueUserActivity: restorationHandler:` by either hooking or tracing, we will see how it gets called as soon as we open the allowed universal link. For this you can use for example `frida-trace`:\n\n```bash\nfrida-trace -U \"Apple Store\" -m \"*[* *restorationHandler*]\"\n```\n\n### Tracing the Link Receiver Method\n\nThis section explains how to trace the link receiver method and how to extract additional information. For this example, we will use Telegram, as there are no restrictions in its `apple-app-site-association` file:\n\n```json\n{\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n                \"appID\": \"X834Q8SBVP.org.telegram.TelegramEnterprise\",\n                \"paths\": [\n                    \"*\"\n                ]\n            },\n            {\n                \"appID\": \"C67CF9S4VU.ph.telegra.Telegraph\",\n                \"paths\": [\n                    \"*\"\n                ]\n            },\n            {\n                \"appID\": \"X834Q8SBVP.org.telegram.Telegram-iOS\",\n                \"paths\": [\n                    \"*\"\n                ]\n            }\n        ]\n    }\n}\n```\n\nIn order to open the links we will also use the Notes app and frida-trace with the following pattern:\n\n```bash\nfrida-trace -U Telegram -m \"*[* *restorationHandler*]\"\n```\n\nWrite `https://t.me/addstickers/radare` (found through a quick Internet research) and open it from the Notes app.\n\n<img src=\"Images/Chapters/0x06h/telegram_add_stickers_universal_link.png\" width=\"400px\" />\n\nFirst we let frida-trace generate the stubs in `__handlers__/`:\n\n```bash\n$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\"\nInstrumenting functions...\n-[AppDelegate application:continueUserActivity:restorationHandler:]\n```\n\nYou can see that only one function was found and is being instrumented. Trigger now the universal link and observe the traces.\n\n```bash\n298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n```\n\nYou can observe that the function is in fact being called. You can now add code to the stubs in `__handlers__/` to obtain more details:\n\n```javascript\n// __handlers__/__AppDelegate_application_contin_8e36bbb1.js\n\n  onEnter: function (log, args, state) {\n    log(\"-[AppDelegate application: \" + args[2] + \" continueUserActivity: \" + args[3] +\n                     \" restorationHandler: \" + args[4] + \"]\");\n    log(\"\\tapplication: \" + ObjC.Object(args[2]).toString());\n    log(\"\\tcontinueUserActivity: \" + ObjC.Object(args[3]).toString());\n    log(\"\\t\\twebpageURL: \" + ObjC.Object(args[3]).webpageURL().toString());\n    log(\"\\t\\tactivityType: \" + ObjC.Object(args[3]).activityType().toString());\n    log(\"\\t\\tuserInfo: \" + ObjC.Object(args[3]).userInfo().toString());\n    log(\"\\trestorationHandler: \" +ObjC.Object(args[4]).toString());\n  },\n```\n\nThe new output is:\n\n```bash\n298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n298382 ms  application:<Application: 0x10556b3c0>\n298382 ms  continueUserActivity:<NSUserActivity: 0x1c4237780>\n298382 ms       webpageURL:http://t.me/addstickers/radare\n298382 ms       activityType:NSUserActivityTypeBrowsingWeb\n298382 ms       userInfo:{\n}\n298382 ms  restorationHandler:<__NSStackBlock__: 0x16f27a898>\n```\n\nApart from the function parameters we have added more information by calling some methods from them to get more details, in this case about the `NSUserActivity`. If we look in the [Apple Developer Documentation](https://developer.apple.com/documentation/foundation/nsuseractivity?language=objc \"NSUserActivity\") we can see what else we can call from this object.\n\n### Checking How the Links Are Opened\n\nIf you want to know more about which function actually opens the URL and how the data is actually being handled you should keep investigating.\n\nExtend the previous command in order to find out if there are any other functions involved into opening the URL.\n\n```bash\nfrida-trace -U Telegram -m \"*[* *restorationHandler*]\" -i \"*open*Url*\"\n```\n\n> `-i` includes any method. You can also use a glob pattern here (e.g. `-i \"*open*Url*\"` means \"include any function containing 'open', then 'Url' and something else\")\n\nAgain, we first let frida-trace generate the stubs in `__handlers__/`:\n\n```bash\n$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -i \"*open*Url*\"\nInstrumenting functions...\n-[AppDelegate application:continueUserActivity:restorationHandler:]\n$S10TelegramUI0A19ApplicationBindingsC16openUniversalUrlyySS_AA0ac4OpenG10Completion...\n$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData18application...\n$S10TelegramUI31AuthorizationSequenceControllerC7account7strings7openUrl5apiId0J4HashAC0A4Core19...\n...\n```\n\nNow you can see a long list of functions but we still don't know which ones will be called. Trigger the universal link again and observe the traces.\n\n```bash\n           /* TID 0x303 */\n298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n298619 ms     | $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData\n                18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA\n                14OpenURLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display0\n                10NavigationO0CSgyyctF()\n```\n\nApart from the Objective-C method, now there is one Swift function that is also of your interest.\n\nThere is probably no documentation for that Swift function but you can just demangle its symbol using `swift-demangle` via [`xcrun`](http://www.manpagez.com/man/1/xcrun/ \"xcrun man page\"):\n\n> xcrun can be used invoke Xcode developer tools from the command-line, without having them in the path. In this case it will locate and run swift-demangle, an Xcode tool that demangles Swift symbols.\n\n```bash\n$ xcrun swift-demangle S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData\n18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0\n12PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF\n```\n\nResulting in:\n\n```default\n---> TelegramUI.openExternalUrl(\n    account: TelegramCore.Account, context: TelegramUI.OpenURLContext, url: Swift.String,\n    forceExternal: Swift.Bool, presentationData: TelegramUI.PresentationData,\n    applicationContext: TelegramUI.TelegramApplicationContext,\n    navigationController: Display.NavigationController?, dismissInput: () -> ()) -> ()\n```\n\nThis not only gives you the class (or module) of the method, its name and the parameters but also reveals the parameter types and return type, so in case you need to dive deeper now you know where to start.\n\nFor now we will use this information to properly print the parameters by editing the stub file:\n\n```javascript\n// __handlers__/TelegramUI/_S10TelegramUI15openExternalUrl7_b1a3234e.js\n\n  onEnter: function (log, args, state) {\n\n    log(\"TelegramUI.openExternalUrl(account: TelegramCore.Account,\n        context: TelegramUI.OpenURLContext, url: Swift.String, forceExternal: Swift.Bool,\n        presentationData: TelegramUI.PresentationData,\n        applicationContext: TelegramUI.TelegramApplicationContext,\n        navigationController: Display.NavigationController?, dismissInput: () -> ()) -> ()\");\n    log(\"\\taccount: \" + ObjC.Object(args[0]).toString());\n    log(\"\\tcontext: \" + ObjC.Object(args[1]).toString());\n    log(\"\\turl: \" + ObjC.Object(args[2]).toString());\n    log(\"\\tpresentationData: \" + args[3]);\n    log(\"\\tapplicationContext: \" + ObjC.Object(args[4]).toString());\n    log(\"\\tnavigationController: \" + ObjC.Object(args[5]).toString());\n  },\n```\n\nThis way, the next time we run it we get a much more detailed output:\n\n```bash\n298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n298382 ms  application:<Application: 0x10556b3c0>\n298382 ms  continueUserActivity:<NSUserActivity: 0x1c4237780>\n298382 ms       webpageURL:http://t.me/addstickers/radare\n298382 ms       activityType:NSUserActivityTypeBrowsingWeb\n298382 ms       userInfo:{\n}\n298382 ms  restorationHandler:<__NSStackBlock__: 0x16f27a898>\n\n298619 ms     | TelegramUI.openExternalUrl(account: TelegramCore.Account,\ncontext: TelegramUI.OpenURLContext, url: Swift.String, forceExternal: Swift.Bool,\npresentationData: TelegramUI.PresentationData, applicationContext:\nTelegramUI.TelegramApplicationContext, navigationController: Display.NavigationController?,\ndismissInput: () -> ()) -> ()\n298619 ms     |     account: TelegramCore.Account\n298619 ms     |     context: nil\n298619 ms     |     url: http://t.me/addstickers/radare\n298619 ms     |     presentationData: 0x1c4e40fd1\n298619 ms     |     applicationContext: nil\n298619 ms     |     navigationController: TelegramUI.PresentationData\n\n```\n\nThere you can observe the following:\n\n- It calls `application:continueUserActivity:restorationHandler:` from the app delegate as expected.\n- `application:continueUserActivity:restorationHandler:` handles the URL but does not open it, it calls `TelegramUI.openExternalUrl` for that.\n- The URL being opened is `https://t.me/addstickers/radare`.\n\nYou can now keep going and try to trace and verify how the data is being validated. For example, if you have two apps that _communicate_ via universal links you can use this to see if the sending app is leaking sensitive data by hooking these methods in the receiving app. This is especially useful when you don't have the source code as you will be able to retrieve the full URL that you wouldn't see other way as it might be the result of clicking some button or triggering some functionality.\n\nIn some cases, you might find data in `userInfo` of the `NSUserActivity` object. In the previous case there was no data being transferred but it might be the case for other scenarios. To see this, be sure to hook the `userInfo` property or access it directly from the `continueUserActivity` object in your hook (e.g. by adding a line like this `log(\"userInfo:\" + ObjC.Object(args[3]).userInfo().toString());`).\n\n### Final Notes about Universal Links and Handoff\n\nUniversal links and Apple's [Handoff feature](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html#//apple_ref/doc/uid/TP40014338 \"Handoff Fundamentals: About Handoff\") are related:\n\n- Both rely on the same method when receiving data:\n\n```default\napplication:continueUserActivity:restorationHandler:\n```\n\n- Like universal links, the Handoff's Activity Continuation must be declared in the `com.apple.developer.associated-domains` entitlement and in the server's `apple-app-site-association` file (in both cases via the keyword `\"activitycontinuation\":`). See \"Retrieving the Apple App Site Association File\" above for an example.\n\nActually, the previous example in \"Checking How the Links Are Opened\" is very similar to the \"Web Browser-to-Native App Handoff\" scenario described in the [\"Handoff Programming Guide\"](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Handoff/AdoptingHandoff/AdoptingHandoff.html#//apple_ref/doc/uid/TP40014338-CH2-SW10 \"Adopting Handoff: Web Browser-to-Native App\"):\n\n> If the user is using a web browser on the originating device, and the receiving device is an iOS device with a native app that claims the domain portion of the `webpageURL` property, then iOS launches the native app and sends it an `NSUserActivity` object with an `activityType` value of `NSUserActivityTypeBrowsingWeb`. The `webpageURL` property contains the URL the user was visiting, while the `userInfo` dictionary is empty.\n\nIn the detailed output above you can see that `NSUserActivity` object we've received meets exactly the mentioned points:\n\n```bash\n298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n298382 ms  application:<Application: 0x10556b3c0>\n298382 ms  continueUserActivity:<NSUserActivity: 0x1c4237780>\n298382 ms       webpageURL:http://t.me/addstickers/radare\n298382 ms       activityType:NSUserActivityTypeBrowsingWeb\n298382 ms       userInfo:{\n}\n298382 ms  restorationHandler:<__NSStackBlock__: 0x16f27a898>\n\n```\n\nThis knowledge should help you when testing apps supporting Handoff."
  },
  {
    "id": "MASTG-TEST-0071",
    "title": "Testing UIActivity Sharing",
    "category": "Platform Interaction",
    "description": "When testing `UIActivity` Sharing you should pay special attention to:",
    "full_description": "## Overview\n\n## Static Analysis\n\n### Sending Items\n\nWhen testing `UIActivity` Sharing you should pay special attention to:\n\n- the data (items) being shared,\n- the custom activities,\n- the excluded activity types.\n\nData sharing via `UIActivity` works by creating a `UIActivityViewController` and passing it the desired items (URLs, text, a picture) on [`init(activityItems: applicationActivities:)`](https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622019-init \"UIActivityViewController init(activityItems:applicationActivities:)\").\n\nAs we mentioned before, it is possible to exclude some of the sharing mechanisms via the controller's [`excludedActivityTypes` property](https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622009-excludedactivitytypes \"UIActivityViewController excludedActivityTypes\"). It is highly recommended to do the tests using the latest versions of iOS as the number of activity types that can be excluded can increase. The developers have to be aware of this and **explicitly exclude** the ones that are not appropriate for the app data. Some activity types might not be even documented like \"Create Watch Face\".\n\nIf having the source code, you should take a look at the `UIActivityViewController`:\n\n- Inspect the activities passed to the `init(activityItems:applicationActivities:)` method.\n- Check if it defines custom activities (also being passed to the previous method).\n- Verify the `excludedActivityTypes`, if any.\n\nIf you only have the compiled/installed app, try searching for the previous method and property, for example using @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep -i activityItems\n0x1000df034 45 44 initWithActivityItems:applicationActivities:\n```\n\n### Receiving Items\n\nWhen receiving items, you should check:\n\n- if the app declares _custom document types_ by looking into Exported/Imported UTIs (\"Info\" tab of the Xcode project). The list of all system declared UTIs (Uniform Type Identifiers) can be found in the [archived Apple Developer Documentation](https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259 \"System-Declared Uniform Type Identifiers\").\n- if the app specifies any _document types that it can open_ by looking into Document Types (\"Info\" tab of the Xcode project). If present, they consist of name and one or more UTIs that represent the data type (e.g. \"public.png\" for PNG files). iOS uses this to determine if the app is eligible to open a given document (specifying Exported/Imported UTIs is not enough).\n- if the app properly _verifies the received data_ by looking into the implementation of [`application:openURL:options:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application?language=objc \"UIApplicationDelegate application:openURL:options:\") (or its deprecated version [`UIApplicationDelegate application:openURL:sourceApplication:annotation:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application?language=objc \"UIApplicationDelegate application:openURL:sourceApplication:annotation:\")) in the app delegate.\n\nIf not having the source code you can still take a look into the `Info.plist` file and search for:\n\n- `UTExportedTypeDeclarations`/`UTImportedTypeDeclarations` if the app declares exported/imported _custom document types_.\n- `CFBundleDocumentTypes` to see if the app specifies any _document types that it can open_.\n\nA very complete explanation about the use of these keys can be found [on Stackoverflow](https://stackoverflow.com/questions/21937978/what-are-utimportedtypedeclarations-and-utexportedtypedeclarations-used-for-on-i \"What are UTImportedTypeDeclarations and UTExportedTypeDeclarations used for on iOS?\").\n\nLet's see a real-world example. We will take a File Manager app and take a look at these keys. We used @MASTG-TOOL-0038 here to read the `Info.plist` file.\n\n```bash\nobjection --gadget SomeFileManager run ios plist cat Info.plist\n```\n\n> Note that this is the same as if we would retrieve the IPA from the phone or accessed via e.g. SSH and navigated to the corresponding folder in the IPA / app sandbox. However, with objection we are just _one command away_ from our goal and this can be still considered static analysis.\n\nThe first thing we noticed is that app does not declare any imported custom document types but we could find a couple of exported ones:\n\n```xml\nUTExportedTypeDeclarations =     (\n            {\n        UTTypeConformsTo =             (\n            \"public.data\"\n        );\n        UTTypeDescription = \"SomeFileManager Files\";\n        UTTypeIdentifier = \"com.some.filemanager.custom\";\n        UTTypeTagSpecification =             {\n            \"public.filename-extension\" =                 (\n                ipa,\n                deb,\n                zip,\n                rar,\n                tar,\n                gz,\n                ...\n                key,\n                pem,\n                p12,\n                cer\n            );\n        };\n    }\n);\n```\n\nThe app also declares the document types it opens as we can find the key `CFBundleDocumentTypes`:\n\n```xml\nCFBundleDocumentTypes =     (\n        {\n        ...\n        CFBundleTypeName = \"SomeFileManager Files\";\n        LSItemContentTypes =             (\n            \"public.content\",\n            \"public.data\",\n            \"public.archive\",\n            \"public.item\",\n            \"public.database\",\n            \"public.calendar-event\",\n            ...\n        );\n    }\n);\n```\n\nWe can see that this File Manager will try to open anything that conforms to any of the UTIs listed in `LSItemContentTypes` and it's ready to open files with the extensions listed in `UTTypeTagSpecification/\"public.filename-extension\"`. Please take a note of this because it will be useful if you want to search for vulnerabilities when dealing with the different types of files when performing dynamic analysis.\n\n## Static Analysis\n\n### Sending Items\n\nWhen testing `UIActivity` Sharing you should pay special attention to:\n\n- the data (items) being shared,\n- the custom activities,\n- the excluded activity types.\n\nData sharing via `UIActivity` works by creating a `UIActivityViewController` and passing it the desired items (URLs, text, a picture) on [`init(activityItems: applicationActivities:)`](https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622019-init \"UIActivityViewController init(activityItems:applicationActivities:)\").\n\nAs we mentioned before, it is possible to exclude some of the sharing mechanisms via the controller's [`excludedActivityTypes` property](https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622009-excludedactivitytypes \"UIActivityViewController excludedActivityTypes\"). It is highly recommended to do the tests using the latest versions of iOS as the number of activity types that can be excluded can increase. The developers have to be aware of this and **explicitly exclude** the ones that are not appropriate for the app data. Some activity types might not be even documented like \"Create Watch Face\".\n\nIf having the source code, you should take a look at the `UIActivityViewController`:\n\n- Inspect the activities passed to the `init(activityItems:applicationActivities:)` method.\n- Check if it defines custom activities (also being passed to the previous method).\n- Verify the `excludedActivityTypes`, if any.\n\nIf you only have the compiled/installed app, try searching for the previous method and property, for example using @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep -i activityItems\n0x1000df034 45 44 initWithActivityItems:applicationActivities:\n```\n\n### Receiving Items\n\nWhen receiving items, you should check:\n\n- if the app declares _custom document types_ by looking into Exported/Imported UTIs (\"Info\" tab of the Xcode project). The list of all system declared UTIs (Uniform Type Identifiers) can be found in the [archived Apple Developer Documentation](https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259 \"System-Declared Uniform Type Identifiers\").\n- if the app specifies any _document types that it can open_ by looking into Document Types (\"Info\" tab of the Xcode project). If present, they consist of name and one or more UTIs that represent the data type (e.g. \"public.png\" for PNG files). iOS uses this to determine if the app is eligible to open a given document (specifying Exported/Imported UTIs is not enough).\n- if the app properly _verifies the received data_ by looking into the implementation of [`application:openURL:options:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application?language=objc \"UIApplicationDelegate application:openURL:options:\") (or its deprecated version [`UIApplicationDelegate application:openURL:sourceApplication:annotation:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application?language=objc \"UIApplicationDelegate application:openURL:sourceApplication:annotation:\")) in the app delegate.\n\nIf not having the source code you can still take a look into the `Info.plist` file and search for:\n\n- `UTExportedTypeDeclarations`/`UTImportedTypeDeclarations` if the app declares exported/imported _custom document types_.\n- `CFBundleDocumentTypes` to see if the app specifies any _document types that it can open_.\n\nA very complete explanation about the use of these keys can be found [on Stackoverflow](https://stackoverflow.com/questions/21937978/what-are-utimportedtypedeclarations-and-utexportedtypedeclarations-used-for-on-i \"What are UTImportedTypeDeclarations and UTExportedTypeDeclarations used for on iOS?\").\n\nLet's see a real-world example. We will take a File Manager app and take a look at these keys. We used @MASTG-TOOL-0038 here to read the `Info.plist` file.\n\n```bash\nobjection --gadget SomeFileManager run ios plist cat Info.plist\n```\n\n> Note that this is the same as if we would retrieve the IPA from the phone or accessed via e.g. SSH and navigated to the corresponding folder in the IPA / app sandbox. However, with objection we are just _one command away_ from our goal and this can be still considered static analysis.\n\nThe first thing we noticed is that app does not declare any imported custom document types but we could find a couple of exported ones:\n\n```xml\nUTExportedTypeDeclarations =     (\n            {\n        UTTypeConformsTo =             (\n            \"public.data\"\n        );\n        UTTypeDescription = \"SomeFileManager Files\";\n        UTTypeIdentifier = \"com.some.filemanager.custom\";\n        UTTypeTagSpecification =             {\n            \"public.filename-extension\" =                 (\n                ipa,\n                deb,\n                zip,\n                rar,\n                tar,\n                gz,\n                ...\n                key,\n                pem,\n                p12,\n                cer\n            );\n        };\n    }\n);\n```\n\nThe app also declares the document types it opens as we can find the key `CFBundleDocumentTypes`:\n\n```xml\nCFBundleDocumentTypes =     (\n        {\n        ...\n        CFBundleTypeName = \"SomeFileManager Files\";\n        LSItemContentTypes =             (\n            \"public.content\",\n            \"public.data\",\n            \"public.archive\",\n            \"public.item\",\n            \"public.database\",\n            \"public.calendar-event\",\n            ...\n        );\n    }\n);\n```\n\nWe can see that this File Manager will try to open anything that conforms to any of the UTIs listed in `LSItemContentTypes` and it's ready to open files with the extensions listed in `UTTypeTagSpecification/\"public.filename-extension\"`. Please take a note of this because it will be useful if you want to search for vulnerabilities when dealing with the different types of files when performing dynamic analysis.\n\n## Dynamic Analysis\n\n### Sending Items\n\nThere are three main things you can easily inspect by performing dynamic instrumentation:\n\n- The `activityItems`: an array of the items being shared. They might be of different types, e.g. one string and one picture to be shared via a messaging app.\n- The `applicationActivities`: an array of `UIActivity` objects representing the app's custom services.\n- The `excludedActivityTypes`: an array of the Activity Types that are not supported, e.g. `postToFacebook`.\n\nTo achieve this you can do two things:\n\n- Hook the method we have seen in the static analysis ([`init(activityItems: applicationActivities:)`](https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622019-init \"UIActivityViewController init(activityItems:applicationActivities:)\")) to get the `activityItems` and `applicationActivities`.\n- Find out the excluded activities by hooking [`excludedActivityTypes` property](https://developer.apple.com/documentation/uikit/uiactivityviewcontroller/1622009-excludedactivitytypes \"UIActivityViewController excludedActivityTypes\").\n\nLet's see an example using Telegram to share a picture and a text file. First prepare the hooks, we will use the Frida REPL and write a script for this:\n\n```javascript\nInterceptor.attach(\nObjC.classes.\n    UIActivityViewController['- initWithActivityItems:applicationActivities:'].implementation, {\n  onEnter: function (args) {\n\n    printHeader(args)\n\n    this.initWithActivityItems = ObjC.Object(args[2]);\n    this.applicationActivities = ObjC.Object(args[3]);\n\n    console.log(\"initWithActivityItems: \" + this.initWithActivityItems);\n    console.log(\"applicationActivities: \" + this.applicationActivities);\n\n  },\n  onLeave: function (retval) {\n    printRet(retval);\n  }\n});\n\nInterceptor.attach(\nObjC.classes.UIActivityViewController['- excludedActivityTypes'].implementation, {\n  onEnter: function (args) {\n    printHeader(args)\n  },\n  onLeave: function (retval) {\n    printRet(retval);\n  }\n});\n\nfunction printHeader(args) {\n  console.log(Memory.readUtf8String(args[1]) + \" @ \" + args[1])\n};\n\nfunction printRet(retval) {\n  console.log('RET @ ' + retval + ': ' );\n  try {\n    console.log(new ObjC.Object(retval).toString());\n  } catch (e) {\n    console.log(retval.toString());\n  }\n};\n```\n\nYou can store this as a JavaScript file, e.g. `inspect_send_activity_data.js` and load it like this:\n\n```bash\nfrida -U Telegram -l inspect_send_activity_data.js\n```\n\nNow observe the output when you first share a picture:\n\n```javascript\n[*] initWithActivityItems:applicationActivities: @ 0x18c130c07\ninitWithActivityItems: (\n    \"<UIImage: 0x1c4aa0b40> size {571, 264} orientation 0 scale 1.000000\"\n)\napplicationActivities: nil\nRET @ 0x13cb2b800:\n<UIActivityViewController: 0x13cb2b800>\n\n[*] excludedActivityTypes @ 0x18c0f8429\nRET @ 0x0:\nnil\n```\n\nand then a text file:\n\n```javascript\n[*] initWithActivityItems:applicationActivities: @ 0x18c130c07\ninitWithActivityItems: (\n    \"<QLActivityItemProvider: 0x1c4a30140>\",\n    \"<UIPrintInfo: 0x1c0699a50>\"\n)\napplicationActivities: (\n)\nRET @ 0x13c4bdc00:\n<_UIDICActivityViewController: 0x13c4bdc00>\n\n[*] excludedActivityTypes @ 0x18c0f8429\nRET @ 0x1c001b1d0:\n(\n    \"com.apple.UIKit.activity.MarkupAsPDF\"\n)\n```\n\nYou can see that:\n\n- For the picture, the activity item is a `UIImage` and there are no excluded activities.\n- For the text file there are two different activity items and `com.apple.UIKit.activity. MarkupAsPDF` is excluded.\n\nIn the previous example, there were no custom `applicationActivities` and only one excluded activity. However, to better illustrate what you can expect from other apps we have shared a picture using another app, here you can see a bunch of application activities and excluded activities (output was edited to hide the name of the originating app):\n\n```javascript\n[*] initWithActivityItems:applicationActivities: @ 0x18c130c07\ninitWithActivityItems: (\n    \"<SomeActivityItemProvider: 0x1c04bd580>\"\n)\napplicationActivities: (\n    \"<SomeActionItemActivityAdapter: 0x141de83b0>\",\n    \"<SomeActionItemActivityAdapter: 0x147971cf0>\",\n    \"<SomeOpenInSafariActivity: 0x1479f0030>\",\n    \"<SomeOpenInChromeActivity: 0x1c0c8a500>\"\n)\nRET @ 0x142138a00:\n<SomeActivityViewController: 0x142138a00>\n\n[*] excludedActivityTypes @ 0x18c0f8429\nRET @ 0x14797c3e0:\n(\n    \"com.apple.UIKit.activity.Print\",\n    \"com.apple.UIKit.activity.AssignToContact\",\n    \"com.apple.UIKit.activity.SaveToCameraRoll\",\n    \"com.apple.UIKit.activity.CopyToPasteboard\",\n)\n```\n\n### Receiving Items\n\nAfter performing the static analysis you would know the _document types that the app can open_ and _if it declares any custom document types_ and (part of) the methods involved. You can use this now to test the receiving part:\n\n- _Share_ a file with the app from another app or send it via AirDrop or e-mail. Choose the file so that it will trigger the \"Open with...\" dialogue (that is, there is no default app that will open the file, a PDF for example).\n- Hook `application:openURL:options:` and any other methods that were identified in a previous static analysis.\n- Observe the app behavior.\n- In addition, you could send specific malformed files and/or use a fuzzing technique.\n\nTo illustrate this with an example we have chosen the same real-world file manager app from the static analysis section and followed these steps:\n\n1. Send a PDF file from another Apple device (e.g. a MacBook) via Airdrop.\n2. Wait for the **AirDrop** popup to appear and click on **Accept**.\n3. As there is no default app that will open the file, it switches to the **Open with...** popup. There, we can select the app that will open our file. The next screenshot shows this (we have modified the display name using Frida to conceal the app's real name):\n\n    <img src=\"Images/Chapters/0x06h/airdrop_openwith.png\" width=\"400px\" />\n\n4. After selecting **SomeFileManager** we can see the following:\n\n    ```bash\n    (0x1c4077000)  -[AppDelegate application:openURL:options:]\n    application: <UIApplication: 0x101c00950>\n    openURL: file:///var/mobile/Library/Application%20Support\n                        /Containers/com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf\n    options: {\n        UIApplicationOpenURLOptionsAnnotationKey =     {\n            LSMoveDocumentOnOpen = 1;\n        };\n        UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n        UIApplicationOpenURLOptionsSourceApplicationKey = \"com.apple.sharingd\";\n        \"_UIApplicationOpenURLOptionsSourceProcessHandleKey\" = \"<FBSProcessHandle: 0x1c3a63140;\n                                                                    sharingd:605; valid: YES>\";\n    }\n    0x18c7930d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke\n    ...\n    0x1857cdc34 FrontBoardServices!-[FBSSerialQueue _performNextFromRunLoopSource]\n    RET: 0x1\n    ```\n\nAs you can see, the sending application is `com.apple.sharingd` and the URL's scheme is `file://`. Note that once we select the app that should open the file, the system already moved the file to the corresponding destination, that is to the app's Inbox. The apps are then responsible for deleting the files inside their Inboxes. This app, for example, moves the file to `/var/mobile/Documents/` and removes it from the Inbox.\n\n```bash\n(0x1c002c760)  -[XXFileManager moveItemAtPath:toPath:error:]\nmoveItemAtPath: /var/mobile/Library/Application Support/Containers\n                            /com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf\ntoPath: /var/mobile/Documents/OWASP_MASVS (1).pdf\nerror: 0x16f095bf8\n0x100f24e90 SomeFileManager!-[AppDelegate __handleOpenURL:]\n0x100f25198 SomeFileManager!-[AppDelegate application:openURL:options:]\n0x18c7930d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke\n...\n0x1857cd9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__\nRET: 0x1\n```\n\nIf you look at the stack trace, you can see how `application:openURL:options:` called `__handleOpenURL:`, which called `moveItemAtPath:toPath:error:`. Notice that we have now this information without having the source code for the target app. The first thing that we had to do was clear: hook `application:openURL:options:`. Regarding the rest, we had to think a little bit and come up with methods that we could start tracing and are related to the file manager, for example, all methods containing the strings \"copy\", \"move\", \"remove\", etc. until we have found that the one being called was `moveItemAtPath:toPath:error:`.\n\nA final thing worth noticing here is that this way of handling incoming files is the same for custom URL schemes. Please refer to @MASTG-TEST-0075 for more information."
  },
  {
    "id": "MASTG-TEST-0072",
    "title": "Testing App Extensions",
    "category": "Platform Interaction",
    "description": "The static analysis will take care of:",
    "full_description": "## Overview\n\n## Static Analysis\n\nThe static analysis will take care of:\n\n- Verifying if the app contains app extensions\n- Determining the supported data types\n- Checking data sharing with the containing app\n- Verifying if the app restricts the use of app extensions\n\n### Verifying if the App Contains App Extensions\n\nIf you have the original source code you can search for all occurrences of `NSExtensionPointIdentifier` with Xcode (cmd+shift+f) or take a look into \"Build Phases / Embed App extensions\":\n\n<img src=\"Images/Chapters/0x06h/xcode_embed_app_extensions.png\" width=\"100%\" />\n\nThere you can find the names of all embedded app extensions followed by `.appex`, now you can navigate to the individual app extensions in the project.\n\nIf not having the original source code:\n\nGrep for `NSExtensionPointIdentifier` among all files inside the app bundle (IPA or installed app):\n\n```bash\n$ grep -nr NSExtensionPointIdentifier Payload/Telegram\\ X.app/\nBinary file Payload/Telegram X.app//PlugIns/SiriIntents.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/Share.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/NotificationContent.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/Widget.appex/Info.plist matches\nBinary file Payload/Telegram X.app//Watch/Watch.app/PlugIns/Watch Extension.appex/Info.plist matches\n```\n\nYou can also access per SSH, find the app bundle and list all inside PlugIns (they are placed there by default) or do it with objection:\n\n```bash\nph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # cd PlugIns\n    /var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/\n    Telegram X.app/PlugIns\n\nph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # ls\nNSFileType      Perms  NSFileProtection    Read    Write     Name\n------------  -------  ------------------  ------  -------   -------------------------\nDirectory         493  None                True    False     NotificationContent.appex\nDirectory         493  None                True    False     Widget.appex\nDirectory         493  None                True    False     Share.appex\nDirectory         493  None                True    False     SiriIntents.appex\n```\n\nWe can see now the same four app extensions that we saw in Xcode before.\n\n### Determining the Supported Data Types\n\nThis is important for data being shared with host apps (e.g. via Share or Action Extensions). When the user selects some data type in a host app and it matches the data types define here, the host app will offer the extension. It is worth noticing the difference between this and data sharing via `UIActivity` where we had to define the document types, also using UTIs. An app does not need to have an extension for that. It is possible to share data using only `UIActivity`.\n\nInspect the app extension's `Info.plist` file and search for `NSExtensionActivationRule`. That key specifies the data being supported as well as e.g. maximum of items supported. For example:\n\n```xml\n<key>NSExtensionAttributes</key>\n    <dict>\n        <key>NSExtensionActivationRule</key>\n        <dict>\n            <key>NSExtensionActivationSupportsImageWithMaxCount</key>\n            <integer>10</integer>\n            <key>NSExtensionActivationSupportsMovieWithMaxCount</key>\n            <integer>1</integer>\n            <key>NSExtensionActivationSupportsWebURLWithMaxCount</key>\n            <integer>1</integer>\n        </dict>\n    </dict>\n```\n\nOnly the data types present here and not having `0` as `MaxCount` will be supported. However, more complex filtering is possible by using a so-called predicate string that will evaluate the UTIs given. Please refer to the [Apple App Extension Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW8 \"Declaring Supported Data Types for a Share or Action Extension\") for more detailed information about this.\n\n### Checking Data Sharing with the Containing App\n\nRemember that app extensions and their containing apps do not have direct access to each other's containers. However, data sharing can be enabled. This is done via [\"App Groups\"](https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19 \"Adding an App to an App Group\") and the [`NSUserDefaults`](https://developer.apple.com/documentation/foundation/nsuserdefaults \"NSUserDefaults\") API. See this figure from [Apple App Extension Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW11 \"An app extension's container is distinct from its containing app's container\"):\n\n<img src=\"Images/Chapters/0x06h/app_extensions_container_restrictions.png\" width=\"400px\" />\n\nAs also mentioned in the guide, the app must set up a shared container if the app extension uses the `NSURLSession` class to perform a background upload or download, so that both the extension and its containing app can access the transferred data.\n\n### Verifying if the App Restricts the Use of App Extensions\n\nIt is possible to reject a specific type of app extension by using the following method:\n\n- [`application:shouldAllowExtensionPointIdentifier:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623122-application?language=objc \"UIApplicationDelegate application:shouldAllowExtensionPointIdentifier:\")\n\nHowever, it is currently only possible for \"custom keyboard\" app extensions (and should be verified when testing apps handling sensitive data via the keyboard like e.g. banking apps).\n\n## Static Analysis\n\nThe static analysis will take care of:\n\n- Verifying if the app contains app extensions\n- Determining the supported data types\n- Checking data sharing with the containing app\n- Verifying if the app restricts the use of app extensions\n\n### Verifying if the App Contains App Extensions\n\nIf you have the original source code you can search for all occurrences of `NSExtensionPointIdentifier` with Xcode (cmd+shift+f) or take a look into \"Build Phases / Embed App extensions\":\n\n<img src=\"Images/Chapters/0x06h/xcode_embed_app_extensions.png\" width=\"100%\" />\n\nThere you can find the names of all embedded app extensions followed by `.appex`, now you can navigate to the individual app extensions in the project.\n\nIf not having the original source code:\n\nGrep for `NSExtensionPointIdentifier` among all files inside the app bundle (IPA or installed app):\n\n```bash\n$ grep -nr NSExtensionPointIdentifier Payload/Telegram\\ X.app/\nBinary file Payload/Telegram X.app//PlugIns/SiriIntents.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/Share.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/NotificationContent.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/Widget.appex/Info.plist matches\nBinary file Payload/Telegram X.app//Watch/Watch.app/PlugIns/Watch Extension.appex/Info.plist matches\n```\n\nYou can also access per SSH, find the app bundle and list all inside PlugIns (they are placed there by default) or do it with objection:\n\n```bash\nph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # cd PlugIns\n    /var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/\n    Telegram X.app/PlugIns\n\nph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # ls\nNSFileType      Perms  NSFileProtection    Read    Write     Name\n------------  -------  ------------------  ------  -------   -------------------------\nDirectory         493  None                True    False     NotificationContent.appex\nDirectory         493  None                True    False     Widget.appex\nDirectory         493  None                True    False     Share.appex\nDirectory         493  None                True    False     SiriIntents.appex\n```\n\nWe can see now the same four app extensions that we saw in Xcode before.\n\n### Determining the Supported Data Types\n\nThis is important for data being shared with host apps (e.g. via Share or Action Extensions). When the user selects some data type in a host app and it matches the data types define here, the host app will offer the extension. It is worth noticing the difference between this and data sharing via `UIActivity` where we had to define the document types, also using UTIs. An app does not need to have an extension for that. It is possible to share data using only `UIActivity`.\n\nInspect the app extension's `Info.plist` file and search for `NSExtensionActivationRule`. That key specifies the data being supported as well as e.g. maximum of items supported. For example:\n\n```xml\n<key>NSExtensionAttributes</key>\n    <dict>\n        <key>NSExtensionActivationRule</key>\n        <dict>\n            <key>NSExtensionActivationSupportsImageWithMaxCount</key>\n            <integer>10</integer>\n            <key>NSExtensionActivationSupportsMovieWithMaxCount</key>\n            <integer>1</integer>\n            <key>NSExtensionActivationSupportsWebURLWithMaxCount</key>\n            <integer>1</integer>\n        </dict>\n    </dict>\n```\n\nOnly the data types present here and not having `0` as `MaxCount` will be supported. However, more complex filtering is possible by using a so-called predicate string that will evaluate the UTIs given. Please refer to the [Apple App Extension Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW8 \"Declaring Supported Data Types for a Share or Action Extension\") for more detailed information about this.\n\n### Checking Data Sharing with the Containing App\n\nRemember that app extensions and their containing apps do not have direct access to each other's containers. However, data sharing can be enabled. This is done via [\"App Groups\"](https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW19 \"Adding an App to an App Group\") and the [`NSUserDefaults`](https://developer.apple.com/documentation/foundation/nsuserdefaults \"NSUserDefaults\") API. See this figure from [Apple App Extension Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW11 \"An app extension's container is distinct from its containing app's container\"):\n\n<img src=\"Images/Chapters/0x06h/app_extensions_container_restrictions.png\" width=\"400px\" />\n\nAs also mentioned in the guide, the app must set up a shared container if the app extension uses the `NSURLSession` class to perform a background upload or download, so that both the extension and its containing app can access the transferred data.\n\n### Verifying if the App Restricts the Use of App Extensions\n\nIt is possible to reject a specific type of app extension by using the following method:\n\n- [`application:shouldAllowExtensionPointIdentifier:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623122-application?language=objc \"UIApplicationDelegate application:shouldAllowExtensionPointIdentifier:\")\n\nHowever, it is currently only possible for \"custom keyboard\" app extensions (and should be verified when testing apps handling sensitive data via the keyboard like e.g. banking apps).\n\n## Dynamic Analysis\n\nFor the dynamic analysis we can do the following to gain knowledge without having the source code:\n\n- Inspecting the items being shared\n- Identifying the app extensions involved\n\n### Inspecting the Items Being Shared\n\nFor this we should hook `NSExtensionContext - inputItems` in the data originating app.\n\nFollowing the previous example of Telegram we will now use the \"Share\" button on a text file (that was received from a chat) to create a note in the Notes app with it:\n\n<img src=\"Images/Chapters/0x06h/telegram_share_extension.png\" width=\"400px\" />\n\nIf we run a trace, we'd see the following output:\n\n```bash\n(0x1c06bb420) NSExtensionContext - inputItems\n0x18284355c Foundation!-[NSExtension _itemProviderForPayload:extensionContext:]\n0x1828447a4 Foundation!-[NSExtension _loadItemForPayload:contextIdentifier:completionHandler:]\n0x182973224 Foundation!__NSXPCCONNECTION_IS_CALLING_OUT_TO_EXPORTED_OBJECT_S3__\n0x182971968 Foundation!-[NSXPCConnection _decodeAndInvokeMessageWithEvent:flags:]\n0x182748830 Foundation!message_handler\n0x181ac27d0 libxpc.dylib!_xpc_connection_call_event_handler\n0x181ac0168 libxpc.dylib!_xpc_connection_mach_event\n...\nRET: (\n\"<NSExtensionItem: 0x1c420a540> - userInfo:\n{\n    NSExtensionItemAttachmentsKey =     (\n    \"<NSItemProvider: 0x1c46b30e0> {types = (\\n \\\"public.plain-text\\\",\\n \\\"public.file-url\\\"\\n)}\"\n    );\n}\"\n)\n```\n\nHere we can observe that:\n\n- This occurred under-the-hood via XPC, concretely it is implemented via a `NSXPCConnection` that uses the `libxpc.dylib` Framework.\n- The UTIs included in the `NSItemProvider` are `public.plain-text` and `public.file-url`, the latter being included in `NSExtensionActivationRule` from the [`Info.plist` of the \"Share Extension\" of Telegram](https://github.com/TelegramMessenger/Telegram-iOS/blob/master/Telegram/Share/Info.plist \"Info.plist of the \\'Share Extension\\' of Telegram\").\n\n### Identifying the App Extensions Involved\n\nYou can also find out which app extension is taking care of your the requests and responses by hooking `NSExtension - _plugIn`:\n\nWe run the same example again:\n\n```bash\n(0x1c0370200) NSExtension - _plugIn\nRET: <PKPlugin: 0x1163637f0 ph.telegra.Telegraph.Share(5.3) 5B6DE177-F09B-47DA-90CD-34D73121C785\n1(2) /private/var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35\n/Telegram X.app/PlugIns/Share.appex>\n\n(0x1c0372300)  -[NSExtension _plugIn]\nRET: <PKPlugin: 0x10bff7910 com.apple.mobilenotes.SharingExtension(1.5) 73E4F137-5184-4459-A70A-83\nF90A1414DC 1(2) /private/var/containers/Bundle/Application/5E267B56-F104-41D0-835B-F1DAB9AE076D\n/MobileNotes.app/PlugIns/com.apple.mobilenotes.SharingExtension.appex>\n```\n\nAs you can see there are two app extensions involved:\n\n- `Share.appex` is sending the text file (`public.plain-text` and `public.file-url`).\n- `com.apple.mobilenotes.SharingExtension.appex` which is receiving and will process the text file.\n\nIf you want to learn more about what's happening under-the-hood in terms of XPC, we recommend to take a look at the internal calls from \"libxpc.dylib\". For example you can use [`frida-trace`](https://www.frida.re/docs/frida-trace/ \"frida-trace\") and then dig deeper into the methods that you find more interesting by extending the automatically generated stubs."
  },
  {
    "id": "MASTG-TEST-0073",
    "title": "Testing UIPasteboard",
    "category": "Platform Interaction",
    "description": "The **systemwide general pasteboard** can be obtained by using [`generalPasteboard`](https://developer.apple.com/documentation/uikit/uipasteboard/1622106-generalpasteboard?language=objc \"UIPasteboard ...",
    "full_description": "## Overview\n\n## Static Analysis\n\nThe **systemwide general pasteboard** can be obtained by using [`generalPasteboard`](https://developer.apple.com/documentation/uikit/uipasteboard/1622106-generalpasteboard?language=objc \"UIPasteboard generalPasteboard\"), search the source code or the compiled binary for this method. Using the systemwide general pasteboard should be avoided when dealing with sensitive data.\n\n**Custom pasteboards** can be created with [`pasteboardWithName:create:`](https://developer.apple.com/documentation/uikit/uipasteboard/1622074-pasteboardwithname?language=objc \"UIPasteboard pasteboardWithName:create:\") or [`pasteboardWithUniqueName`](https://developer.apple.com/documentation/uikit/uipasteboard/1622087-pasteboardwithuniquename?language=objc \"UIPasteboard pasteboardWithUniqueName\"). Verify if custom pasteboards are set to be persistent as this is deprecated since iOS 10. A shared container should be used instead.\n\nIn addition, the following can be inspected:\n\n- Check if pasteboards are being removed with [`removePasteboardWithName:`](https://developer.apple.com/documentation/uikit/uipasteboard/1622072-removepasteboardwithname?language=objc \"UIPasteboard removePasteboardWithName:\"), which invalidates an app pasteboard, freeing up all resources used by it (no effect for the general pasteboard).\n- Check if there are excluded pasteboards, there should be a call to `setItems:options:` with the `UIPasteboardOptionLocalOnly` option.\n- Check if there are expiring pasteboards, there should be a call to `setItems:options:` with the `UIPasteboardOptionExpirationDate` option.\n- Check if the app clears the pasteboard items when going to background or when terminating. This is done by some password manager apps trying to restrict sensitive data exposure.\n\n## Static Analysis\n\nThe **systemwide general pasteboard** can be obtained by using [`generalPasteboard`](https://developer.apple.com/documentation/uikit/uipasteboard/1622106-generalpasteboard?language=objc \"UIPasteboard generalPasteboard\"), search the source code or the compiled binary for this method. Using the systemwide general pasteboard should be avoided when dealing with sensitive data.\n\n**Custom pasteboards** can be created with [`pasteboardWithName:create:`](https://developer.apple.com/documentation/uikit/uipasteboard/1622074-pasteboardwithname?language=objc \"UIPasteboard pasteboardWithName:create:\") or [`pasteboardWithUniqueName`](https://developer.apple.com/documentation/uikit/uipasteboard/1622087-pasteboardwithuniquename?language=objc \"UIPasteboard pasteboardWithUniqueName\"). Verify if custom pasteboards are set to be persistent as this is deprecated since iOS 10. A shared container should be used instead.\n\nIn addition, the following can be inspected:\n\n- Check if pasteboards are being removed with [`removePasteboardWithName:`](https://developer.apple.com/documentation/uikit/uipasteboard/1622072-removepasteboardwithname?language=objc \"UIPasteboard removePasteboardWithName:\"), which invalidates an app pasteboard, freeing up all resources used by it (no effect for the general pasteboard).\n- Check if there are excluded pasteboards, there should be a call to `setItems:options:` with the `UIPasteboardOptionLocalOnly` option.\n- Check if there are expiring pasteboards, there should be a call to `setItems:options:` with the `UIPasteboardOptionExpirationDate` option.\n- Check if the app clears the pasteboard items when going to background or when terminating. This is done by some password manager apps trying to restrict sensitive data exposure.\n\n## Dynamic Analysis\n\n### Detect Pasteboard Usage\n\nHook or trace the following:\n\n- `generalPasteboard` for the system-wide general pasteboard.\n- `pasteboardWithName:create:` and `pasteboardWithUniqueName` for custom pasteboards.\n\n### Detect Persistent Pasteboard Usage\n\nHook or trace the deprecated [`setPersistent:`](https://developer.apple.com/documentation/uikit/uipasteboard/1622096-setpersistent?language=objc \"UIPasteboard setPersistent:\") method and verify if it's being called.\n\n### Monitoring and Inspecting Pasteboard Items\n\nTo monitor and inspect pasteboard items at runtime you can follow the instructions from @MASTG-TECH-0134."
  },
  {
    "id": "MASTG-TEST-0075",
    "title": "Testing Custom URL Schemes",
    "category": "Platform Interaction",
    "description": "There are a couple of things that we can do using static analysis. In the next sections we will see the following:",
    "full_description": "## Overview\n\n## Static Analysis\n\nThere are a couple of things that we can do using static analysis. In the next sections we will see the following:\n\n- Testing custom URL schemes registration\n- Testing application query schemes registration\n- Testing URL handling and validation\n- Testing URL requests to other apps\n- Testing for deprecated methods\n\n### Testing Custom URL Schemes Registration\n\nThe first step to test custom URL schemes is finding out whether an application registers any protocol handlers.\n\nIf you have the original source code and want to view registered protocol handlers, simply open the project in Xcode, go to the **Info** tab and open the **URL Types** section as presented in the screenshot below:\n\n<img src=\"Images/Chapters/0x06h/URL_scheme.png\" width=\"100%\" />\n\nAlso in Xcode you can find this by searching for the `CFBundleURLTypes` key in the app's `Info.plist` file (example from @MASTG-APP-0028):\n\n```xml\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLName</key>\n        <string>com.iGoat.myCompany</string>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>iGoat</string>\n        </array>\n    </dict>\n</array>\n```\n\nIn a compiled application (or IPA), registered protocol handlers are found in the file `Info.plist` in the app bundle's root folder. Open it and search for the `CFBundleURLSchemes` key, if present, it should contain an array of strings (example from @MASTG-APP-0028):\n\n```xml\ngrep -A 5 -nri urlsch Info.plist\nInfo.plist:45:    <key>CFBundleURLSchemes</key>\nInfo.plist-46-    <array>\nInfo.plist-47-        <string>iGoat</string>\nInfo.plist-48-    </array>\n```\n\nOnce the URL scheme is registered, other apps can open the app that registered the scheme, and pass parameters by creating appropriately formatted URLs and opening them with the [`UIApplication openURL:options:completionHandler:`](https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc \"UIApplication openURL:options:completionHandler:\") method.\n\nNote from the [App Programming Guide for iOS](https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW7 \"Registering Custom URL Schemes\"):\n\n> If more than one third-party app registers to handle the same URL scheme, there is currently no process for determining which app will be given that scheme.\n\nThis could lead to a URL scheme hijacking attack (see page 136 in [#thiel2]).\n\n### Testing Application Query Schemes Registration\n\nBefore calling the `openURL:options:completionHandler:` method, apps can call [`canOpenURL:`](https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl?language=objc \"UIApplication canOpenURL:\") to verify that the target app is available. However, as this method was being used by malicious app as a way to enumerate installed apps, [from iOS 9.0 the URL schemes passed to it must be also declared](https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl?language=objc#discussion \"Discussion about UIApplication canOpenURL:\") by adding the `LSApplicationQueriesSchemes` key to the app's `Info.plist` file and an array of up to 50 URL schemes.\n\n```xml\n<key>LSApplicationQueriesSchemes</key>\n    <array>\n        <string>url_scheme1</string>\n        <string>url_scheme2</string>\n    </array>\n```\n\n`canOpenURL` will always return `NO` for undeclared schemes, whether or not an appropriate app is installed. However, this restriction only applies to `canOpenURL`.\n\n**The `openURL:options:completionHandler:` method will still open any URL scheme, even if the `LSApplicationQueriesSchemes` array was declared**, and return `YES` / `NO` depending on the result.\n\nAs an example, Telegram declares in its [`Info.plist`](https://github.com/TelegramMessenger/Telegram-iOS/blob/master/Telegram/Telegram-iOS/Info.plist#L233 \"Telegram\\'s Info.plist Line 63\") these Queries Schemes, among others:\n\n```xml\n    <key>LSApplicationQueriesSchemes</key>\n    <array>\n        <string>dbapi-3</string>\n        <string>instagram</string>\n        <string>googledrive</string>\n        <string>comgooglemaps-x-callback</string>\n        <string>foursquare</string>\n        <string>here-location</string>\n        <string>yandexmaps</string>\n        <string>yandexnavi</string>\n        <string>comgooglemaps</string>\n        <string>youtube</string>\n        <string>twitter</string>\n        ...\n```\n\n### Testing URL Handling and Validation\n\nIn order to determine how a URL path is built and validated, if you have the original source code, you can search for the following methods:\n\n- `application:didFinishLaunchingWithOptions:` method or `application:will-FinishLaunchingWithOptions:`: verify how the decision is made and how the information about the URL is retrieved.\n- [`application:openURL:options:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application?language=objc \"UIApplicationDelegate application:openURL:options:\"): verify how the resource is being opened, i.e. how the data is being parsed, verify the [options](https://developer.apple.com/documentation/uikit/uiapplication/openurloptionskey \"UIApplicationOpenURLOptionsKey\"), especially if access by the calling app ([`sourceApplication`](https://developer.apple.com/documentation/uikit/uiapplication/openurloptionskey/1623128-sourceapplication \"UIApplicationOpenURLOptionsSourceApplicationKey\")) should be allowed or denied. The app might also need user permission when using the custom URL scheme.\n\nIn Telegram you will [find four different methods being used](https://github.com/peter-iakovlev/Telegram-iOS/blob/87e0a33ac438c1d702f2a0b75bf21f26866e346f/Telegram-iOS/AppDelegate.swift#L1250 \"Telegram\\'s AppDelegate.swift Line 1250\"):\n\n```default\nfunc application(_ application: UIApplication, open url: URL, sourceApplication: String?) -> Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ application: UIApplication, open url: URL, sourceApplication: String?,\nannotation: Any) -> Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ app: UIApplication, open url: URL,\noptions: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ application: UIApplication, handleOpen url: URL) -> Bool {\n    self.openUrl(url: url)\n    return true\n}\n```\n\nWe can observe some things here:\n\n- The app implements also deprecated methods like [`application:handleOpenURL:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622964-application?language=objc \"UIApplicationDelegate application:handleOpenURL:\") and [`application:openURL:sourceApplication:annotation:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application \"UIApplicationDelegate application:openURL:sourceApplication:annotation:\").\n- The source application is not being verified in any of those methods.\n- All of them call a private `openUrl` method. You can [inspect it](https://github.com/peter-iakovlev/Telegram-iOS/blob/87e0a33ac438c1d702f2a0b75bf21f26866e346f/Telegram-iOS/AppDelegate.swift#L1270 \"Telegram\\'s AppDelegate.swift Line 1270\") to learn more about how the URL request is handled.\n\n### Testing URL Requests to Other Apps\n\nThe method [`openURL:options:completionHandler:`](https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc \"UIApplication openURL:options:completionHandler:\") and the [deprecated `openURL:` method of `UIApplication`](https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl?language=objc \"UIApplication openURL:\") are responsible for opening URLs (i.e. to send requests / make queries to other apps) that may be local to the current app or it may be one that must be provided by a different app. If you have the original source code you can search directly for usages of those methods.\n\nAdditionally, if you are interested into knowing if the app is querying specific services or apps, and if the app is well-known, you can also search for common URL schemes online and include them in your greps. For example, a [quick Google search reveals](https://ios.gadgethacks.com/news/always-updated-list-ios-app-url-scheme-names-0184033/ \"Always-Updated List of iOS App URL Scheme Names\"):\n\n```default\nApple Music - music:// or musics:// or audio-player-event://\nCalendar - calshow:// or x-apple-calevent://\nContacts - contacts://\nDiagnostics - diagnostics:// or diags://\nGarageBand - garageband://\niBooks - ibooks:// or itms-books:// or itms-bookss://\nMail - message:// or mailto://emailaddress\nMessages - sms://phonenumber\nNotes - mobilenotes://\n...\n```\n\nWe search for this method in the Telegram source code, this time without using Xcode, just with `egrep`:\n\n```bash\n$ egrep -nr \"open.*options.*completionHandler\" ./Telegram-iOS/\n\n./AppDelegate.swift:552: return UIApplication.shared.open(parsedUrl,\n    options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n    completionHandler: { value in\n./AppDelegate.swift:556: return UIApplication.shared.open(parsedUrl,\n    options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n    completionHandler: { value in\n```\n\nIf we inspect the results we will see that `openURL:options:completionHandler:` is actually being used for universal links, so we have to keep searching. For example, we can search for `openURL(`:\n\n```bash\n$ egrep -nr \"openURL\\(\" ./Telegram-iOS/\n\n./ApplicationContext.swift:763:  UIApplication.shared.openURL(parsedUrl)\n./ApplicationContext.swift:792:  UIApplication.shared.openURL(URL(\n                                        string: \"https://telegram.org/deactivate?phone=\\(phone)\")!\n                                 )\n./AppDelegate.swift:423:         UIApplication.shared.openURL(url)\n./AppDelegate.swift:538:         UIApplication.shared.openURL(parsedUrl)\n...\n```\n\nIf we inspect those lines we will see how this method is also being used to open \"Settings\" or to open the \"App Store Page\".\n\nWhen just searching for `://` we see:\n\n```default\nif documentUri.hasPrefix(\"file://\"), let path = URL(string: documentUri)?.path {\nif !url.hasPrefix(\"mt-encrypted-file://?\") {\nguard let dict = TGStringUtils.argumentDictionary(inUrlString: String(url[url.index(url.startIndex,\n    offsetBy: \"mt-encrypted-file://?\".count)...])) else {\nparsedUrl = URL(string: \"https://\\(url)\")\nif let url = URL(string: \"itms-apps://itunes.apple.com/app/id\\(appStoreId)\") {\n} else if let url = url as? String, url.lowercased().hasPrefix(\"tg://\") {\n[[WKExtension sharedExtension] openSystemURL:[NSURL URLWithString:[NSString\n    stringWithFormat:@\"tel://%@\", userHandle.data]]];\n```\n\nAfter combining the results of both searches and carefully inspecting the source code we find the following piece of code:\n\n```default\nopenUrl: { url in\n            var parsedUrl = URL(string: url)\n            if let parsed = parsedUrl {\n                if parsed.scheme == nil || parsed.scheme!.isEmpty {\n                    parsedUrl = URL(string: \"https://\\(url)\")\n                }\n                if parsed.scheme == \"tg\" {\n                    return\n                }\n            }\n\n            if let parsedUrl = parsedUrl {\n                UIApplication.shared.openURL(parsedUrl)\n```\n\nBefore opening a URL, the scheme is validated, \"https\" will be added if necessary and it won't open any URL with the \"tg\" scheme. When ready it will use the deprecated `openURL` method.\n\nIf only having the compiled application (IPA) you can still try to identify which URL schemes are being used to query other apps:\n\n- Check if `LSApplicationQueriesSchemes` was declared or search for common URL schemes.\n- Also use the string `://` or build a regular expression to match URLs as the app might not be declaring some schemes.\n\nYou can do that by first verifying that the app binary contains those strings by e.g. using unix `strings` command:\n\n```bash\nstrings <yourapp> | grep \"someURLscheme://\"\n```\n\nor even better, use radare2's `iz/izz` command or rafind2, both will find strings where the unix `strings` command won't. Example from @MASTG-APP-0028:\n\n```bash\n$ r2 -qc izz~iGoat:// iGoat-Swift\n37436 0x001ee610 0x001ee610  23  24 (4.__TEXT.__cstring) ascii iGoat://?contactNumber=\n```\n\n### Testing for Deprecated Methods\n\nSearch for deprecated methods like:\n\n- [`application:handleOpenURL:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622964-application?language=objc \"UIApplicationDelegate application:handleOpenURL:\")\n- [`openURL:`](https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl?language=objc \"UIApplication openURL:\")\n- [`application:openURL:sourceApplication:annotation:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application \"UIApplicationDelegate application:openURL:sourceApplication:annotation:\")\n\nFor example, using @MASTG-TOOL-0129 we find those three:\n\n```bash\n$ rabin2 -zzq Telegram\\ X.app/Telegram\\ X | grep -i \"openurl\"\n\n0x1000d9e90 31 30 UIApplicationOpenURLOptionsKey\n0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:\n0x1000dee71 29 28 application:openURL:options:\n0x1000dee8e 27 26 application:handleOpenURL:\n0x1000df2c9 9 8 openURL:\n0x1000df766 12 11 canOpenURL:\n0x1000df772 35 34 openURL:options:completionHandler:\n...\n```\n\n## Static Analysis\n\nThere are a couple of things that we can do using static analysis. In the next sections we will see the following:\n\n- Testing custom URL schemes registration\n- Testing application query schemes registration\n- Testing URL handling and validation\n- Testing URL requests to other apps\n- Testing for deprecated methods\n\n### Testing Custom URL Schemes Registration\n\nThe first step to test custom URL schemes is finding out whether an application registers any protocol handlers.\n\nIf you have the original source code and want to view registered protocol handlers, simply open the project in Xcode, go to the **Info** tab and open the **URL Types** section as presented in the screenshot below:\n\n<img src=\"Images/Chapters/0x06h/URL_scheme.png\" width=\"100%\" />\n\nAlso in Xcode you can find this by searching for the `CFBundleURLTypes` key in the app's `Info.plist` file (example from @MASTG-APP-0028):\n\n```xml\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLName</key>\n        <string>com.iGoat.myCompany</string>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>iGoat</string>\n        </array>\n    </dict>\n</array>\n```\n\nIn a compiled application (or IPA), registered protocol handlers are found in the file `Info.plist` in the app bundle's root folder. Open it and search for the `CFBundleURLSchemes` key, if present, it should contain an array of strings (example from @MASTG-APP-0028):\n\n```xml\ngrep -A 5 -nri urlsch Info.plist\nInfo.plist:45:    <key>CFBundleURLSchemes</key>\nInfo.plist-46-    <array>\nInfo.plist-47-        <string>iGoat</string>\nInfo.plist-48-    </array>\n```\n\nOnce the URL scheme is registered, other apps can open the app that registered the scheme, and pass parameters by creating appropriately formatted URLs and opening them with the [`UIApplication openURL:options:completionHandler:`](https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc \"UIApplication openURL:options:completionHandler:\") method.\n\nNote from the [App Programming Guide for iOS](https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW7 \"Registering Custom URL Schemes\"):\n\n> If more than one third-party app registers to handle the same URL scheme, there is currently no process for determining which app will be given that scheme.\n\nThis could lead to a URL scheme hijacking attack (see page 136 in [#thiel2]).\n\n### Testing Application Query Schemes Registration\n\nBefore calling the `openURL:options:completionHandler:` method, apps can call [`canOpenURL:`](https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl?language=objc \"UIApplication canOpenURL:\") to verify that the target app is available. However, as this method was being used by malicious app as a way to enumerate installed apps, [from iOS 9.0 the URL schemes passed to it must be also declared](https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl?language=objc#discussion \"Discussion about UIApplication canOpenURL:\") by adding the `LSApplicationQueriesSchemes` key to the app's `Info.plist` file and an array of up to 50 URL schemes.\n\n```xml\n<key>LSApplicationQueriesSchemes</key>\n    <array>\n        <string>url_scheme1</string>\n        <string>url_scheme2</string>\n    </array>\n```\n\n`canOpenURL` will always return `NO` for undeclared schemes, whether or not an appropriate app is installed. However, this restriction only applies to `canOpenURL`.\n\n**The `openURL:options:completionHandler:` method will still open any URL scheme, even if the `LSApplicationQueriesSchemes` array was declared**, and return `YES` / `NO` depending on the result.\n\nAs an example, Telegram declares in its [`Info.plist`](https://github.com/TelegramMessenger/Telegram-iOS/blob/master/Telegram/Telegram-iOS/Info.plist#L233 \"Telegram\\'s Info.plist Line 63\") these Queries Schemes, among others:\n\n```xml\n    <key>LSApplicationQueriesSchemes</key>\n    <array>\n        <string>dbapi-3</string>\n        <string>instagram</string>\n        <string>googledrive</string>\n        <string>comgooglemaps-x-callback</string>\n        <string>foursquare</string>\n        <string>here-location</string>\n        <string>yandexmaps</string>\n        <string>yandexnavi</string>\n        <string>comgooglemaps</string>\n        <string>youtube</string>\n        <string>twitter</string>\n        ...\n```\n\n### Testing URL Handling and Validation\n\nIn order to determine how a URL path is built and validated, if you have the original source code, you can search for the following methods:\n\n- `application:didFinishLaunchingWithOptions:` method or `application:will-FinishLaunchingWithOptions:`: verify how the decision is made and how the information about the URL is retrieved.\n- [`application:openURL:options:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application?language=objc \"UIApplicationDelegate application:openURL:options:\"): verify how the resource is being opened, i.e. how the data is being parsed, verify the [options](https://developer.apple.com/documentation/uikit/uiapplication/openurloptionskey \"UIApplicationOpenURLOptionsKey\"), especially if access by the calling app ([`sourceApplication`](https://developer.apple.com/documentation/uikit/uiapplication/openurloptionskey/1623128-sourceapplication \"UIApplicationOpenURLOptionsSourceApplicationKey\")) should be allowed or denied. The app might also need user permission when using the custom URL scheme.\n\nIn Telegram you will [find four different methods being used](https://github.com/peter-iakovlev/Telegram-iOS/blob/87e0a33ac438c1d702f2a0b75bf21f26866e346f/Telegram-iOS/AppDelegate.swift#L1250 \"Telegram\\'s AppDelegate.swift Line 1250\"):\n\n```default\nfunc application(_ application: UIApplication, open url: URL, sourceApplication: String?) -> Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ application: UIApplication, open url: URL, sourceApplication: String?,\nannotation: Any) -> Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ app: UIApplication, open url: URL,\noptions: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ application: UIApplication, handleOpen url: URL) -> Bool {\n    self.openUrl(url: url)\n    return true\n}\n```\n\nWe can observe some things here:\n\n- The app implements also deprecated methods like [`application:handleOpenURL:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622964-application?language=objc \"UIApplicationDelegate application:handleOpenURL:\") and [`application:openURL:sourceApplication:annotation:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application \"UIApplicationDelegate application:openURL:sourceApplication:annotation:\").\n- The source application is not being verified in any of those methods.\n- All of them call a private `openUrl` method. You can [inspect it](https://github.com/peter-iakovlev/Telegram-iOS/blob/87e0a33ac438c1d702f2a0b75bf21f26866e346f/Telegram-iOS/AppDelegate.swift#L1270 \"Telegram\\'s AppDelegate.swift Line 1270\") to learn more about how the URL request is handled.\n\n### Testing URL Requests to Other Apps\n\nThe method [`openURL:options:completionHandler:`](https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc \"UIApplication openURL:options:completionHandler:\") and the [deprecated `openURL:` method of `UIApplication`](https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl?language=objc \"UIApplication openURL:\") are responsible for opening URLs (i.e. to send requests / make queries to other apps) that may be local to the current app or it may be one that must be provided by a different app. If you have the original source code you can search directly for usages of those methods.\n\nAdditionally, if you are interested into knowing if the app is querying specific services or apps, and if the app is well-known, you can also search for common URL schemes online and include them in your greps. For example, a [quick Google search reveals](https://ios.gadgethacks.com/news/always-updated-list-ios-app-url-scheme-names-0184033/ \"Always-Updated List of iOS App URL Scheme Names\"):\n\n```default\nApple Music - music:// or musics:// or audio-player-event://\nCalendar - calshow:// or x-apple-calevent://\nContacts - contacts://\nDiagnostics - diagnostics:// or diags://\nGarageBand - garageband://\niBooks - ibooks:// or itms-books:// or itms-bookss://\nMail - message:// or mailto://emailaddress\nMessages - sms://phonenumber\nNotes - mobilenotes://\n...\n```\n\nWe search for this method in the Telegram source code, this time without using Xcode, just with `egrep`:\n\n```bash\n$ egrep -nr \"open.*options.*completionHandler\" ./Telegram-iOS/\n\n./AppDelegate.swift:552: return UIApplication.shared.open(parsedUrl,\n    options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n    completionHandler: { value in\n./AppDelegate.swift:556: return UIApplication.shared.open(parsedUrl,\n    options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n    completionHandler: { value in\n```\n\nIf we inspect the results we will see that `openURL:options:completionHandler:` is actually being used for universal links, so we have to keep searching. For example, we can search for `openURL(`:\n\n```bash\n$ egrep -nr \"openURL\\(\" ./Telegram-iOS/\n\n./ApplicationContext.swift:763:  UIApplication.shared.openURL(parsedUrl)\n./ApplicationContext.swift:792:  UIApplication.shared.openURL(URL(\n                                        string: \"https://telegram.org/deactivate?phone=\\(phone)\")!\n                                 )\n./AppDelegate.swift:423:         UIApplication.shared.openURL(url)\n./AppDelegate.swift:538:         UIApplication.shared.openURL(parsedUrl)\n...\n```\n\nIf we inspect those lines we will see how this method is also being used to open \"Settings\" or to open the \"App Store Page\".\n\nWhen just searching for `://` we see:\n\n```default\nif documentUri.hasPrefix(\"file://\"), let path = URL(string: documentUri)?.path {\nif !url.hasPrefix(\"mt-encrypted-file://?\") {\nguard let dict = TGStringUtils.argumentDictionary(inUrlString: String(url[url.index(url.startIndex,\n    offsetBy: \"mt-encrypted-file://?\".count)...])) else {\nparsedUrl = URL(string: \"https://\\(url)\")\nif let url = URL(string: \"itms-apps://itunes.apple.com/app/id\\(appStoreId)\") {\n} else if let url = url as? String, url.lowercased().hasPrefix(\"tg://\") {\n[[WKExtension sharedExtension] openSystemURL:[NSURL URLWithString:[NSString\n    stringWithFormat:@\"tel://%@\", userHandle.data]]];\n```\n\nAfter combining the results of both searches and carefully inspecting the source code we find the following piece of code:\n\n```default\nopenUrl: { url in\n            var parsedUrl = URL(string: url)\n            if let parsed = parsedUrl {\n                if parsed.scheme == nil || parsed.scheme!.isEmpty {\n                    parsedUrl = URL(string: \"https://\\(url)\")\n                }\n                if parsed.scheme == \"tg\" {\n                    return\n                }\n            }\n\n            if let parsedUrl = parsedUrl {\n                UIApplication.shared.openURL(parsedUrl)\n```\n\nBefore opening a URL, the scheme is validated, \"https\" will be added if necessary and it won't open any URL with the \"tg\" scheme. When ready it will use the deprecated `openURL` method.\n\nIf only having the compiled application (IPA) you can still try to identify which URL schemes are being used to query other apps:\n\n- Check if `LSApplicationQueriesSchemes` was declared or search for common URL schemes.\n- Also use the string `://` or build a regular expression to match URLs as the app might not be declaring some schemes.\n\nYou can do that by first verifying that the app binary contains those strings by e.g. using unix `strings` command:\n\n```bash\nstrings <yourapp> | grep \"someURLscheme://\"\n```\n\nor even better, use radare2's `iz/izz` command or rafind2, both will find strings where the unix `strings` command won't. Example from @MASTG-APP-0028:\n\n```bash\n$ r2 -qc izz~iGoat:// iGoat-Swift\n37436 0x001ee610 0x001ee610  23  24 (4.__TEXT.__cstring) ascii iGoat://?contactNumber=\n```\n\n### Testing for Deprecated Methods\n\nSearch for deprecated methods like:\n\n- [`application:handleOpenURL:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622964-application?language=objc \"UIApplicationDelegate application:handleOpenURL:\")\n- [`openURL:`](https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl?language=objc \"UIApplication openURL:\")\n- [`application:openURL:sourceApplication:annotation:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application \"UIApplicationDelegate application:openURL:sourceApplication:annotation:\")\n\nFor example, using @MASTG-TOOL-0129 we find those three:\n\n```bash\n$ rabin2 -zzq Telegram\\ X.app/Telegram\\ X | grep -i \"openurl\"\n\n0x1000d9e90 31 30 UIApplicationOpenURLOptionsKey\n0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:\n0x1000dee71 29 28 application:openURL:options:\n0x1000dee8e 27 26 application:handleOpenURL:\n0x1000df2c9 9 8 openURL:\n0x1000df766 12 11 canOpenURL:\n0x1000df772 35 34 openURL:options:completionHandler:\n...\n```\n\n## Dynamic Analysis\n\nOnce you've identified the custom URL schemes the app has registered, there are several methods that you can use to test them:\n\n- Performing URL requests\n- Identifying and hooking the URL handler method\n- Testing URL schemes source validation\n- Fuzzing URL schemes\n\n### Performing URL Requests\n\n#### Using Safari\n\nTo quickly test one URL scheme you can open the URLs on Safari and observe how the app behaves. For example, if you write `tel://123456789` in the address bar of Safari, a pop up will appear with the _telephone number_ and the options \"Cancel\" and \"Call\". If you press \"Call\" it will open the Phone app and directly make the call.\n\nYou may also know already about pages that trigger custom URL schemes, you can just navigate normally to those pages and Safari will automatically ask when it finds a custom URL scheme.\n\n#### Using the Notes App\n\nAs already seen in \"Triggering Universal Links\", you may use the Notes app and long press the links you've written in order to test custom URL schemes. Remember to exit the editing mode in order to be able to open them. Note that you can click or long press links including custom URL schemes only if the app is installed, if not they won't be highlighted as _clickable links_.\n\n#### Using Frida\n\nIf you simply want an app to open the URL scheme you can do it using Frida. Example using @MASTG-APP-0028:\n\n```javascript\n$ frida -U iGoat-Swift\n\n[iPhone::iGoat-Swift]-> function openURL(url) {\n                            var UIApplication = ObjC.classes.UIApplication.sharedApplication();\n                            var toOpen = ObjC.classes.NSURL.URLWithString_(url);\n                            return UIApplication.openURL_(toOpen);\n                        }\n[iPhone::iGoat-Swift]-> openURL(\"tel://234234234\")\ntrue\n```\n\nIn this example from [Frida CodeShare](https://codeshare.frida.re/@dki/ios-url-scheme-fuzzing/ \"iOS URL Scheme Fuzzing Script\") the author uses the non-public API `LSApplication Workspace.openSensitiveURL:withOptions:` to open the URLs (from the SpringBoard app):\n\n```javascript\nfunction openURL(url) {\n    var w = ObjC.classes.LSApplicationWorkspace.defaultWorkspace();\n    var toOpen = ObjC.classes.NSURL.URLWithString_(url);\n    return w.openSensitiveURL_withOptions_(toOpen, null);\n}\n```\n\n> Note that the use of non-public APIs is not permitted on the App Store, that's why we don't even test these but we are allowed to use them for our dynamic analysis.\n\n### Identifying and Hooking the URL Handler Method\n\nIf you can't look into the original source code you will have to find out yourself which method does the app use to handle the URL scheme requests that it receives. You cannot know if it is an Objective-C method or a Swift one, or even if the app is using a deprecated one.\n\n#### Crafting the Link Yourself and Letting Safari Open It\n\nFor this we will use the [ObjC method observer](https://codeshare.frida.re/@mrmacete/objc-method-observer/ \"ObjC method observer\") from Frida CodeShare, which is an extremely handy script that allows you to quickly observe any collection of methods or classes just by providing a simple pattern.\n\nIn this case we are interested into all methods from the @MASTG-APP-0028 app containing \"openURL\", therefore our pattern will be `*[* *openURL*]`:\n\n- The first asterisk will match all instance `-` and class `+` methods.\n- The second matches all Objective-C classes.\n- The third and forth allow to match any method containing the string `openURL`.\n\n```javascript\n$ frida -U iGoat-Swift --codeshare mrmacete/objc-method-observer\n\n[iPhone::iGoat-Swift]-> observeSomething(\"*[* *openURL*]\");\nObserving  -[_UIDICActivityItemProvider activityViewController:openURLAnnotationForActivityType:]\nObserving  -[CNQuickActionsManager _openURL:]\nObserving  -[SUClientController openURL:]\nObserving  -[SUClientController openURL:inClientWithIdentifier:]\nObserving  -[FBSSystemService openURL:application:options:clientPort:withResult:]\nObserving  -[iGoat_Swift.AppDelegate application:openURL:options:]\nObserving  -[PrefsUILinkLabel openURL:]\nObserving  -[UIApplication openURL:]\nObserving  -[UIApplication _openURL:]\nObserving  -[UIApplication openURL:options:completionHandler:]\nObserving  -[UIApplication openURL:withCompletionHandler:]\nObserving  -[UIApplication _openURL:originatingView:completionHandler:]\nObserving  -[SUApplication application:openURL:sourceApplication:annotation:]\n...\n```\n\nThe list is very long and includes the methods we have already mentioned. If we trigger now one URL scheme, for example \"igoat://\" from Safari and accept to open it in the app we will see the following:\n\n```javascript\n[iPhone::iGoat-Swift]-> (0x1c4038280)  -[iGoat_Swift.AppDelegate application:openURL:options:]\napplication: <UIApplication: 0x101d0fad0>\nopenURL: igoat://\noptions: {\n    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n    UIApplicationOpenURLOptionsSourceApplicationKey = \"com.apple.mobilesafari\";\n}\n0x18b5030d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke\n0x18b502a94 UIKit!-[UIApplication _applicationOpenURLAction:payload:origin:]\n...\n0x1817e1048 libdispatch.dylib!_dispatch_client_callout\n0x1817e86c8 libdispatch.dylib!_dispatch_block_invoke_direct$VARIANT$mp\n0x18453d9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__\n0x18453d698 FrontBoardServices!-[FBSSerialQueue _performNext]\nRET: 0x1\n```\n\nNow we know that:\n\n- The method `-[iGoat_Swift.AppDelegate application:openURL:options:]` gets called. As we have seen before, it is the recommended way and it is not deprecated.\n- It receives our URL as a parameter: `igoat://`.\n- We also can verify the source application: `com.apple.mobilesafari`.\n- We can also know from where it was called, as expected from `-[UIApplication _applicationOpenURLAction:payload:origin:]`.\n- The method returns `0x1` which means `YES` ([the delegate successfully handled the request](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623112-application?language=objc#return-value \"application:openURL:options: Return Value\")).\n\nThe call was successful and we see now that the @MASTG-APP-0028 app was open:\n\n<img src=\"Images/Chapters/0x06h/iGoat_opened_via_url_scheme.jpg\" width=\"400px\" />\n\nNotice that we can also see that the caller (source application) was Safari if we look in the upper-left corner of the screenshot.\n\n#### Dynamically Opening the Link from the App Itself\n\nIt is also interesting to see which other methods get called on the way. To change the result a little bit we will call the same URL scheme from the @MASTG-APP-0028 app itself. We will use again ObjC method observer and the Frida REPL:\n\n```javascript\n$ frida -U iGoat-Swift --codeshare mrmacete/objc-method-observer\n\n[iPhone::iGoat-Swift]-> function openURL(url) {\n                            var UIApplication = ObjC.classes.UIApplication.sharedApplication();\n                            var toOpen = ObjC.classes.NSURL.URLWithString_(url);\n                            return UIApplication.openURL_(toOpen);\n                        }\n\n[iPhone::iGoat-Swift]-> observeSomething(\"*[* *openURL*]\");\n[iPhone::iGoat-Swift]-> openURL(\"iGoat://?contactNumber=123456789&message=hola\")\n\n(0x1c409e460)  -[__NSXPCInterfaceProxy__LSDOpenProtocol openURL:options:completionHandler:]\nopenURL: iGoat://?contactNumber=123456789&message=hola\noptions: nil\ncompletionHandler: <__NSStackBlock__: 0x16fc89c38>\n0x183befbec MobileCoreServices!-[LSApplicationWorkspace openURL:withOptions:error:]\n0x10ba6400c\n...\nRET: nil\n\n...\n\n(0x101d0fad0)  -[UIApplication openURL:]\nopenURL: iGoat://?contactNumber=123456789&message=hola\n0x10a610044\n...\nRET: 0x1\n\ntrue\n(0x1c4038280)  -[iGoat_Swift.AppDelegate application:openURL:options:]\napplication: <UIApplication: 0x101d0fad0>\nopenURL: iGoat://?contactNumber=123456789&message=hola\noptions: {\n    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n    UIApplicationOpenURLOptionsSourceApplicationKey = \"OWASP.iGoat-Swift\";\n}\n0x18b5030d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke\n0x18b502a94 UIKit!-[UIApplication _applicationOpenURLAction:payload:origin:]\n...\nRET: 0x1\n```\n\nThe output is truncated for better readability. This time you see that `UIApplicationOpenURLOptionsSourceApplicationKey` has changed to `OWASP.iGoat-Swift`, which makes sense. In addition, a long list of `openURL`-like methods were called. Considering this information can be very useful for some scenarios as it will help you to decide what you next steps will be, e.g. which method you will hook or tamper with next.\n\n#### Opening a Link by Navigating to a Page and Letting Safari Open It\n\nYou can now test the same situation when clicking on a link contained on a page. Safari will identify and process the URL scheme and choose which action to execute. Opening this link \"<https://telegram.me/fridadotre>\" will trigger this behavior.\n\n<img src=\"Images/Chapters/0x06h/open_in_telegram_via_urlscheme.png\" width=\"400px\" />\n\nFirst of all we let frida-trace generate the stubs for us:\n\n```bash\n$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -i \"*open*Url*\"\n    -m \"*[* *application*URL*]\" -m \"*[* openURL]\"\n\n...\n7310 ms  -[UIApplication _applicationOpenURLAction: 0x1c44ff900 payload: 0x10c5ee4c0 origin: 0x0]\n7311 ms     | -[AppDelegate application: 0x105a59980 openURL: 0x1c46ebb80 options: 0x1c0e222c0]\n7312 ms     | $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData\n            18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14Open\n            URLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF()\n```\n\nNow we can simply modify by hand the stubs we are interested in:\n\n- The Objective-C method `application:openURL:options:`:\n\n    ```javascript\n    // __handlers__/__AppDelegate_application_openUR_3679fadc.js\n\n    onEnter: function (log, args, state) {\n        log(\"-[AppDelegate application: \" + args[2] +\n                    \" openURL: \" + args[3] + \" options: \" + args[4] + \"]\");\n        log(\"\\tapplication :\" + ObjC.Object(args[2]).toString());\n        log(\"\\topenURL :\" + ObjC.Object(args[3]).toString());\n        log(\"\\toptions :\" + ObjC.Object(args[4]).toString());\n    },\n    ```\n\n- The Swift method `$S10TelegramUI15openExternalUrl...`:\n\n    ```javascript\n    // __handlers__/TelegramUI/_S10TelegramUI15openExternalUrl7_b1a3234e.js\n\n    onEnter: function (log, args, state) {\n\n        log(\"TelegramUI.openExternalUrl(account, url, presentationData,\" +\n                    \"applicationContext, navigationController, dismissInput)\");\n        log(\"\\taccount: \" + ObjC.Object(args[1]).toString());\n        log(\"\\turl: \" + ObjC.Object(args[2]).toString());\n        log(\"\\tpresentationData: \" + args[3]);\n        log(\"\\tapplicationContext: \" + ObjC.Object(args[4]).toString());\n        log(\"\\tnavigationController: \" + ObjC.Object(args[5]).toString());\n    },\n    ```\n\nThe next time we run it, we see the following output:\n\n```javascript\n$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -i \"*open*Url*\"\n    -m \"*[* *application*URL*]\" -m \"*[* openURL]\"\n\n  8144 ms  -[UIApplication _applicationOpenURLAction: 0x1c44ff900 payload: 0x10c5ee4c0 origin: 0x0]\n  8145 ms     | -[AppDelegate application: 0x105a59980 openURL: 0x1c46ebb80 options: 0x1c0e222c0]\n  8145 ms     |     application: <Application: 0x105a59980>\n  8145 ms     |     openURL: tg://resolve?domain=fridadotre\n  8145 ms     |     options :{\n                        UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n                        UIApplicationOpenURLOptionsSourceApplicationKey = \"com.apple.mobilesafari\";\n                    }\n  8269 ms     |    | TelegramUI.openExternalUrl(account, url, presentationData,\n                                        applicationContext, navigationController, dismissInput)\n  8269 ms     |    |    account: nil\n  8269 ms     |    |    url: tg://resolve?domain=fridadotre\n  8269 ms     |    |    presentationData: 0x1c4c51741\n  8269 ms     |    |    applicationContext: nil\n  8269 ms     |    |    navigationController: TelegramUI.PresentationData\n  8274 ms     | -[UIApplication applicationOpenURL:0x1c46ebb80]\n```\n\nThere you can observe the following:\n\n- It calls `application:openURL:options:` from the app delegate as expected.\n- The source application is Safari (\"com.apple.mobilesafari\").\n- `application:openURL:options:` handles the URL but does not open it, it calls `TelegramUI.openExternalUrl` for that.\n- The URL being opened is `tg://resolve?domain=fridadotre`.\n- It uses the `tg://` custom URL scheme from Telegram.\n\nIt is interesting to see that if you navigate again to \"<https://telegram.me/fridadotre>\", click on **cancel** and then click on the link offered by the page itself (\"Open in the Telegram app\"), instead of opening via custom URL scheme it will open via universal links.\n\n<img src=\"Images/Chapters/0x06h/open_in_telegram_via_universallink.png\" width=\"400px\" />\n\nYou can try this while tracing both methods:\n\n```javascript\n$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -m \"*[* *application*openURL*options*]\"\n\n// After clicking \"Open\" on the pop-up\n\n 16374 ms  -[AppDelegate application :0x10556b3c0 openURL :0x1c4ae0080 options :0x1c7a28400]\n 16374 ms   application :<Application: 0x10556b3c0>\n 16374 ms   openURL :tg://resolve?domain=fridadotre\n 16374 ms   options :{\n    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n    UIApplicationOpenURLOptionsSourceApplicationKey = \"com.apple.mobilesafari\";\n}\n\n// After clicking \"Cancel\" on the pop-up and \"OPEN\" in the page\n\n406575 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c063d0c0\n                restorationHandler:0x16f27a898]\n406575 ms  application:<Application: 0x10556b3c0>\n406575 ms  continueUserActivity:<NSUserActivity: 0x1c063d0c0>\n406575 ms       webpageURL:https://telegram.me/fridadotre\n406575 ms       activityType:NSUserActivityTypeBrowsingWeb\n406575 ms       userInfo:{\n}\n406575 ms  restorationHandler:<__NSStackBlock__: 0x16f27a898>\n```\n\n#### Testing for Deprecated Methods\n\nSearch for deprecated methods like:\n\n- [`application:handleOpenURL:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622964-application?language=objc \"UIApplicationDelegate application:handleOpenURL:\")\n- [`openURL:`](https://developer.apple.com/documentation/uikit/uiapplication/1622961-openurl?language=objc \"UIApplication openURL:\")\n- [`application:openURL:sourceApplication:annotation:`](https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623073-application \"UIApplicationDelegate application:openURL:sourceApplication:annotation:\")\n\nYou may simply use frida-trace for this, to see if any of those methods are being used.\n\n### Testing URL Schemes Source Validation\n\nA way to discard or confirm validation could be by hooking typical methods that might be used for that. For example [`isEqualToString:`](https://developer.apple.com/documentation/foundation/nsstring/1407803-isequaltostring \"NSString isEqualToString:\"):\n\n```javascript\n// - (BOOL)isEqualToString:(NSString *)aString;\n\nvar isEqualToString = ObjC.classes.NSString[\"- isEqualToString:\"];\n\nInterceptor.attach(isEqualToString.implementation, {\n  onEnter: function(args) {\n    var message = ObjC.Object(args[2]);\n    console.log(message)\n  }\n});\n```\n\nIf we apply this hook and call the URL scheme again:\n\n```javascript\n$ frida -U iGoat-Swift\n\n[iPhone::iGoat-Swift]-> var isEqualToString = ObjC.classes.NSString[\"- isEqualToString:\"];\n\n                    Interceptor.attach(isEqualToString.implementation, {\n                      onEnter: function(args) {\n                        var message = ObjC.Object(args[2]);\n                        console.log(message)\n                      }\n                    });\n{}\n[iPhone::iGoat-Swift]-> openURL(\"iGoat://?contactNumber=123456789&message=hola\")\ntrue\nnil\n```\n\nNothing happens. This tells us already that this method is not being used for that as we cannot find any _app-package-looking_ string like `OWASP.iGoat-Swift` or `com.apple.mobilesafari` between the hook and the text of the tweet. However, consider that we are just probing one method, the app might be using other approach for the comparison.\n\n### Fuzzing URL Schemes\n\nIf the app parses parts of the URL, you can also perform input fuzzing to detect memory corruption bugs.\n\nWhat we have learned above can be now used to build your own fuzzer on the language of your choice, e.g. in Python and call the `openURL` using [Frida's RPC](https://www.frida.re/docs/javascript-api/#rpc \"Frida\\'s RPC (JavaScript API)\"). That fuzzer should do the following:\n\n- Generate payloads.\n- For each of them call `openURL`.\n- Check if the app generates a crash report (`.ips`) in `/private/var/mobile/Library/Logs/CrashReporter`.\n\nThe [FuzzDB](https://github.com/fuzzdb-project/fuzzdb \"FuzzDB\") project offers fuzzing dictionaries that you can use as payloads.\n\n#### Using Frida\n\nDoing this with Frida is pretty easy, as explained in this [blog post](https://grepharder.github.io/blog/0x03_learning_about_universal_links_and_fuzzing_url_schemes_on_ios_with_frida.html \"Learning about Universal Links and Fuzzing URL Schemes on iOS with Frida\") to see an example that fuzzes the @MASTG-APP-0028 app (working on iOS 11.1.2).\n\nBefore running the fuzzer we need the URL schemes as inputs. From the static analysis we know that the iGoat-Swift app supports the following URL scheme and parameters: `iGoat://?contactNumber={0}&message={0}`.\n\n```bash\n$ frida -U SpringBoard -l ios-url-scheme-fuzzing.js\n[iPhone::SpringBoard]-> fuzz(\"iGoat\", \"iGoat://?contactNumber={0}&message={0}\")\nWatching for crashes from iGoat...\nNo logs were moved.\nOpened URL: iGoat://?contactNumber=0&message=0\nOK!\nOpened URL: iGoat://?contactNumber=1&message=1\nOK!\nOpened URL: iGoat://?contactNumber=-1&message=-1\nOK!\nOpened URL: iGoat://?contactNumber=null&message=null\nOK!\nOpened URL: iGoat://?contactNumber=nil&message=nil\nOK!\nOpened URL: iGoat://?contactNumber=99999999999999999999999999999999999\n&message=99999999999999999999999999999999999\nOK!\nOpened URL: iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n...\n&message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n...\nOK!\nOpened URL: iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n...\n&message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n...\nOK!\nOpened URL: iGoat://?contactNumber='&message='\nOK!\nOpened URL: iGoat://?contactNumber=%20d&message=%20d\nOK!\nOpened URL: iGoat://?contactNumber=%20n&message=%20n\nOK!\nOpened URL: iGoat://?contactNumber=%20x&message=%20x\nOK!\nOpened URL: iGoat://?contactNumber=%20s&message=%20s\nOK!\n```\n\nThe script will detect if a crash occurred. On this run it did not detect any crashed but for other apps this could be the case. We would be able to inspect the crash reports in `/private/var/mobile/Library/Logs/CrashReporter` or in `/tmp` if it was moved by the script."
  },
  {
    "id": "MASTG-TEST-0076",
    "title": "Testing iOS WebViews",
    "category": "Platform Interaction",
    "description": "For the static analysis we will focus mostly on the following points having `UIWebView` and `WKWebView` under scope.",
    "full_description": "## Overview\n\n## Static Analysis\n\nFor the static analysis we will focus mostly on the following points having `UIWebView` and `WKWebView` under scope.\n\n- Identifying WebView usage\n- Testing if JavaScript is Enabled\n- Testing for Mixed Content\n- Testing for WebView URI Manipulation\n\n### Identifying WebView Usage\n\nLook out for usages of the above mentioned WebView classes by searching in Xcode.\n\nIn the compiled binary you can search in its symbols or strings, for example using @MASTG-TOOL-0129 like this:\n\n#### UIWebView\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | egrep \"UIWebView$\"\n489 0x0002fee9 0x10002fee9   9  10 (5.__TEXT.__cstring) ascii UIWebView\n896 0x0003c813 0x0003c813  24  25 () ascii @_OBJC_CLASS_$_UIWebView\n1754 0x00059599 0x00059599  23  24 () ascii _OBJC_CLASS_$_UIWebView\n```\n\n#### WKWebView\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | egrep \"WKWebView$\"\n490 0x0002fef3 0x10002fef3   9  10 (5.__TEXT.__cstring) ascii WKWebView\n625 0x00031670 0x100031670  17  18 (5.__TEXT.__cstring) ascii unwindToWKWebView\n904 0x0003c960 0x0003c960  24  25 () ascii @_OBJC_CLASS_$_WKWebView\n1757 0x000595e4 0x000595e4  23  24 () ascii _OBJC_CLASS_$_WKWebView\n```\n\nAlternatively you can also search for known methods of these WebView classes. For example, search for the method used to initialize a WKWebView ([`init(frame:configuration:)`](https://developer.apple.com/documentation/webkit/wkwebview/1414998-init \"WKWebView init(frame:configuration:)\")):\n\n```bash\n$ rabin2 -zzq ./WheresMyBrowser | egrep \"WKWebView.*frame\"\n0x5c3ac 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC\n0x5d97a 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n0x6b5d5 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC\n0x6c3fa 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n```\n\nYou can also demangle it:\n\n```bash\n$ xcrun swift-demangle __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n\n---> @nonobjc __C.WKWebView.init(frame: __C_Synthesized.CGRect,\n                                configuration: __C.WKWebViewConfiguration) -> __C.WKWebView\n```\n\n### Testing if JavaScript is Enabled\n\nFirst of all, remember that JavaScript cannot be disabled for `UIWebView`s.\n\nFor `WKWebView`s, as a best practice, JavaScript should be disabled unless it is explicitly required. To verify that JavaScript was properly disabled search the project for usages of `WKPreferences` and ensure that the [`javaScriptEnabled`](https://developer.apple.com/documentation/webkit/wkpreferences/1536203-javascriptenabled \"WKPreferences javaScriptEnabled\") property is set to `false`:\n\n```default\nlet webPreferences = WKPreferences()\nwebPreferences.javaScriptEnabled = false\n```\n\nIf only having the compiled binary you can search for this in it using @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | grep -i \"javascriptenabled\"\n391 0x0002f2c7 0x10002f2c7  17  18 (4.__TEXT.__objc_methname) ascii javaScriptEnabled\n392 0x0002f2d9 0x10002f2d9  21  22 (4.__TEXT.__objc_methname) ascii setJavaScriptEnabled:\n```\n\nIf user scripts were defined, they will continue running as the `javaScriptEnabled` property won't affect them. See [`WKUserContentController`](https://developer.apple.com/documentation/webkit/wkusercontentcontroller \"WKUserContentController\") and [WKUserScript](https://developer.apple.com/documentation/webkit/wkuserscript \"WKUserScript\") for more information on injecting user scripts to WKWebViews.\n\n### Testing for Mixed Content\n\nIn contrast to `UIWebView`s, when using `WKWebView`s it is possible to detect [mixed content](https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content?hl=en \"Preventing Mixed Content\") (HTTP content loaded from a HTTPS page). By using the method [`hasOnlySecureContent`](https://developer.apple.com/documentation/webkit/wkwebview/1415002-hasonlysecurecontent \"WKWebView hasOnlySecureContent\") it can be verified whether all resources on the page have been loaded through securely encrypted connections. This example from [#thiel2] (see page 159 and 160) uses this to ensure that only content loaded via HTTPS is shown to the user, otherwise an alert is displayed telling the user that mixed content was detected.\n\nIn the compiled binary you can use @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | grep -i \"hasonlysecurecontent\"\n\n# nothing found\n```\n\nIn this case, the app does not make use of this.\n\nIn addition, if you have the original source code or the IPA, you can inspect the embedded HTML files and verify that they do not include mixed content. Search for `http://` in the source and inside tag attributes, but remember that this might give false positives as, for example, finding an anchor tag `<a>` that includes a `http://` inside its `href` attribute does not always present a mixed content issue. Learn more about mixed content in the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content \"Mixed Content\").\n\n### Testing for WebView URI Manipulation\n\nMake sure that the WebView's URI cannot be manipulated by the user in order to load other types of resources than necessary for the functioning of the WebView. This can be specifically dangerous when the WebView's content is loaded from the local file system, allowing the user to navigate to other resources within the application.\n\n## Static Analysis\n\nFor the static analysis we will focus mostly on the following points having `UIWebView` and `WKWebView` under scope.\n\n- Identifying WebView usage\n- Testing if JavaScript is Enabled\n- Testing for Mixed Content\n- Testing for WebView URI Manipulation\n\n### Identifying WebView Usage\n\nLook out for usages of the above mentioned WebView classes by searching in Xcode.\n\nIn the compiled binary you can search in its symbols or strings, for example using @MASTG-TOOL-0129 like this:\n\n#### UIWebView\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | egrep \"UIWebView$\"\n489 0x0002fee9 0x10002fee9   9  10 (5.__TEXT.__cstring) ascii UIWebView\n896 0x0003c813 0x0003c813  24  25 () ascii @_OBJC_CLASS_$_UIWebView\n1754 0x00059599 0x00059599  23  24 () ascii _OBJC_CLASS_$_UIWebView\n```\n\n#### WKWebView\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | egrep \"WKWebView$\"\n490 0x0002fef3 0x10002fef3   9  10 (5.__TEXT.__cstring) ascii WKWebView\n625 0x00031670 0x100031670  17  18 (5.__TEXT.__cstring) ascii unwindToWKWebView\n904 0x0003c960 0x0003c960  24  25 () ascii @_OBJC_CLASS_$_WKWebView\n1757 0x000595e4 0x000595e4  23  24 () ascii _OBJC_CLASS_$_WKWebView\n```\n\nAlternatively you can also search for known methods of these WebView classes. For example, search for the method used to initialize a WKWebView ([`init(frame:configuration:)`](https://developer.apple.com/documentation/webkit/wkwebview/1414998-init \"WKWebView init(frame:configuration:)\")):\n\n```bash\n$ rabin2 -zzq ./WheresMyBrowser | egrep \"WKWebView.*frame\"\n0x5c3ac 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC\n0x5d97a 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n0x6b5d5 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC\n0x6c3fa 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n```\n\nYou can also demangle it:\n\n```bash\n$ xcrun swift-demangle __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n\n---> @nonobjc __C.WKWebView.init(frame: __C_Synthesized.CGRect,\n                                configuration: __C.WKWebViewConfiguration) -> __C.WKWebView\n```\n\n### Testing if JavaScript is Enabled\n\nFirst of all, remember that JavaScript cannot be disabled for `UIWebView`s.\n\nFor `WKWebView`s, as a best practice, JavaScript should be disabled unless it is explicitly required. To verify that JavaScript was properly disabled search the project for usages of `WKPreferences` and ensure that the [`javaScriptEnabled`](https://developer.apple.com/documentation/webkit/wkpreferences/1536203-javascriptenabled \"WKPreferences javaScriptEnabled\") property is set to `false`:\n\n```default\nlet webPreferences = WKPreferences()\nwebPreferences.javaScriptEnabled = false\n```\n\nIf only having the compiled binary you can search for this in it using @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | grep -i \"javascriptenabled\"\n391 0x0002f2c7 0x10002f2c7  17  18 (4.__TEXT.__objc_methname) ascii javaScriptEnabled\n392 0x0002f2d9 0x10002f2d9  21  22 (4.__TEXT.__objc_methname) ascii setJavaScriptEnabled:\n```\n\nIf user scripts were defined, they will continue running as the `javaScriptEnabled` property won't affect them. See [`WKUserContentController`](https://developer.apple.com/documentation/webkit/wkusercontentcontroller \"WKUserContentController\") and [WKUserScript](https://developer.apple.com/documentation/webkit/wkuserscript \"WKUserScript\") for more information on injecting user scripts to WKWebViews.\n\n### Testing for Mixed Content\n\nIn contrast to `UIWebView`s, when using `WKWebView`s it is possible to detect [mixed content](https://developers.google.com/web/fundamentals/security/prevent-mixed-content/fixing-mixed-content?hl=en \"Preventing Mixed Content\") (HTTP content loaded from a HTTPS page). By using the method [`hasOnlySecureContent`](https://developer.apple.com/documentation/webkit/wkwebview/1415002-hasonlysecurecontent \"WKWebView hasOnlySecureContent\") it can be verified whether all resources on the page have been loaded through securely encrypted connections. This example from [#thiel2] (see page 159 and 160) uses this to ensure that only content loaded via HTTPS is shown to the user, otherwise an alert is displayed telling the user that mixed content was detected.\n\nIn the compiled binary you can use @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | grep -i \"hasonlysecurecontent\"\n\n# nothing found\n```\n\nIn this case, the app does not make use of this.\n\nIn addition, if you have the original source code or the IPA, you can inspect the embedded HTML files and verify that they do not include mixed content. Search for `http://` in the source and inside tag attributes, but remember that this might give false positives as, for example, finding an anchor tag `<a>` that includes a `http://` inside its `href` attribute does not always present a mixed content issue. Learn more about mixed content in the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content \"Mixed Content\").\n\n### Testing for WebView URI Manipulation\n\nMake sure that the WebView's URI cannot be manipulated by the user in order to load other types of resources than necessary for the functioning of the WebView. This can be specifically dangerous when the WebView's content is loaded from the local file system, allowing the user to navigate to other resources within the application.\n\n## Dynamic Analysis\n\nFor the dynamic analysis we will address the same points from the static analysis.\n\n- Enumerating WebView Instances\n- Testing if JavaScript is Enabled\n- Testing for Mixed Content\n\nIt is possible to identify WebViews and obtain all their properties on runtime by performing dynamic instrumentation. This is very useful when you don't have the original source code.\n\nFor the following examples, we will keep using the [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/ \"Where\\'s My Browser? GitHub Repository\") app and Frida REPL.\n\n### Enumerating WebView Instances\n\nOnce you've identified a WebView in the app, you may inspect the heap in order to find instances of one or several of the WebViews that we have seen above.\n\nFor example, if you use Frida you can do so by inspecting the heap via \"ObjC.choose()\"\n\n```javascript\nObjC.choose(ObjC.classes['UIWebView'], {\n  onMatch: function (ui) {\n    console.log('onMatch: ', ui);\n    console.log('URL: ', ui.request().toString());\n  },\n  onComplete: function () {\n    console.log('done for UIWebView!');\n  }\n});\n\nObjC.choose(ObjC.classes['WKWebView'], {\n  onMatch: function (wk) {\n    console.log('onMatch: ', wk);\n    console.log('URL: ', wk.URL().toString());\n  },\n  onComplete: function () {\n    console.log('done for WKWebView!');\n  }\n});\n\nObjC.choose(ObjC.classes['SFSafariViewController'], {\n  onMatch: function (sf) {\n    console.log('onMatch: ', sf);\n  },\n  onComplete: function () {\n    console.log('done for SFSafariViewController!');\n  }\n});\n```\n\nFor the `UIWebView` and `WKWebView` WebViews we also print the associated URL for the sake of completion.\n\nIn order to ensure that you will be able to find the instances of the WebViews in the heap, be sure to first navigate to the WebView you've found. Once there, run the code above, e.g. by copying into the Frida REPL:\n\n```javascript\n$ frida -U com.authenticationfailure.WheresMyBrowser\n\n# copy the code and wait ...\n\nonMatch:  <UIWebView: 0x14fd25e50; frame = (0 126; 320 393);\n                autoresize = RM+BM; layer = <CALayer: 0x1c422d100>>\nURL:  <NSMutableURLRequest: 0x1c000ef00> {\n  URL: file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/\n          Library/UIWebView/scenario1.html, Method GET, Headers {\n    Accept =     (\n        \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n    );\n    \"Upgrade-Insecure-Requests\" =     (\n        1\n    );\n    \"User-Agent\" =     (\n        \"Mozilla/5.0 (iPhone; CPU iPhone ... AppleWebKit/604.3.5 (KHTML, like Gecko) Mobile/...\"\n    );\n} }\n```\n\nNow we quit with `q` and open another WebView (`WKWebView` in this case). It also gets detected if we repeat the previous steps:\n\n```javascript\n$ frida -U com.authenticationfailure.WheresMyBrowser\n\n# copy the code and wait ...\n\nonMatch:  <WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = <CALayer: 0x1c4238f20>>\nURL:  file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/\n            Library/WKWebView/scenario1.html\n```\n\nWe will extend this example in the following sections in order to get more information from the WebViews. We recommend to store this code to a file, e.g. webviews_inspector.js and run it like this:\n\n```javascript\nfrida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n```\n\n### Checking if JavaScript is Enabled\n\nRemember that if a `UIWebView` is being used, JavaScript is enabled by default and there's no possibility to disable it.\n\nFor `WKWebView`, you should verify if JavaScript is enabled. Use [`javaScriptEnabled`](https://developer.apple.com/documentation/webkit/wkpreferences/1536203-javascriptenabled \"WKPreferences javaScriptEnabled\") from `WKPreferences` for this.\n\nExtend the previous script with the following line:\n\n```javascript\n\nObjC.choose(ObjC.classes['WKWebView'], {\n  onMatch: function (wk) {\n    console.log('onMatch: ', wk);\n    console.log('javaScriptEnabled:', wk.configuration().preferences().javaScriptEnabled());\n//...\n  }\n});\n\n```\n\nThe output shows now that, in fact, JavaScript is enabled:\n\n```bash\n\n$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n\nonMatch:  <WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = <CALayer: 0x1c4238f20>>\n\njavaScriptEnabled:  true\n\n```\n\n### Testing for Mixed Content\n\nThe `UIWebView` class does not provide a method for verifying that only secure content is allowed. However, [starting on iOS 10](https://developer.apple.com/documentation/safari-technology-preview-release-notes/stp-release-7), the [`Upgrade-Insecure-Requests`](https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-insecure-requests) CSP (Content Security Policy) directive was introduced to WebKit, the browser engine powering the iOS WebViews. This directive can be used to instruct the browser to upgrade insecure requests to secure requests. This is a good practice to prevent mixed content issues.\n\nFor `WKWebView`'s, you may call the method [`hasOnlySecureContent`](https://developer.apple.com/documentation/webkit/wkwebview/1415002-hasonlysecurecontent \"WKWebView hasOnlySecureContent\") for each of the `WKWebView`s found in the heap. Remember to do so once the WebView has loaded.\n\nExtend the previous script with the following line:\n\n```javascript\nObjC.choose(ObjC.classes['WKWebView'], {\n  onMatch: function (wk) {\n    console.log('onMatch: ', wk);\n    console.log('hasOnlySecureContent: ', wk.hasOnlySecureContent().toString());\n    //...\n      }\n    });\n```\n\nThe output shows that some of the resources on the page have been loaded through insecure connections:\n\n```bash\n$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n\nonMatch:  <WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = <CALayer: 0x1c4238f20>>\n\nhasOnlySecureContent:  false\n```"
  },
  {
    "id": "MASTG-TEST-0077",
    "title": "Testing WebView Protocol Handlers",
    "category": "Platform Interaction",
    "description": "- Testing How WebViews Load Content\n- Testing WebView file access\n- Checking telephone number detection",
    "full_description": "## Overview\n\n## Static Analysis\n\n- Testing How WebViews Load Content\n- Testing WebView file access\n- Checking telephone number detection\n\n### Testing How WebViews Load Content\n\nIf a WebView is loading content from the app data directory, users should not be able to change the filename or path from which the file is loaded, and they shouldn't be able to edit the loaded file.\n\nThis presents an issue especially in `UIWebView`s loading untrusted content via the deprecated methods [`loadHTMLString:baseURL:`](https://developer.apple.com/documentation/uikit/uiwebview/1617979-loadhtmlstring?language=objc \"UIWebView loadHTMLString:baseURL:\") or [`loadData:MIMEType:textEncodingName:baseURL:`](https://developer.apple.com/documentation/uikit/uiwebview/1617941-loaddata?language=objc \"UIWebView loadData:MIMEType:textEncodingName:baseURL:\") and setting the `baseURL` parameter to `nil` or to a `file:` or `applewebdata:` URL schemes. In this case, in order to prevent unauthorized access to local files, the best option is to set it instead to `about:blank`. However, the recommendation is to avoid the use of `UIWebView`s and switch to `WKWebView`s instead.\n\nHere's an example of a vulnerable `UIWebView` from [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/UIWebViewController.swift#L219 \"Where\\'s My Browser? UIWebViewController.swift Line 219\"):\n\n```default\nlet scenario2HtmlPath = Bundle.main.url(forResource: \"web/UIWebView/scenario2.html\", withExtension: nil)\ndo {\n    let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)\n    uiWebView.loadHTMLString(scenario2Html, baseURL: nil)\n} catch {}\n```\n\nThe page loads resources from the internet using HTTP, enabling a potential MITM to exfiltrate secrets contained in local files, e.g. in shared preferences.\n\nWhen working with `WKWebView`s, Apple recommends using [`loadHTMLString:baseURL:`](https://developer.apple.com/documentation/webkit/wkwebview/1415004-loadhtmlstring?language=objc \"WKWebView loadHTMLString:baseURL:\") or [`loadData:MIMEType:textEncodingName:baseURL:`](https://developer.apple.com/documentation/webkit/wkwebview/1415011-loaddata?language=objc \"WKWebView loadData:MIMEType:textEncodingName:baseURL:\") to load local HTML files and `loadRequest:` for web content. Typically, the local files are loaded in combination with methods including, among others: [`pathForResource:ofType:`](https://developer.apple.com/documentation/foundation/nsbundle/1410989-pathforresource \"NSBundle pathForResource:ofType:\"), [`URLForResource:withExtension:`](https://developer.apple.com/documentation/foundation/nsbundle/1411540-urlforresource?language=objc \"NSBundle URLForResource:withExtension:\") or [`init(contentsOf:encoding:)`](https://developer.apple.com/documentation/swift/string/3126736-init \"String init(contentsOf:encoding:)\").\n\nSearch the source code for the mentioned methods and inspect their parameters.\n\nExample in Objective-C:\n\n```objectivec\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n\n    self.webView = [[WKWebView alloc] initWithFrame:CGRectMake(10, 20,\n        CGRectGetWidth([UIScreen mainScreen].bounds) - 20,\n        CGRectGetHeight([UIScreen mainScreen].bounds) - 84) configuration:configuration];\n    self.webView.navigationDelegate = self;\n    [self.view addSubview:self.webView];\n\n    NSString *filePath = [[NSBundle mainBundle] pathForResource:@\"example_file\" ofType:@\"html\"];\n    NSString *html = [NSString stringWithContentsOfFile:filePath\n                                encoding:NSUTF8StringEncoding error:nil];\n    [self.webView loadHTMLString:html baseURL:[NSBundle mainBundle].resourceURL];\n}\n\n```\n\nExample in Swift from [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/WKWebViewController.swift#L196 \"Where\\'s My Browser? WKWebViewController.swift Line 196\"):\n\n```default\nlet scenario2HtmlPath = Bundle.main.url(forResource: \"web/WKWebView/scenario2.html\", withExtension: nil)\ndo {\n    let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)\n    wkWebView.loadHTMLString(scenario2Html, baseURL: nil)\n} catch {}\n```\n\nIf only having the compiled binary, you can also search for these methods using @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | grep -i \"loadHTMLString\"\n231 0x0002df6c 24 (4.__TEXT.__objc_methname) ascii loadHTMLString:baseURL:\n```\n\nIn a case like this, it is recommended to perform dynamic analysis to ensure that this is in fact being used and from which kind of WebView. The `baseURL` parameter here doesn't present an issue as it will be set to \"null\" but could be an issue if not set properly when using a `UIWebView`. See \"Checking How WebViews are Loaded\" for an example about this.\n\nIn addition, you should also verify if the app is using the method [`loadFileURL: allowingReadAccessToURL:`](https://developer.apple.com/documentation/webkit/wkwebview/1414973-loadfileurl?language=objc \"WKWebView loadFileURL:allowingReadAccessToURL:\"). Its first parameter is `URL` and contains the URL to be loaded in the WebView, its second parameter `allowingReadAccessToURL` may contain a single file or a directory. If containing a single file, that file will be available to the WebView. However, if it contains a directory, all files on that directory will be made available to the WebView. Therefore, it is worth inspecting this and in case it is a directory, verifying that no sensitive data can be found inside it.\n\nExample in Swift from [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/WKWebViewController.swift#L186 \"Where\\'s My Browser? WKWebViewController.swift Line 186\"):\n\n```default\nvar scenario1Url = FileManager.default.urls(for: .libraryDirectory, in: .userDomainMask)[0]\nscenario1Url = scenario1Url.appendingPathComponent(\"WKWebView/scenario1.html\")\nwkWebView.loadFileURL(scenario1Url, allowingReadAccessTo: scenario1Url)\n```\n\nIn this case, the parameter `allowingReadAccessToURL` contains a single file \"WKWebView/scenario1.html\", meaning that the WebView has exclusively access to that file.\n\nIn the compiled binary you can use @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | grep -i \"loadFileURL\"\n237 0x0002dff1 37 (4.__TEXT.__objc_methname) ascii loadFileURL:allowingReadAccessToURL:\n```\n\n### Testing WebView File Access\n\nIf you have found a `UIWebView` being used, then the following applies:\n\n- The `file://` scheme is always enabled.\n- File access from `file://` URLs is always enabled.\n- Universal access from `file://` URLs is always enabled.\n\nRegarding `WKWebView`s:\n\n- The `file://` scheme is also always enabled and it **cannot be disabled**.\n- It disables file access from `file://` URLs by default but it can be enabled.\n\nThe following WebView properties can be used to configure file access:\n\n- `allowFileAccessFromFileURLs` (`WKPreferences`, `false` by default): it enables JavaScript running in the context of a `file://` scheme URL to access content from other `file://` scheme URLs.\n- `allowUniversalAccessFromFileURLs` (`WKWebViewConfiguration`, `false` by default): it enables JavaScript running in the context of a `file://` scheme URL to access content from any origin.\n\nFor example, it is possible to set the **[undocumented property](https://github.com/WebKit/webkit/blob/master/Source/WebKit/UIProcess/API/Cocoa/WKPreferences.mm#L470 \"WebKit WKPreferences.mm Line 470\")** `allowFileAccessFromFileURLs` by doing this:\n\nObjective-C:\n\n```objectivec\n\n[webView.configuration.preferences setValue:@YES forKey:@\"allowFileAccessFromFileURLs\"];\n\n```\n\nSwift:\n\n```default\n\nwebView.configuration.preferences.setValue(true, forKey: \"allowFileAccessFromFileURLs\")\n\n```\n\nIf one or more of the above properties are activated, you should determine whether they are really necessary for the app to work properly.\n\n### Checking Telephone Number Detection\n\nIn Safari on iOS, telephone number detection is on by default. However, you might want to turn it off if your HTML page contains numbers that can be interpreted as phone numbers, but are not phone numbers, or to prevent the DOM document from being modified when parsed by the browser. To turn off telephone number detection in Safari on iOS, use the format-detection meta tag (`<meta name = \"format-detection\" content = \"telephone=no\">`). An example of this can be found in the [Apple developer documentation](https://developer.apple.com/library/archive/featuredarticles/iPhoneURLScheme_Reference/PhoneLinks/PhoneLinks.html#//apple_ref/doc/uid/TP40007899-CH6-SW2 \"Phone Links: Turning telephone number detection off\"). Phone links should be then used (e.g. `<a href=\"tel:1-408-555-5555\">1-408-555-5555</a>`) to explicitly create a link.\n\n## Static Analysis\n\n- Testing How WebViews Load Content\n- Testing WebView file access\n- Checking telephone number detection\n\n### Testing How WebViews Load Content\n\nIf a WebView is loading content from the app data directory, users should not be able to change the filename or path from which the file is loaded, and they shouldn't be able to edit the loaded file.\n\nThis presents an issue especially in `UIWebView`s loading untrusted content via the deprecated methods [`loadHTMLString:baseURL:`](https://developer.apple.com/documentation/uikit/uiwebview/1617979-loadhtmlstring?language=objc \"UIWebView loadHTMLString:baseURL:\") or [`loadData:MIMEType:textEncodingName:baseURL:`](https://developer.apple.com/documentation/uikit/uiwebview/1617941-loaddata?language=objc \"UIWebView loadData:MIMEType:textEncodingName:baseURL:\") and setting the `baseURL` parameter to `nil` or to a `file:` or `applewebdata:` URL schemes. In this case, in order to prevent unauthorized access to local files, the best option is to set it instead to `about:blank`. However, the recommendation is to avoid the use of `UIWebView`s and switch to `WKWebView`s instead.\n\nHere's an example of a vulnerable `UIWebView` from [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/UIWebViewController.swift#L219 \"Where\\'s My Browser? UIWebViewController.swift Line 219\"):\n\n```default\nlet scenario2HtmlPath = Bundle.main.url(forResource: \"web/UIWebView/scenario2.html\", withExtension: nil)\ndo {\n    let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)\n    uiWebView.loadHTMLString(scenario2Html, baseURL: nil)\n} catch {}\n```\n\nThe page loads resources from the internet using HTTP, enabling a potential MITM to exfiltrate secrets contained in local files, e.g. in shared preferences.\n\nWhen working with `WKWebView`s, Apple recommends using [`loadHTMLString:baseURL:`](https://developer.apple.com/documentation/webkit/wkwebview/1415004-loadhtmlstring?language=objc \"WKWebView loadHTMLString:baseURL:\") or [`loadData:MIMEType:textEncodingName:baseURL:`](https://developer.apple.com/documentation/webkit/wkwebview/1415011-loaddata?language=objc \"WKWebView loadData:MIMEType:textEncodingName:baseURL:\") to load local HTML files and `loadRequest:` for web content. Typically, the local files are loaded in combination with methods including, among others: [`pathForResource:ofType:`](https://developer.apple.com/documentation/foundation/nsbundle/1410989-pathforresource \"NSBundle pathForResource:ofType:\"), [`URLForResource:withExtension:`](https://developer.apple.com/documentation/foundation/nsbundle/1411540-urlforresource?language=objc \"NSBundle URLForResource:withExtension:\") or [`init(contentsOf:encoding:)`](https://developer.apple.com/documentation/swift/string/3126736-init \"String init(contentsOf:encoding:)\").\n\nSearch the source code for the mentioned methods and inspect their parameters.\n\nExample in Objective-C:\n\n```objectivec\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n\n    self.webView = [[WKWebView alloc] initWithFrame:CGRectMake(10, 20,\n        CGRectGetWidth([UIScreen mainScreen].bounds) - 20,\n        CGRectGetHeight([UIScreen mainScreen].bounds) - 84) configuration:configuration];\n    self.webView.navigationDelegate = self;\n    [self.view addSubview:self.webView];\n\n    NSString *filePath = [[NSBundle mainBundle] pathForResource:@\"example_file\" ofType:@\"html\"];\n    NSString *html = [NSString stringWithContentsOfFile:filePath\n                                encoding:NSUTF8StringEncoding error:nil];\n    [self.webView loadHTMLString:html baseURL:[NSBundle mainBundle].resourceURL];\n}\n\n```\n\nExample in Swift from [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/WKWebViewController.swift#L196 \"Where\\'s My Browser? WKWebViewController.swift Line 196\"):\n\n```default\nlet scenario2HtmlPath = Bundle.main.url(forResource: \"web/WKWebView/scenario2.html\", withExtension: nil)\ndo {\n    let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)\n    wkWebView.loadHTMLString(scenario2Html, baseURL: nil)\n} catch {}\n```\n\nIf only having the compiled binary, you can also search for these methods using @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | grep -i \"loadHTMLString\"\n231 0x0002df6c 24 (4.__TEXT.__objc_methname) ascii loadHTMLString:baseURL:\n```\n\nIn a case like this, it is recommended to perform dynamic analysis to ensure that this is in fact being used and from which kind of WebView. The `baseURL` parameter here doesn't present an issue as it will be set to \"null\" but could be an issue if not set properly when using a `UIWebView`. See \"Checking How WebViews are Loaded\" for an example about this.\n\nIn addition, you should also verify if the app is using the method [`loadFileURL: allowingReadAccessToURL:`](https://developer.apple.com/documentation/webkit/wkwebview/1414973-loadfileurl?language=objc \"WKWebView loadFileURL:allowingReadAccessToURL:\"). Its first parameter is `URL` and contains the URL to be loaded in the WebView, its second parameter `allowingReadAccessToURL` may contain a single file or a directory. If containing a single file, that file will be available to the WebView. However, if it contains a directory, all files on that directory will be made available to the WebView. Therefore, it is worth inspecting this and in case it is a directory, verifying that no sensitive data can be found inside it.\n\nExample in Swift from [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/WKWebViewController.swift#L186 \"Where\\'s My Browser? WKWebViewController.swift Line 186\"):\n\n```default\nvar scenario1Url = FileManager.default.urls(for: .libraryDirectory, in: .userDomainMask)[0]\nscenario1Url = scenario1Url.appendingPathComponent(\"WKWebView/scenario1.html\")\nwkWebView.loadFileURL(scenario1Url, allowingReadAccessTo: scenario1Url)\n```\n\nIn this case, the parameter `allowingReadAccessToURL` contains a single file \"WKWebView/scenario1.html\", meaning that the WebView has exclusively access to that file.\n\nIn the compiled binary you can use @MASTG-TOOL-0129:\n\n```bash\n$ rabin2 -zz ./WheresMyBrowser | grep -i \"loadFileURL\"\n237 0x0002dff1 37 (4.__TEXT.__objc_methname) ascii loadFileURL:allowingReadAccessToURL:\n```\n\n### Testing WebView File Access\n\nIf you have found a `UIWebView` being used, then the following applies:\n\n- The `file://` scheme is always enabled.\n- File access from `file://` URLs is always enabled.\n- Universal access from `file://` URLs is always enabled.\n\nRegarding `WKWebView`s:\n\n- The `file://` scheme is also always enabled and it **cannot be disabled**.\n- It disables file access from `file://` URLs by default but it can be enabled.\n\nThe following WebView properties can be used to configure file access:\n\n- `allowFileAccessFromFileURLs` (`WKPreferences`, `false` by default): it enables JavaScript running in the context of a `file://` scheme URL to access content from other `file://` scheme URLs.\n- `allowUniversalAccessFromFileURLs` (`WKWebViewConfiguration`, `false` by default): it enables JavaScript running in the context of a `file://` scheme URL to access content from any origin.\n\nFor example, it is possible to set the **[undocumented property](https://github.com/WebKit/webkit/blob/master/Source/WebKit/UIProcess/API/Cocoa/WKPreferences.mm#L470 \"WebKit WKPreferences.mm Line 470\")** `allowFileAccessFromFileURLs` by doing this:\n\nObjective-C:\n\n```objectivec\n\n[webView.configuration.preferences setValue:@YES forKey:@\"allowFileAccessFromFileURLs\"];\n\n```\n\nSwift:\n\n```default\n\nwebView.configuration.preferences.setValue(true, forKey: \"allowFileAccessFromFileURLs\")\n\n```\n\nIf one or more of the above properties are activated, you should determine whether they are really necessary for the app to work properly.\n\n### Checking Telephone Number Detection\n\nIn Safari on iOS, telephone number detection is on by default. However, you might want to turn it off if your HTML page contains numbers that can be interpreted as phone numbers, but are not phone numbers, or to prevent the DOM document from being modified when parsed by the browser. To turn off telephone number detection in Safari on iOS, use the format-detection meta tag (`<meta name = \"format-detection\" content = \"telephone=no\">`). An example of this can be found in the [Apple developer documentation](https://developer.apple.com/library/archive/featuredarticles/iPhoneURLScheme_Reference/PhoneLinks/PhoneLinks.html#//apple_ref/doc/uid/TP40007899-CH6-SW2 \"Phone Links: Turning telephone number detection off\"). Phone links should be then used (e.g. `<a href=\"tel:1-408-555-5555\">1-408-555-5555</a>`) to explicitly create a link.\n\n## Dynamic Analysis\n\nIf it's possible to load local files via a WebView, the app might be vulnerable to directory traversal attacks. This would allow access to all files within the sandbox or even to escape the sandbox with full access to the file system (if the device is jailbroken). It should therefore be verified if a user can change the filename or path from which the file is loaded, and they shouldn't be able to edit the loaded file.\n\nTo simulate an attack, you may inject your own JavaScript into the WebView with an interception proxy or simply by using dynamic instrumentation. Attempt to access local storage and any native methods and properties that might be exposed to the JavaScript context.\n\nIn a real-world scenario, JavaScript can only be injected through a permanent backend Cross-Site Scripting vulnerability or a MITM attack. See the OWASP [XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html \"XSS (Cross-Site Scripting) Prevention Cheat Sheet\") and the chapter \"[iOS Network Communication](../../../Document/0x06g-Testing-Network-Communication.md)\" for more information.\n\nFor what concerns this section we will learn about:\n\n- Testing How WebViews Load Content\n- Determining WebView file access\n\n### Testing How WebViews Load Content\n\nIf `WKWebView`'s \"scenario 2\" of the [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/master/WheresMyBrowser/WKWebViewController.swift#L196) app is loaded, the app will do so by calling [`URLForResource:withExtension:`](https://developer.apple.com/documentation/foundation/nsbundle/1411540-urlforresource?language=objc \"NSBundle URLForResource:withExtension:\") and `loadHTMLString:baseURL`.\n\nTo quickly inspect this, you can use frida-trace and trace all `loadHTMLString` and `URLForResource:withExtension:` methods.\n\n```bash\n$ frida-trace -U \"Where's My Browser?\"\n    -m \"*[WKWebView *loadHTMLString*]\" -m \"*[* URLForResource:withExtension:]\"\n\n 14131 ms  -[NSBundle URLForResource:0x1c0255390 withExtension:0x0]\n 14131 ms  URLForResource: web/WKWebView/scenario2.html\n 14131 ms  withExtension: 0x0\n 14190 ms  -[WKWebView loadHTMLString:0x1c0255390 baseURL:0x0]\n 14190 ms   HTMLString: <!DOCTYPE html>\n    <html>\n        ...\n        </html>\n\n 14190 ms  baseURL: nil\n```\n\nIn this case, `baseURL` is set to `nil`, meaning that the effective origin is \"null\". You can obtain the effective origin by running `window.origin` from the JavaScript of the page (this app has an exploitation helper that allows to write and run JavaScript, but you could also implement a MITM or simply use Frida to inject JavaScript, e.g. via `evaluateJavaScript:completionHandler` of `WKWebView`).\n\nAs an additional note regarding `UIWebView`s, if you retrieve the effective origin from a `UIWebView` where `baseURL` is also set to `nil` you will see that it is not set to \"null\", instead you'll obtain something similar to the following:\n\n```bash\napplewebdata://5361016c-f4a0-4305-816b-65411fc1d780\n```\n\nThis origin \"applewebdata://\" is similar to the \"file://\" origin as it does not implement Same-Origin Policy and allow access to local files and any web resources. In this case, it would be better to set `baseURL` to \"about:blank\", this way, the Same-Origin Policy would prevent cross-origin access. However, the recommendation here is to completely avoid using `UIWebView`s and go for `WKWebView`s instead.\n\n### Determining WebView File Access\n\nEven if not having the original source code, you can quickly determine if the app's WebViews do allow file access and which kind. For this, simply navigate to the target WebView in the app and inspect all its instances, for each of them get the values mentioned in the static analysis, that is, `allowFileAccessFromFileURLs` and `allowUniversalAccessFromFileURLs`. This only applies to `WKWebView`s (`UIWebVIew`s always allow file access).\n\nWe continue with our example using the [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/ \"Where\\'s My Browser?\") app and Frida REPL, extend the script with the following content:\n\n```javascript\nObjC.choose(ObjC.classes['WKWebView'], {\n  onMatch: function (wk) {\n    console.log('onMatch: ', wk);\n    console.log('URL: ', wk.URL().toString());\n    console.log('javaScriptEnabled: ', wk.configuration().preferences().javaScriptEnabled());\n    console.log('allowFileAccessFromFileURLs: ',\n            wk.configuration().preferences().valueForKey_('allowFileAccessFromFileURLs').toString());\n    console.log('hasOnlySecureContent: ', wk.hasOnlySecureContent().toString());\n    console.log('allowUniversalAccessFromFileURLs: ',\n            wk.configuration().valueForKey_('allowUniversalAccessFromFileURLs').toString());\n  },\n  onComplete: function () {\n    console.log('done for WKWebView!');\n  }\n});\n```\n\nIf you run it now, you'll have all the information you need:\n\n```javascript\n$ frida -U -f com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n\nonMatch:  <WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = <CALayer: 0x1c4238f20>>\nURL:  file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/\n        Library/WKWebView/scenario1.html\njavaScriptEnabled:  true\nallowFileAccessFromFileURLs:  0\nhasOnlySecureContent:  false\nallowUniversalAccessFromFileURLs:  0\n```\n\nBoth `allowFileAccessFromFileURLs` and `allowUniversalAccessFromFileURLs` are set to \"0\", meaning that they are disabled. In this app we can go to the WebView configuration and enable `allowFileAccessFromFileURLs`. If we do so and re-run the script we will see how it is set to \"1\" this time:\n\n```bash\n$ frida -U -f com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n...\n\nallowFileAccessFromFileURLs:  1\n```"
  },
  {
    "id": "MASTG-TEST-0078",
    "title": "Determining Whether Native Methods Are Exposed Through WebViews",
    "category": "Platform Interaction",
    "description": "Search for code that maps native objects to the `JSContext` associated with a WebView and analyze what functionality it exposes, for example no sensitive data should be accessible and exposed to WebVi...",
    "full_description": "## Overview\n\n## Static Analysis\n\n### Testing UIWebView JavaScript to Native Bridges\n\nSearch for code that maps native objects to the `JSContext` associated with a WebView and analyze what functionality it exposes, for example no sensitive data should be accessible and exposed to WebViews.\n\nIn Objective-C, the `JSContext` associated with a `UIWebView` is obtained as follows:\n\n```objectivec\n\n[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"]\n\n```\n\n### Testing WKWebView JavaScript to Native Bridges\n\nVerify if a JavaScript to native bridge exists by searching for `WKScriptMessageHandler` and check all exposed methods. Then verify how the methods are called.\n\nThe following example from [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/b8d4abda4000aa509c7a5de79e5c90360d1d0849/WheresMyBrowser/WKWebViewPreferencesManager.swift#L98 \"Where\\'s My Browser? WKWebViewPreferencesManager.swift Line 98\") demonstrates this.\n\nFirst we see how the JavaScript bridge is enabled:\n\n```swift\nfunc enableJavaScriptBridge(_ enabled: Bool) {\n    options_dict[\"javaScriptBridge\"]?.value = enabled\n    let userContentController = wkWebViewConfiguration.userContentController\n    userContentController.removeScriptMessageHandler(forName: \"javaScriptBridge\")\n\n    if enabled {\n            let javaScriptBridgeMessageHandler = JavaScriptBridgeMessageHandler()\n            userContentController.add(javaScriptBridgeMessageHandler, name: \"javaScriptBridge\")\n    }\n}\n```\n\nAdding a script message handler with name `\"name\"` (or `\"javaScriptBridge\"` in the example above) causes the JavaScript function `window.webkit.messageHandlers.myJavaScriptMessageHandler.postMessage` to be defined in all frames in all web views that use the user content controller. It can be then [used from the HTML file like this](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/d4e2d9efbde8841bf7e4a8800418dda6bb116ec6/WheresMyBrowser/web/WKWebView/scenario3.html#L33 \"Where\\'s My Browser? WKWebView/scenario3.html Line 33\"):\n\n```javascript\nfunction invokeNativeOperation() {\n    value1 = document.getElementById(\"value1\").value\n    value2 = document.getElementById(\"value2\").value\n    window.webkit.messageHandlers.javaScriptBridge.postMessage([\"multiplyNumbers\", value1, value2]);\n}\n```\n\nThe called function resides in [`JavaScriptBridgeMessageHandler.swift`](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/b8d4abda4000aa509c7a5de79e5c90360d1d0849/WheresMyBrowser/JavaScriptBridgeMessageHandler.swift#L29 \"Where\\'s My Browser? JavaScriptBridgeMessageHandler.swift Line 29\"):\n\n```swift\nclass JavaScriptBridgeMessageHandler: NSObject, WKScriptMessageHandler {\n\n//...\n\ncase \"multiplyNumbers\":\n\n        let arg1 = Double(messageArray[1])!\n        let arg2 = Double(messageArray[2])!\n        result = String(arg1 * arg2)\n//...\n\nlet javaScriptCallBack = \"javascriptBridgeCallBack('\\(functionFromJS)','\\(result)')\"\nmessage.webView?.evaluateJavaScript(javaScriptCallBack, completionHandler: nil)\n```\n\nThe problem here is that the `JavaScriptBridgeMessageHandler` not only contains that function, it also exposes a sensitive function:\n\n```swift\ncase \"getSecret\":\n        result = \"XSRSOGKC342\"\n```\n\n## Static Analysis\n\n### Testing UIWebView JavaScript to Native Bridges\n\nSearch for code that maps native objects to the `JSContext` associated with a WebView and analyze what functionality it exposes, for example no sensitive data should be accessible and exposed to WebViews.\n\nIn Objective-C, the `JSContext` associated with a `UIWebView` is obtained as follows:\n\n```objectivec\n\n[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"]\n\n```\n\n### Testing WKWebView JavaScript to Native Bridges\n\nVerify if a JavaScript to native bridge exists by searching for `WKScriptMessageHandler` and check all exposed methods. Then verify how the methods are called.\n\nThe following example from [\"Where's My Browser?\"](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/b8d4abda4000aa509c7a5de79e5c90360d1d0849/WheresMyBrowser/WKWebViewPreferencesManager.swift#L98 \"Where\\'s My Browser? WKWebViewPreferencesManager.swift Line 98\") demonstrates this.\n\nFirst we see how the JavaScript bridge is enabled:\n\n```swift\nfunc enableJavaScriptBridge(_ enabled: Bool) {\n    options_dict[\"javaScriptBridge\"]?.value = enabled\n    let userContentController = wkWebViewConfiguration.userContentController\n    userContentController.removeScriptMessageHandler(forName: \"javaScriptBridge\")\n\n    if enabled {\n            let javaScriptBridgeMessageHandler = JavaScriptBridgeMessageHandler()\n            userContentController.add(javaScriptBridgeMessageHandler, name: \"javaScriptBridge\")\n    }\n}\n```\n\nAdding a script message handler with name `\"name\"` (or `\"javaScriptBridge\"` in the example above) causes the JavaScript function `window.webkit.messageHandlers.myJavaScriptMessageHandler.postMessage` to be defined in all frames in all web views that use the user content controller. It can be then [used from the HTML file like this](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/d4e2d9efbde8841bf7e4a8800418dda6bb116ec6/WheresMyBrowser/web/WKWebView/scenario3.html#L33 \"Where\\'s My Browser? WKWebView/scenario3.html Line 33\"):\n\n```javascript\nfunction invokeNativeOperation() {\n    value1 = document.getElementById(\"value1\").value\n    value2 = document.getElementById(\"value2\").value\n    window.webkit.messageHandlers.javaScriptBridge.postMessage([\"multiplyNumbers\", value1, value2]);\n}\n```\n\nThe called function resides in [`JavaScriptBridgeMessageHandler.swift`](https://github.com/authenticationfailure/WheresMyBrowser.iOS/blob/b8d4abda4000aa509c7a5de79e5c90360d1d0849/WheresMyBrowser/JavaScriptBridgeMessageHandler.swift#L29 \"Where\\'s My Browser? JavaScriptBridgeMessageHandler.swift Line 29\"):\n\n```swift\nclass JavaScriptBridgeMessageHandler: NSObject, WKScriptMessageHandler {\n\n//...\n\ncase \"multiplyNumbers\":\n\n        let arg1 = Double(messageArray[1])!\n        let arg2 = Double(messageArray[2])!\n        result = String(arg1 * arg2)\n//...\n\nlet javaScriptCallBack = \"javascriptBridgeCallBack('\\(functionFromJS)','\\(result)')\"\nmessage.webView?.evaluateJavaScript(javaScriptCallBack, completionHandler: nil)\n```\n\nThe problem here is that the `JavaScriptBridgeMessageHandler` not only contains that function, it also exposes a sensitive function:\n\n```swift\ncase \"getSecret\":\n        result = \"XSRSOGKC342\"\n```\n\n## Dynamic Analysis\n\nAt this point you've surely identified all potentially interesting WebViews in the iOS app and got an overview of the potential attack surface (via static analysis, the dynamic analysis techniques that we have seen in previous sections or a combination of them). This would include HTML and JavaScript files, usage of the `JSContext` / `JSExport` for `UIWebView` and `WKScriptMessageHandler` for `WKWebView`, as well as which functions are exposed and present in a WebView.\n\nFurther dynamic analysis can help you exploit those functions and get sensitive data that they might be exposing. As we have seen in the static analysis, in the previous example it was trivial to get the secret value by performing reverse engineering (the secret value was found in plain text inside the source code) but imagine that the exposed function retrieves the secret from secure storage. In this case, only dynamic analysis and exploitation would help.\n\nThe procedure for exploiting the functions starts with producing a JavaScript payload and injecting it into the file that the app is requesting. The injection can be accomplished via various techniques, for example:\n\n- If some of the content is loaded insecurely from the Internet over HTTP (mixed content), you can try to implement a MITM attack.\n- You can always perform dynamic instrumentation and inject the JavaScript payload by using frameworks like Frida and the corresponding JavaScript evaluation functions available for the iOS WebViews ([`stringByEvaluatingJavaScriptFromString:`](https://developer.apple.com/documentation/uikit/uiwebview/1617963-stringbyevaluatingjavascriptfrom?language=objc \"UIWebView stringByEvaluatingJavaScriptFromString:\") for `UIWebView` and [`evaluateJavaScript:completionHandler:`](https://developer.apple.com/documentation/webkit/wkwebview/1415017-evaluatejavascript?language=objc \"WKWebView evaluateJavaScript:completionHandler:\") for `WKWebView`).\n\nIn order to get the secret from the previous example of the \"Where's My Browser?\" app, you can use one of these techniques to inject the following payload that will reveal the secret by writing it to the \"result\" field of the WebView:\n\n```javascript\nfunction javascriptBridgeCallBack(name, value) {\n    document.getElementById(\"result\").innerHTML=value;\n};\nwindow.webkit.messageHandlers.javaScriptBridge.postMessage([\"getSecret\"]);\n```\n\nOf course, you may also use the Exploitation Helper it provides:\n\n<img src=\"Images/Chapters/0x06h/exploit_javascript_bridge.png\" width=\"400px\" />\n\nSee another example for a vulnerable iOS app and function that is exposed to a WebView in [#thiel2] page 156."
  },
  {
    "id": "MASTG-TEST-0081",
    "title": "Making Sure that the App Is Properly Signed",
    "category": "Anti-Reverse Engineering",
    "description": "You have to ensure that the app is [using the latest code signature format](https://developer.apple.com/documentation/xcode/using-the-latest-code-signature-format). You can retrieve the signing certif...",
    "full_description": "## Overview\n\n## Static Analysis\n\nYou have to ensure that the app is [using the latest code signature format](https://developer.apple.com/documentation/xcode/using-the-latest-code-signature-format). You can retrieve the signing certificate information from the application's .app file with @MASTG-TOOL-0114. Codesign is used to create, check, and display code signatures, as well as inquire into the dynamic status of signed code in the system.\n\nAfter you get the application's IPA file, re-save it as a ZIP file and decompress the ZIP file. Navigate to the Payload directory, where the application's .app file will be.\n\nExecute the following `codesign` command to display the signing information:\n\n```bash\n$ codesign -dvvv YOURAPP.app\nExecutable=/Users/Documents/YOURAPP/Payload/YOURAPP.app/YOURNAME\nIdentifier=com.example.example\nFormat=app bundle with Mach-O universal (armv7 arm64)\nCodeDirectory v=20200 size=154808 flags=0x0(none) hashes=4830+5 location=embedded\nHash type=sha256 size=32\nCandidateCDHash sha1=455758418a5f6a878bb8fdb709ccfca52c0b5b9e\nCandidateCDHash sha256=fd44efd7d03fb03563b90037f92b6ffff3270c46\nHash choices=sha1,sha256\nCDHash=fd44efd7d03fb03563b90037f92b6ffff3270c46\nSignature size=4678\nAuthority=iPhone Distribution: Example Ltd\nAuthority=Apple Worldwide Developer Relations Certification Authority\nAuthority=Apple Root CA\nSigned Time=4 Aug 2017, 12:42:52\nInfo.plist entries=66\nTeamIdentifier=8LAMR92KJ8\nSealed Resources version=2 rules=12 files=1410\nInternal requirements count=1 size=176\n```\n\nThere are various ways to distribute your app as described at [the Apple documentation](https://developer.apple.com/business/distribute/ \"Apple Business\"), which include using the App Store or via Apple Business Manager for custom or in-house distribution. In case of an in-house distribution scheme, make sure that no ad hoc certificates are used when the app is signed for distribution.\n\n## Static Analysis\n\nYou have to ensure that the app is [using the latest code signature format](https://developer.apple.com/documentation/xcode/using-the-latest-code-signature-format). You can retrieve the signing certificate information from the application's .app file with @MASTG-TOOL-0114. Codesign is used to create, check, and display code signatures, as well as inquire into the dynamic status of signed code in the system.\n\nAfter you get the application's IPA file, re-save it as a ZIP file and decompress the ZIP file. Navigate to the Payload directory, where the application's .app file will be.\n\nExecute the following `codesign` command to display the signing information:\n\n```bash\n$ codesign -dvvv YOURAPP.app\nExecutable=/Users/Documents/YOURAPP/Payload/YOURAPP.app/YOURNAME\nIdentifier=com.example.example\nFormat=app bundle with Mach-O universal (armv7 arm64)\nCodeDirectory v=20200 size=154808 flags=0x0(none) hashes=4830+5 location=embedded\nHash type=sha256 size=32\nCandidateCDHash sha1=455758418a5f6a878bb8fdb709ccfca52c0b5b9e\nCandidateCDHash sha256=fd44efd7d03fb03563b90037f92b6ffff3270c46\nHash choices=sha1,sha256\nCDHash=fd44efd7d03fb03563b90037f92b6ffff3270c46\nSignature size=4678\nAuthority=iPhone Distribution: Example Ltd\nAuthority=Apple Worldwide Developer Relations Certification Authority\nAuthority=Apple Root CA\nSigned Time=4 Aug 2017, 12:42:52\nInfo.plist entries=66\nTeamIdentifier=8LAMR92KJ8\nSealed Resources version=2 rules=12 files=1410\nInternal requirements count=1 size=176\n```\n\nThere are various ways to distribute your app as described at [the Apple documentation](https://developer.apple.com/business/distribute/ \"Apple Business\"), which include using the App Store or via Apple Business Manager for custom or in-house distribution. In case of an in-house distribution scheme, make sure that no ad hoc certificates are used when the app is signed for distribution."
  },
  {
    "id": "MASTG-TEST-0082",
    "title": "Testing whether the App is Debuggable",
    "category": "Anti-Reverse Engineering",
    "description": "Extract the entitlements from the app (@MASTG-TECH-0111) and check the value of the `get-task-allow` key. If it is set to `true`, the app is debuggable.",
    "full_description": "## Overview\n\n## Static Analysis\n\nExtract the entitlements from the app (@MASTG-TECH-0111) and check the value of the `get-task-allow` key. If it is set to `true`, the app is debuggable.\n\n```bash\n$ ldid -e iGoat-Swift.app/iGoat-Swift\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>application-identifier</key>\n    <string>TNAJ496RHB.OWASP.iGoat-Swift</string>\n    <key>com.apple.developer.team-identifier</key>\n    <string>TNAJ496RHB</string>\n    <key>get-task-allow</key>\n    <true/>\n    <key>keychain-access-groups</key>\n    <array>\n        <string>TNAJ496RHB.OWASP.iGoat-Swift</string>\n    </array>\n</dict>\n</plist>\n```\n\n## Static Analysis\n\nExtract the entitlements from the app (@MASTG-TECH-0111) and check the value of the `get-task-allow` key. If it is set to `true`, the app is debuggable.\n\n```bash\n$ ldid -e iGoat-Swift.app/iGoat-Swift\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>application-identifier</key>\n    <string>TNAJ496RHB.OWASP.iGoat-Swift</string>\n    <key>com.apple.developer.team-identifier</key>\n    <string>TNAJ496RHB</string>\n    <key>get-task-allow</key>\n    <true/>\n    <key>keychain-access-groups</key>\n    <array>\n        <string>TNAJ496RHB.OWASP.iGoat-Swift</string>\n    </array>\n</dict>\n</plist>\n```\n\n## Dynamic Analysis\n\nCheck whether you can attach a debugger directly, as explained in @MASTG-TECH-0084.\n\nNote: if the application is equipped with anti-reverse engineering controls, then the debugger can be detected and stopped."
  },
  {
    "id": "MASTG-TEST-0083",
    "title": "Testing for Debugging Symbols",
    "category": "Anti-Reverse Engineering",
    "description": "To verify the existence of debug symbols you can use objdump from [binutils](https://www.gnu.org/s/binutils/ \"Binutils\") or [llvm-objdump](https://llvm.org/docs/CommandGuide/llvm-objdump.html \"llvm-ob...",
    "full_description": "## Overview\n\n## Static Analysis\n\nTo verify the existence of debug symbols you can use objdump from [binutils](https://www.gnu.org/s/binutils/ \"Binutils\") or [llvm-objdump](https://llvm.org/docs/CommandGuide/llvm-objdump.html \"llvm-objdump\") to inspect all of the app binaries.\n\nIn the following snippet we run objdump over `TargetApp` (the iOS main app executable) to show the typical output of a binary containing debug symbols which are marked with the `d` (debug) flag. Check the [objdump man page](https://www.unix.com/man-page/osx/1/objdump/ \"objdump man page\") for information about various other symbol flag characters.\n\n```bash\n$ objdump --syms TargetApp\n\n0000000100007dc8 l    d  *UND* -[ViewController handleSubmitButton:]\n000000010000809c l    d  *UND* -[ViewController touchesBegan:withEvent:]\n0000000100008158 l    d  *UND* -[ViewController viewDidLoad]\n...\n000000010000916c l    d  *UND* _disable_gdb\n00000001000091d8 l    d  *UND* _detect_injected_dylds\n00000001000092a4 l    d  *UND* _isDebugged\n...\n```\n\nTo prevent the inclusion of debug symbols, set `Strip Debug Symbols During Copy` to `YES` via the XCode project's build settings. Stripping debugging symbols will not only reduce the size of the binary but also increase the difficulty of reverse engineering.\n\n## Static Analysis\n\nTo verify the existence of debug symbols you can use objdump from [binutils](https://www.gnu.org/s/binutils/ \"Binutils\") or [llvm-objdump](https://llvm.org/docs/CommandGuide/llvm-objdump.html \"llvm-objdump\") to inspect all of the app binaries.\n\nIn the following snippet we run objdump over `TargetApp` (the iOS main app executable) to show the typical output of a binary containing debug symbols which are marked with the `d` (debug) flag. Check the [objdump man page](https://www.unix.com/man-page/osx/1/objdump/ \"objdump man page\") for information about various other symbol flag characters.\n\n```bash\n$ objdump --syms TargetApp\n\n0000000100007dc8 l    d  *UND* -[ViewController handleSubmitButton:]\n000000010000809c l    d  *UND* -[ViewController touchesBegan:withEvent:]\n0000000100008158 l    d  *UND* -[ViewController viewDidLoad]\n...\n000000010000916c l    d  *UND* _disable_gdb\n00000001000091d8 l    d  *UND* _detect_injected_dylds\n00000001000092a4 l    d  *UND* _isDebugged\n...\n```\n\nTo prevent the inclusion of debug symbols, set `Strip Debug Symbols During Copy` to `YES` via the XCode project's build settings. Stripping debugging symbols will not only reduce the size of the binary but also increase the difficulty of reverse engineering.\n\n## Dynamic Analysis\n\nDynamic analysis is not applicable for finding debugging symbols."
  },
  {
    "id": "MASTG-TEST-0084",
    "title": "Testing for Debugging Code and Verbose Error Logging",
    "category": "Anti-Reverse Engineering",
    "description": "You can take the following static analysis approach for the logging statements:",
    "full_description": "## Overview\n\n## Static Analysis\n\nYou can take the following static analysis approach for the logging statements:\n\n1. Import the application's code into Xcode.\n2. Search the code for the following printing functions: `NSLog`, `println`, `print`, `dump`, `debugPrint`.\n3. When you find one of them, determine whether the developers used a wrapping function around the logging function for better mark up of the statements to be logged; if so, add that function to your search.\n4. For every result of steps 2 and 3, determine whether macros or debug-state related guards have been set to turn the logging off in the release build. Please note the change in how Objective-C can use preprocessor macros:\n\n```objectivec\n#ifdef DEBUG\n    // Debug-only code\n#endif\n```\n\nThe procedure for enabling this behavior in Swift has changed: you need to either set environment variables in your scheme or set them as custom flags in the target's build settings. Please note that the following functions (which allow you to determine whether the app was built in the Swift 2.1. release-configuration) aren't recommended, as Xcode 8 and Swift 3 don't support these functions:\n\n- `_isDebugAssertConfiguration`\n- `_isReleaseAssertConfiguration`\n- `_isFastAssertConfiguration`.\n\nDepending on the application's setup, there may be more logging functions. For example, when [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack \"CocoaLumberjack\") is used, static analysis is a bit different.\n\nFor the \"debug-management\" code (which is built-in): inspect the storyboards to see whether there are any flows and/or view-controllers that provide functionality different from the functionality the application should support. This functionality can be anything from debug views to printed error messages, from custom stub-response configurations to logs written to files on the application's file system or a remote server.\n\nAs a developer, incorporating debug statements into your application's debug version should not be a problem as long as you make sure that the debug statements are never present in the application's release version.\n\nIn Objective-C, developers can use preprocessor macros to filter out debug code:\n\n```objectivec\n#ifdef DEBUG\n    // Debug-only code\n#endif\n```\n\nIn Swift 2 (with Xcode 7), you have to set custom compiler flags for every target, and compiler flags have to start with \"-D\". So you can use the following annotations when the debug flag `DMSTG-DEBUG` is set:\n\n```objectivec\n#if MSTG_DEBUG\n    // Debug-only code\n#endif\n```\n\nIn Swift 3 (with Xcode 8), you can set Active Compilation Conditions in Build settings/Swift compiler - Custom flags. Instead of a preprocessor, Swift 3 uses [conditional compilation blocks](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID34 \"Swift conditional compilation blocks\") based on the defined conditions:\n\n```objectivec\n#if DEBUG_LOGGING\n    // Debug-only code\n#endif\n```\n\n## Static Analysis\n\nYou can take the following static analysis approach for the logging statements:\n\n1. Import the application's code into Xcode.\n2. Search the code for the following printing functions: `NSLog`, `println`, `print`, `dump`, `debugPrint`.\n3. When you find one of them, determine whether the developers used a wrapping function around the logging function for better mark up of the statements to be logged; if so, add that function to your search.\n4. For every result of steps 2 and 3, determine whether macros or debug-state related guards have been set to turn the logging off in the release build. Please note the change in how Objective-C can use preprocessor macros:\n\n```objectivec\n#ifdef DEBUG\n    // Debug-only code\n#endif\n```\n\nThe procedure for enabling this behavior in Swift has changed: you need to either set environment variables in your scheme or set them as custom flags in the target's build settings. Please note that the following functions (which allow you to determine whether the app was built in the Swift 2.1. release-configuration) aren't recommended, as Xcode 8 and Swift 3 don't support these functions:\n\n- `_isDebugAssertConfiguration`\n- `_isReleaseAssertConfiguration`\n- `_isFastAssertConfiguration`.\n\nDepending on the application's setup, there may be more logging functions. For example, when [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack \"CocoaLumberjack\") is used, static analysis is a bit different.\n\nFor the \"debug-management\" code (which is built-in): inspect the storyboards to see whether there are any flows and/or view-controllers that provide functionality different from the functionality the application should support. This functionality can be anything from debug views to printed error messages, from custom stub-response configurations to logs written to files on the application's file system or a remote server.\n\nAs a developer, incorporating debug statements into your application's debug version should not be a problem as long as you make sure that the debug statements are never present in the application's release version.\n\nIn Objective-C, developers can use preprocessor macros to filter out debug code:\n\n```objectivec\n#ifdef DEBUG\n    // Debug-only code\n#endif\n```\n\nIn Swift 2 (with Xcode 7), you have to set custom compiler flags for every target, and compiler flags have to start with \"-D\". So you can use the following annotations when the debug flag `DMSTG-DEBUG` is set:\n\n```objectivec\n#if MSTG_DEBUG\n    // Debug-only code\n#endif\n```\n\nIn Swift 3 (with Xcode 8), you can set Active Compilation Conditions in Build settings/Swift compiler - Custom flags. Instead of a preprocessor, Swift 3 uses [conditional compilation blocks](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID34 \"Swift conditional compilation blocks\") based on the defined conditions:\n\n```objectivec\n#if DEBUG_LOGGING\n    // Debug-only code\n#endif\n```\n\n## Dynamic Analysis\n\nDynamic analysis should be executed on both a simulator and a device because developers sometimes use target-based functions (instead of functions based on a release/debug-mode) to execute the debugging code.\n\n1. Run the application on a simulator and check for output in the console during the app's execution.\n2. Attach a device to your Mac, run the application on the device via Xcode, and check for output in the console during the app's execution.\n\nFor the other \"manager-based\" debug code: click through the application on both a simulator and a device to see if you can find any functionality that allows an app's profiles to be pre-set, allows the actual server to be selected or allows responses from the API to be selected."
  },
  {
    "id": "MASTG-TEST-0088",
    "title": "Testing Jailbreak Detection",
    "category": "Anti-Reverse Engineering",
    "description": "To test for jailbreak detection install the app on a jailbroken device.\n\n**Launch the app and see what happens:**\n\nIf it implements jailbreak detection, you might notice one of the following things:",
    "full_description": "## Overview\n\nTo test for jailbreak detection install the app on a jailbroken device.\n\n**Launch the app and see what happens:**\n\nIf it implements jailbreak detection, you might notice one of the following things:\n\n- The app crashes and closes immediately, without any notification.\n- A pop-up window indicates that the app won't run on a jailbroken device.\n\nNote that crashes might be an indicator of jailbreak detection but the app may be crashing for any other reasons, e.g. it may have a bug. We recommend to test the app on non-jailbroken device first, especially when you're testing preproduction versions.\n\n**Launch the app and try to bypass Jailbreak Detection using an automated tool:**\n\nIf it implements jailbreak detection, you might be able to see indicators of that in the output of the tool. See section [\"Automated Jailbreak Detection Bypass\"](../../../Document/0x06j-Testing-Resiliency-Against-Reverse-Engineering.md#automated-jailbreak-detection-bypass).\n\n**Reverse Engineer the app:**\n\nThe app might be using techniques that are not implemented in the automated tools that you've used. If that's the case you must reverse engineer the app to find proofs. See section [\"Manual Jailbreak Detection Bypass\"](../../../Document/0x06j-Testing-Resiliency-Against-Reverse-Engineering.md#manual-jailbreak-detection-bypass)."
  },
  {
    "id": "MASTG-TEST-0089",
    "title": "Testing Anti-Debugging Detection",
    "category": "Anti-Reverse Engineering",
    "description": "In order to test for anti-debugging detection you can try to attach a debugger to the app and see what happens.\n\nThe app should respond in some way. For example by:\n\n- Alerting the user and asking for",
    "full_description": "## Overview\n\nIn order to test for anti-debugging detection you can try to attach a debugger to the app and see what happens.\n\nThe app should respond in some way. For example by:\n\n- Alerting the user and asking for accepting liability.\n- Preventing execution by gracefully terminating.\n- Securely wiping any sensitive data stored on the device.\n- Reporting to a backend server, e.g, for fraud detection.\n\nTry to hook or reverse engineer the app using the methods from section [\"Anti-Debugging Detection\"](../../../Document/0x05j-Testing-Resiliency-Against-Reverse-Engineering.md#anti-debugging).\n\nNext, work on bypassing the detection and answer the following questions:\n\n- Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?\n- How difficult is identifying the detection code via static and dynamic analysis?\n- Did you need to write custom code to disable the defenses? How much time did you need?\n- What is your assessment of the difficulty of bypassing the mechanisms?"
  },
  {
    "id": "MASTG-TEST-0090",
    "title": "Testing File Integrity Checks",
    "category": "Anti-Reverse Engineering",
    "description": "**Application Source Code Integrity Checks:**\n\nRun the app on the device in an unmodified state and make sure that everything works. Then apply some patches to the executable (e.g. see @MASTG-TECH-009",
    "full_description": "## Overview\n\n**Application Source Code Integrity Checks:**\n\nRun the app on the device in an unmodified state and make sure that everything works. Then apply some patches to the executable (e.g. see @MASTG-TECH-0090), re-sign the app (@MASTG-TECH-0092), and run it.\n\nThe app should respond in some way. For example by:\n\n- Alerting the user and asking for accepting liability.\n- Preventing execution by gracefully terminating.\n- Securely wiping any sensitive data stored on the device.\n- Reporting to a backend server, e.g, for fraud detection.\n\nWork on bypassing the defenses and answer the following questions:\n\n- Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?\n- How difficult is identifying the detection code via static and dynamic analysis?\n- Did you need to write custom code to disable the defenses? How much time did you need?\n- What is your assessment of the difficulty of bypassing the mechanisms?\n\n**File Storage Integrity Checks:**\n\nGo to the app data directories as indicated in @MASTG-TECH-0059 and modify some files.\n\nNext, work on bypassing the defenses and answer the following questions:\n\n- Can the mechanisms be bypassed trivially (e.g., by changing the contents of a file or a key-value pair)?\n- How difficult is obtaining the HMAC key or the asymmetric private key?\n- Did you need to write custom code to disable the defenses? How much time did you need?\n- What is your assessment of the difficulty of bypassing the mechanisms?"
  },
  {
    "id": "MASTG-TEST-0091",
    "title": "Testing Reverse Engineering Tools Detection",
    "category": "Anti-Reverse Engineering",
    "description": "Launch the app with various reverse engineering tools and frameworks installed on your test device, such as @MASTG-TOOL-0031, @MASTG-TOOL-0139, or @MASTG-TOOL-0066.\n\nThe app should respond in some way",
    "full_description": "## Overview\n\nLaunch the app with various reverse engineering tools and frameworks installed on your test device, such as @MASTG-TOOL-0031, @MASTG-TOOL-0139, or @MASTG-TOOL-0066.\n\nThe app should respond in some way to the presence of those tools. For example by:\n\n- Alerting the user and asking for accepting liability.\n- Preventing execution by gracefully terminating.\n- Securely wiping any sensitive data stored on the device.\n- Reporting to a backend server, e.g, for fraud detection.\n\nNext, work on bypassing the detection of the reverse engineering tools and answer the following questions:\n\n- Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?\n- How difficult is identifying the detection code via static and dynamic analysis?\n- Did you need to write custom code to disable the defenses? How much time did you need?\n- What is your assessment of the difficulty of bypassing the mechanisms?"
  },
  {
    "id": "MASTG-TEST-0092",
    "title": "Testing Emulator Detection",
    "category": "Anti-Reverse Engineering",
    "description": "In order to test for emulator detection you can try to run the app on different emulators as indicated in section [\"Emulator Detection\"](../../../Document/0x06j-Testing-Resiliency-Against-Reverse-Engi",
    "full_description": "## Overview\n\nIn order to test for emulator detection you can try to run the app on different emulators as indicated in section [\"Emulator Detection\"](../../../Document/0x06j-Testing-Resiliency-Against-Reverse-Engineering.md#emulator-detection) and see what happens.\n\nThe app should respond in some way. For example by:\n\n- Alerting the user and asking for accepting liability.\n- Preventing execution by gracefully terminating.\n- Reporting to a backend server, e.g, for fraud detection.\n\nYou can also reverse engineer the app using ideas for strings and methods from section [\"Emulator Detection\"](../../../Document/0x06j-Testing-Resiliency-Against-Reverse-Engineering.md#emulator-detection).\n\nNext, work on bypassing this detection and answer the following questions:\n\n- Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?\n- How difficult is identifying the detection code via static and dynamic analysis?\n- Did you need to write custom code to disable the defenses? How much time did you need?\n- What is your assessment of the difficulty of bypassing the mechanisms?"
  },
  {
    "id": "MASTG-TEST-0093",
    "title": "Testing Obfuscation",
    "category": "Anti-Reverse Engineering",
    "description": "Attempt to disassemble the Mach-O in the IPA and any included library files in the \"Frameworks\" directory (.dylib or .framework files), and perform static analysis. At the very least, the app's core f",
    "full_description": "## Overview\n\nAttempt to disassemble the Mach-O in the IPA and any included library files in the \"Frameworks\" directory (.dylib or .framework files), and perform static analysis. At the very least, the app's core functionality (i.e., the functionality meant to be obfuscated) shouldn't be easily discerned. Verify that:\n\n- meaningful identifiers, such as class names, method names, and variable names, have been discarded.\n- string resources and strings in binaries are encrypted.\n- code and data related to the protected functionality is encrypted, packed, or otherwise concealed.\n\nFor a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used."
  },
  {
    "id": "MASTG-TEST-0052",
    "title": "Testing Local Data Storage",
    "category": "Data Storage and Privacy",
    "description": "When you have access to the source code of an iOS app, identify sensitive data that's saved and processed throughout the app. This includes passwords, secret keys, and personally identifiable informat...",
    "full_description": "## Overview\n\nThis test case focuses on identifying potentially sensitive data stored by an application and verifying if it is securely stored. The following checks should be performed:\n\n- Analyze data storage in the source code.\n- Be sure to trigger all possible functionality in the application (e.g. by clicking everywhere possible) in order to ensure data generation.\n- Check all application generated and modified files and ensure that the storage method is sufficiently secure.\n    - This includes `NSUserDefaults`, databases, KeyChain, Internal Storage, External Storage, etc.\n\n**NOTE:** For MASVS L1 compliance, it is sufficient to store data unencrypted in the application's internal storage directory (sandbox). For L2 compliance, additional encryption is required using cryptographic keys securely managed in the iOS KeyChain. This includes using envelope encryption (DEK+KEK) or equivalent methods.\n\n## Static Analysis\n\nWhen you have access to the source code of an iOS app, identify sensitive data that's saved and processed throughout the app. This includes passwords, secret keys, and personally identifiable information (PII), but it may as well include other data identified as sensitive by industry regulations, laws, and company policies. Look for this data being saved via any of the local storage APIs listed below.\n\nMake sure that sensitive data is never stored without appropriate protection. For example, authentication tokens should not be saved in `NSUserDefaults` without additional encryption. Also avoid storing encryption keys in `.plist` files, hardcoded as strings in code, or generated using a predictable obfuscation function or key derivation function based on stable attributes.\n\nSensitive data should be stored by using the Keychain API (that stores them inside the Secure Enclave), or stored encrypted using envelope encryption. Envelope encryption, or key wrapping, is a cryptographic construct that uses symmetric encryption to encapsulate key material. Data encryption keys (DEK) can be encrypted with key encryption keys (KEK) which must be securely stored in the Keychain. Encrypted DEK can be stored in `NSUserDefaults` or written in files. When required, application reads KEK, then decrypts DEK. Refer to [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#encrypting-stored-keys \"OWASP Cryptographic Storage Cheat Sheet: Encrypting Stored Keys\") to learn more about encrypting cryptographic keys.\n\n### Keychain\n\nThe encryption must be implemented so that the secret key is stored in the Keychain with secure settings, ideally `kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly`. This ensures the usage of hardware-backed storage mechanisms. Make sure that the `AccessControlFlags` are set according to the security policy of the keys in the KeyChain.\n\n[Generic examples of using the KeyChain](https://developer.apple.com/library/content/samplecode/GenericKeychain/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007797-Intro-DontLinkElementID_2 \"GenericKeyChain\") to store, update, and delete data can be found in the official Apple documentation. The official Apple documentation also includes an example of using [Touch ID and passcode protected keys](https://developer.apple.com/documentation/localauthentication/accessing_keychain_items_with_face_id_or_touch_id \"Accessing Keychain Items with Face ID or Touch ID\").\n\n### Filesystem\n\nUsing the source code, examine the different APIs used to store data locally. Make sure that any data is properly encrypted based on its sensitivity.\n\n## Dynamic Analysis\n\nOne way to determine whether sensitive information (like credentials and keys) is stored insecurely without leveraging native iOS functions is to analyze the app's data directory. Triggering all app functionality before the data is analyzed is important because the app may store sensitive data only after specific functionality has been triggered. You can then perform static analysis for the data dump according to generic keywords and app-specific data.\n\nThe following steps can be used to determine how the application stores data locally on a jailbroken iOS device:\n\n1. Trigger the functionality that stores potentially sensitive data.\n2. Connect to the iOS device and navigate to its Bundle directory (this applies to iOS versions 8.0 and above): `/var/mobile/Containers/Data/Application/$APP_ID/`\n3. Execute grep with the data that you've stored, for example: `grep -iRn \"USERID\"`.\n4. If the sensitive data is stored in plaintext, the app fails this test.\n\nYou can analyze the app's data directory on a non-jailbroken iOS device by using third-party applications, such as [iMazing](https://imazing.com \"iMazing\").\n\n1. Trigger the functionality that stores potentially sensitive data.\n2. Connect the iOS device to your host computer and launch iMazing.\n3. Select \"Apps\", right-click the desired iOS application, and select \"Extract App\".\n4. Navigate to the output directory and locate `$APP_NAME.imazing`. Rename it to `$APP_NAME.zip`.\n5. Unpack the ZIP file. You can then analyze the application data.\n\n> Note that tools like iMazing don't copy data directly from the device. They try to extract data from the backups they create. Therefore, getting all the app data that's stored on the iOS device is impossible: not all folders are included in backups. Use a jailbroken device or repackage the app with Frida and use a tool like objection to access all the data and files.\n\nIf you added the Frida library to the app and repackaged it as described in \"Dynamic Analysis on Non-Jailbroken Devices\" (from the \"Tampering and Reverse Engineering on iOS\" chapter), you can use @MASTG-TOOL-0038 to transfer files directly from the app's data directory or [read files in objection](https://github.com/sensepost/objection/wiki/Using-objection#getting-started-ios-edition \"Getting started iOS edition\") as explained in @MASTG-TECH-0053.\n\nThe Keychain contents can be dumped during dynamic analysis using different tools, see @MASTG-TECH-0061.\n\nThe path to the Keychain file is\n\n```bash\n/private/var/Keychains/keychain-2.db\n```\n\nOn a non-jailbroken device, you can use objection to [dump the Keychain items](https://github.com/sensepost/objection/wiki/Notes-About-The-Keychain-Dumper \"Notes About The Keychain Dumper\") created and stored by the app.\n\n### Dynamic Analysis with Xcode and iOS simulator\n\n> This test is only available on macOS, as Xcode and the iOS simulator is needed.\n\nFor testing the local storage and verifying what data is stored within it, it's not mandatory to have an iOS device. With access to the source code and Xcode the app can be build and deployed in the iOS simulator. The file system of the current device of the iOS simulator is available in `~/Library/Developer/CoreSimulator/Devices`.\n\nOnce the app is running in the iOS simulator, you can navigate to the directory of the latest simulator started with the following command:\n\n```bash\n$ cd ~/Library/Developer/CoreSimulator/Devices/$(\nls -alht ~/Library/Developer/CoreSimulator/Devices | head -n 2 |\nawk '{print $9}' | sed -n '1!p')/data/Containers/Data/Application\n```\n\nThe command above will automatically find the UUID of the latest simulator started. Now you still need to grep for your app name or a keyword in your app. This will show you the UUID of the app.\n\n```bash\ngrep -iRn keyword .\n```\n\nThen you can monitor and verify the changes in the filesystem of the app and investigate if any sensitive information is stored within the files while using the app.\n\n### Dynamic Analysis with Objection\n\nYou can use the @MASTG-TOOL-0038 runtime mobile exploration toolkit to find vulnerabilities caused by the application's data storage mechanism. Objection can be used without a Jailbroken device, but it will require [patching the iOS Application](https://github.com/sensepost/objection/wiki/Patching-iOS-Applications \"Objection\").\n\n#### Reading the Keychain\n\nTo use Objection to read the Keychain, execute the following command:\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios keychain dump\nNote: You may be asked to authenticate using the devices passcode or TouchID\nSave the output by adding `--json keychain.json` to this command\nDumping the iOS keychain...\nCreated                    Accessible                      ACL    Type      Account                    Service                                                        Data\n-------------------------  ------------------------------  -----  --------  -------------------------  -------------------------------------------------------------  ------------------------------------\n2020-02-11 13:26:52 +0000  WhenUnlocked                    None   Password  keychainValue              com.highaltitudehacks.DVIAswiftv2.develop                      mysecretpass123\n```\n\n#### Searching for Binary Cookies\n\niOS applications often store binary cookie files in the application sandbox. Cookies are binary files containing cookie data for application WebViews. You can use objection to convert these files to a JSON format and inspect the data.\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios cookies get --json\n[\n    {\n        \"domain\": \"highaltitudehacks.com\",\n        \"expiresDate\": \"2051-09-15 07:46:43 +0000\",\n        \"isHTTPOnly\": \"false\",\n        \"isSecure\": \"false\",\n        \"name\": \"username\",\n        \"path\": \"/\",\n        \"value\": \"admin123\",\n        \"version\": \"0\"\n    }\n]\n```\n\n#### Searching for Property List Files\n\niOS applications often store data in property list (plist) files that are stored in both the application sandbox and the IPA package. Sometimes these files contain sensitive information, such as usernames and passwords; therefore, the contents of these files should be inspected during iOS assessments. Use the `ios plist cat plistFileName.plist` command to inspect the plist file.\n\nTo find the file userInfo.plist, use the `env` command. It will print out the locations of the applications Library, Caches and Documents directories:\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # env\nName               Path\n-----------------  -------------------------------------------------------------------------------------------\nBundlePath         /private/var/containers/Bundle/Application/B2C8E457-1F0C-4DB1-8C39-04ACBFFEE7C8/DVIA-v2.app\nCachesDirectory    /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Library/Caches\nDocumentDirectory  /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Documents\nLibraryDirectory   /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Library\n```\n\nGo to the Documents directory and list all files using `ls`.\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ls\nNSFileType      Perms  NSFileProtection                      Read    Write    Owner         Group         Size      Creation                   Name\n------------  -------  ------------------------------------  ------  -------  ------------  ------------  --------  -------------------------  ------------------------\nDirectory         493  n/a                                   True    True     mobile (501)  mobile (501)  192.0 B   2020-02-12 07:03:51 +0000  default.realm.management\nRegular           420  CompleteUntilFirstUserAuthentication  True    True     mobile (501)  mobile (501)  16.0 KiB  2020-02-12 07:03:51 +0000  default.realm\nRegular           420  CompleteUntilFirstUserAuthentication  True    True     mobile (501)  mobile (501)  1.2 KiB   2020-02-12 07:03:51 +0000  default.realm.lock\nRegular           420  CompleteUntilFirstUserAuthentication  True    True     mobile (501)  mobile (501)  284.0 B   2020-05-29 18:15:23 +0000  userInfo.plist\nUnknown           384  n/a                                   True    True     mobile (501)  mobile (501)  0.0 B     2020-02-12 07:03:51 +0000  default.realm.note\n\nReadable: True  Writable: True\n```\n\nExecute the `ios plist cat` command to inspect the content of userInfo.plist file.\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios plist cat userInfo.plist\n{\n        password = password123;\n        username = userName;\n}\n```\n\n#### Searching for SQLite Databases\n\niOS applications typically use SQLite databases to store data required by the application. Testers should check the data protection values of these files and their contents for sensitive data. Objection contains a module to interact with SQLite databases. It allows to dump the schema, their tables and query the records.\n\n```bash\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # sqlite connect Model.sqlite\nCaching local copy of database file...\nDownloading /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Library/Application Support/Model.sqlite to /var/folders/4m/dsg0mq_17g39g473z0996r7m0000gq/T/tmpdr_7rvxi.sqlite\nStreaming file from device...\nWriting bytes to destination...\nSuccessfully downloaded /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Library/Application Support/Model.sqlite to /var/folders/4m/dsg0mq_17g39g473z0996r7m0000gq/T/tmpdr_7rvxi.sqlite\nValidating SQLite database format\nConnected to SQLite database at: Model.sqlite\n\nSQLite @ Model.sqlite > .tables\n+--------------+\n| name         |\n+--------------+\n| ZUSER        |\n| Z_METADATA   |\n| Z_MODELCACHE |\n| Z_PRIMARYKEY |\n+--------------+\nTime: 0.013s\n\nSQLite @ Model.sqlite > select * from Z_PRIMARYKEY\n+-------+--------+---------+-------+\n| Z_ENT | Z_NAME | Z_SUPER | Z_MAX |\n+-------+--------+---------+-------+\n| 1     | User   | 0       | 0     |\n+-------+--------+---------+-------+\n1 row in set\nTime: 0.013s\n```\n\n#### Searching for Cache Databases\n\nBy default NSURLSession stores data, such as HTTP requests and responses in the Cache.db database. This database can contain sensitive data, if tokens, usernames or any other sensitive information has been cached. To find the cached information open the data directory of the app (`/var/mobile/Containers/Data/Application/<UUID>`) and go to `/Library/Caches/<Bundle Identifier>`. The WebKit cache is also being stored in the Cache.db file. Objection can open and interact with the database with the command `sqlite connect Cache.db`, as it is a normal SQLite database.\n\nIt is recommended to disable Caching this data, as it may contain sensitive information in the request or response. The following list below shows different ways of achieving this:\n\n1. It is recommended to remove Cached responses after logout. This can be done with the provided method by Apple called [`removeAllCachedResponses`](https://developer.apple.com/documentation/foundation/urlcache/1417802-removeallcachedresponses \"URLCache removeAllCachedResponses\")\n   You can call this method as follows:\n\n   `URLCache.shared.removeAllCachedResponses()`\n\n   This method will remove all cached requests and responses from Cache.db file.\n\n2. If you don't need to use the advantage of cookies it would be recommended to just use the [.ephemeral](https://developer.apple.com/documentation/foundation/urlsessionconfiguration/1410529-ephemeral \"urlsessionconfiguration ephemeral\") configuration property of URLSession, which will disable saving cookies and Caches.\n\n   [Apple documentation](https://developer.apple.com/documentation/foundation/urlsessionconfiguration/1410529-ephemeral \"urlsessionconfiguration ephemeral\"):\n\n   ```An ephemeral session configuration object is similar to a default session configuration (see default), except that the corresponding session object doesn’t store caches, credential stores, or any session-related data to disk. Instead, session-related data is stored in RAM. The only time an ephemeral session writes data to disk is when you tell it to write the contents of a URL to a file.```\n\n3. Cache can be also disabled by setting the Cache Policy to [.notAllowed](https://developer.apple.com/documentation/foundation/urlcache/storagepolicy/notallowed \"URLCachePolicy notAllowed\"). It will disable storing Cache in any fashion, either in memory or on disk."
  },
  {
    "id": "MASTG-TEST-0053",
    "title": "Checking Logs for Sensitive Data",
    "category": "Data Storage and Privacy",
    "description": "Use the following keywords to check the app's source code for predefined and custom logging statements:",
    "full_description": "## Overview\n\n## Static Analysis\n\nUse the following keywords to check the app's source code for predefined and custom logging statements:\n\n- For predefined and built-in functions:\n    - NSLog\n    - NSAssert\n    - NSCAssert\n    - fprintf\n- For custom functions:\n    - Logging\n    - Logfile\n\nA generalized approach to this issue is to use a define to enable `NSLog` statements for development and debugging, then disable them before shipping the software. You can do this by adding the following code to the appropriate PREFIX_HEADER (\\*.pch) file:\n\n```objectivec\n#ifdef DEBUG\n#   define NSLog (...) NSLog(__VA_ARGS__)\n#else\n#   define NSLog (...)\n#endif\n```\n\n## Static Analysis\n\nUse the following keywords to check the app's source code for predefined and custom logging statements:\n\n- For predefined and built-in functions:\n    - NSLog\n    - NSAssert\n    - NSCAssert\n    - fprintf\n- For custom functions:\n    - Logging\n    - Logfile\n\nA generalized approach to this issue is to use a define to enable `NSLog` statements for development and debugging, then disable them before shipping the software. You can do this by adding the following code to the appropriate PREFIX_HEADER (\\*.pch) file:\n\n```objectivec\n#ifdef DEBUG\n#   define NSLog (...) NSLog(__VA_ARGS__)\n#else\n#   define NSLog (...)\n#endif\n```\n\n## Dynamic Analysis\n\nSee @MASTG-TECH-0060 and once you're set up, navigate to a screen that displays input fields that take sensitive user information.\n\nAfter starting one of the methods, fill in the input fields. If sensitive data is displayed in the output, the app fails this test."
  },
  {
    "id": "MASTG-TEST-0054",
    "title": "Determining Whether Sensitive Data Is Shared with Third Parties",
    "category": "Data Storage and Privacy",
    "description": "To determine whether API calls and functions provided by the third-party library are used according to best practices, review their source code, requested permissions and check for any known vulnerabi...",
    "full_description": "## Overview\n\nSensitive information might be leaked to third parties by several means. On iOS typically via third-party services embedded in the app.\n\nThe features these services provide can involve tracking services to monitor the user's behavior while using the app, selling banner advertisements, or improving the user experience.\n\nThe downside is that developers don't usually know the details of the code executed via third-party libraries. Consequently, no more information than is necessary should be sent to a service, and no sensitive information should be disclosed.\n\nMost third-party services are implemented in two ways:\n\n- with a standalone library\n- with a full SDK\n\n## Static Analysis\n\nTo determine whether API calls and functions provided by the third-party library are used according to best practices, review their source code, requested permissions and check for any known vulnerabilities.\n\nAll data that's sent to third-party services should be anonymized to prevent exposure of PII (Personal Identifiable Information) that would allow the third party to identify the user account. No other data (such as IDs that can be mapped to a user account or session) should be sent to a third party.\n\n## Dynamic Analysis\n\nCheck all requests to external services for embedded sensitive information.\nTo intercept traffic between the client and server, you can perform dynamic analysis by launching a [Machine-in-the-Middle (MITM)](../../../Document/0x04f-Testing-Network-Communication.md#intercepting-network-traffic-through-mitm) attack (@MASTG-TECH-0062), for example using @MASTG-TOOL-0077 or @MASTG-TOOL-0079. Once you route the traffic through the interception proxy, you can try to sniff the traffic that passes between the app and server. All app requests that aren't sent directly to the server on which the main function is hosted should be checked for sensitive information, such as PII in a tracker or ad service."
  },
  {
    "id": "MASTG-TEST-0055",
    "title": "Finding Sensitive Data in the Keyboard Cache",
    "category": "Data Storage and Privacy",
    "description": "- Search through the source code for similar implementations, such as",
    "full_description": "## Overview\n\n## Static Analysis\n\n- Search through the source code for similar implementations, such as\n\n```objectivec\n  textObject.autocorrectionType = UITextAutocorrectionTypeNo;\n  textObject.secureTextEntry = YES;\n```\n\n- Open xib and storyboard files in the `Interface Builder` of Xcode and verify the states of `Secure Text Entry` and `Correction` in the `Attributes Inspector` for the appropriate object.\n\nThe application must prevent the caching of sensitive information entered into text fields. You can prevent caching by disabling it programmatically, using the `textObject.autocorrectionType = UITextAutocorrectionTypeNo` directive in the desired UITextFields, UITextViews, and UISearchBars. For data that should be masked, such as PINs and passwords, set `textObject.secureTextEntry` to `YES`.\n\n```objectivec\nUITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];\ntextField.autocorrectionType = UITextAutocorrectionTypeNo;\n```\n\n## Static Analysis\n\n- Search through the source code for similar implementations, such as\n\n```objectivec\n  textObject.autocorrectionType = UITextAutocorrectionTypeNo;\n  textObject.secureTextEntry = YES;\n```\n\n- Open xib and storyboard files in the `Interface Builder` of Xcode and verify the states of `Secure Text Entry` and `Correction` in the `Attributes Inspector` for the appropriate object.\n\nThe application must prevent the caching of sensitive information entered into text fields. You can prevent caching by disabling it programmatically, using the `textObject.autocorrectionType = UITextAutocorrectionTypeNo` directive in the desired UITextFields, UITextViews, and UISearchBars. For data that should be masked, such as PINs and passwords, set `textObject.secureTextEntry` to `YES`.\n\n```objectivec\nUITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];\ntextField.autocorrectionType = UITextAutocorrectionTypeNo;\n```\n\n## Dynamic Analysis\n\nIf a jailbroken iPhone is available, execute the following steps:\n\n1. Reset your iOS device keyboard cache by navigating to `Settings > General > Reset > Reset Keyboard Dictionary`.\n2. Use the application and identify the functionalities that allow users to enter sensitive data.\n3. Retrieve the keyboard cache file with the extension `.dat` from the following directory and its subdirectories (which might be different for iOS versions before 8.0) by @MASTG-TECH-0052:\n`/private/var/mobile/Library/Keyboard/`\n4. Look for sensitive data, such as username, passwords, email addresses, and credit card numbers. If the sensitive data can be obtained via the keyboard cache file, the app fails this test.\n\n```objectivec\nUITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];\ntextField.autocorrectionType = UITextAutocorrectionTypeNo;\n```\n\nIf you must use a non-jailbroken iPhone:\n\n1. Reset the keyboard cache.\n2. Key in all sensitive data.\n3. Use the app again and determine whether autocorrect suggests previously entered sensitive information."
  },
  {
    "id": "MASTG-TEST-0058",
    "title": "Testing Backups for Sensitive Data",
    "category": "Data Storage and Privacy",
    "description": "A backup of a device on which a mobile application has been installed will include all subdirectories (except for `Library/Caches/`) and files in the [app's private directory](https://developer.apple....",
    "full_description": "## Overview\n\n## Static Analysis\n\nA backup of a device on which a mobile application has been installed will include all subdirectories (except for `Library/Caches/`) and files in the [app's private directory](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW12 \"Directories of an iOS App\").\n\nTherefore, avoid storing sensitive data in plaintext within any of the files or folders that are in the app's private directory or subdirectories.\n\nAlthough all the files in `Documents/` and `Library/Application Support/` are always backed up by default, you can [exclude files from the backup](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW28 \"Where You Should Put Your App\\'s Files\") by calling `NSURL setResourceValue:forKey:error:` with the `NSURLIsExcludedFromBackupKey` key.\n\nYou can use the [NSURLIsExcludedFromBackupKey](https://developer.apple.com/reference/foundation/nsurl#//apple_ref/c/data/NSURLIsExcludedFromBackupKey \"NSURLIsExcludedFromBackupKey\") and [CFURLIsExcludedFromBackupKey](https://developer.apple.com/reference/corefoundation/cfurl-rd7#//apple_ref/c/data/kCFURLIsExcludedFromBackupKey \"kCFURLIsExcludedFromBackupKey\") file system properties to exclude files and directories from backups. An app that needs to exclude many files can do so by creating its own subdirectory and marking that directory excluded. Apps should create their own directories for exclusion instead of excluding system-defined directories.\n\nBoth file system properties are preferable to the deprecated approach of directly setting an extended attribute. All apps running on iOS version 5.1 and later should use these properties to exclude data from backups.\n\nThe following is [sample Objective-C code for excluding a file from a backup](https://developer.apple.com/library/content/qa/qa1719/index.html \"How do I prevent files from being backed up to iCloud and iTunes?\") on iOS 5.1 and later:\n\n```objectivec\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\nThe following is sample Swift code for excluding a file from a backup on iOS 5.1 and later, see [Swift excluding files from iCloud backup](https://bencoding.com/2017/02/20/swift-excluding-files-from-icloud-backup/) for more information:\n\n```swift\nenum ExcludeFileError: Error {\n    case fileDoesNotExist\n    case error(String)\n}\n\nfunc excludeFileFromBackup(filePath: URL) -> Result<Bool, ExcludeFileError> {\n    var file = filePath\n\n    do {\n        if FileManager.default.fileExists(atPath: file.path) {\n            var res = URLResourceValues()\n            res.isExcludedFromBackup = true\n            try file.setResourceValues(res)\n            return .success(true)\n\n        } else {\n            return .failure(.fileDoesNotExist)\n        }\n    } catch {\n        return .failure(.error(\"Error excluding \\(file.lastPathComponent) from backup \\(error)\"))\n    }\n}\n```\n\n## Static Analysis\n\nA backup of a device on which a mobile application has been installed will include all subdirectories (except for `Library/Caches/`) and files in the [app's private directory](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW12 \"Directories of an iOS App\").\n\nTherefore, avoid storing sensitive data in plaintext within any of the files or folders that are in the app's private directory or subdirectories.\n\nAlthough all the files in `Documents/` and `Library/Application Support/` are always backed up by default, you can [exclude files from the backup](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html#//apple_ref/doc/uid/TP40010672-CH2-SW28 \"Where You Should Put Your App\\'s Files\") by calling `NSURL setResourceValue:forKey:error:` with the `NSURLIsExcludedFromBackupKey` key.\n\nYou can use the [NSURLIsExcludedFromBackupKey](https://developer.apple.com/reference/foundation/nsurl#//apple_ref/c/data/NSURLIsExcludedFromBackupKey \"NSURLIsExcludedFromBackupKey\") and [CFURLIsExcludedFromBackupKey](https://developer.apple.com/reference/corefoundation/cfurl-rd7#//apple_ref/c/data/kCFURLIsExcludedFromBackupKey \"kCFURLIsExcludedFromBackupKey\") file system properties to exclude files and directories from backups. An app that needs to exclude many files can do so by creating its own subdirectory and marking that directory excluded. Apps should create their own directories for exclusion instead of excluding system-defined directories.\n\nBoth file system properties are preferable to the deprecated approach of directly setting an extended attribute. All apps running on iOS version 5.1 and later should use these properties to exclude data from backups.\n\nThe following is [sample Objective-C code for excluding a file from a backup](https://developer.apple.com/library/content/qa/qa1719/index.html \"How do I prevent files from being backed up to iCloud and iTunes?\") on iOS 5.1 and later:\n\n```objectivec\n- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n```\n\nThe following is sample Swift code for excluding a file from a backup on iOS 5.1 and later, see [Swift excluding files from iCloud backup](https://bencoding.com/2017/02/20/swift-excluding-files-from-icloud-backup/) for more information:\n\n```swift\nenum ExcludeFileError: Error {\n    case fileDoesNotExist\n    case error(String)\n}\n\nfunc excludeFileFromBackup(filePath: URL) -> Result<Bool, ExcludeFileError> {\n    var file = filePath\n\n    do {\n        if FileManager.default.fileExists(atPath: file.path) {\n            var res = URLResourceValues()\n            res.isExcludedFromBackup = true\n            try file.setResourceValues(res)\n            return .success(true)\n\n        } else {\n            return .failure(.fileDoesNotExist)\n        }\n    } catch {\n        return .failure(.error(\"Error excluding \\(file.lastPathComponent) from backup \\(error)\"))\n    }\n}\n```\n\n## Dynamic Analysis\n\nIn order to test the backup, you obviously need to create one first. The most common way to create a backup of an iOS device is by using iTunes, which is available for Windows, Linux and of course macOS (till macOS Mojave). When creating a backup via iTunes you can always only backup the whole device and not select just a single app. Make sure that the option \"Encrypt local backup\" in iTunes is not set, so that the backup is stored in cleartext on your hard drive.\n\n> iTunes is not available anymore from macOS Catalina onwards. Managing of an iOS device, including updates, backup and restore has been moved to the Finder app. The approach remains the same, as described above.\n\nAfter the iOS device has been backed up, you need to retrieve the file path of the backup, which are different locations on each OS. The official Apple documentation will help you to [locate backups of your iPhone, iPad, and iPod touch](https://support.apple.com/en-us/HT204215 \"Locate backups of your iPhone, iPad, and iPod touch\").\n\nWhen you want to navigate to the backup folder up to High Sierra you can easily do so. Starting with macOS Mojave you will get the following error (even as root):\n\n```bash\n$ pwd\n/Users/foo/Library/Application Support\n$ ls -alh MobileSync\nls: MobileSync: Operation not permitted\n```\n\nThis is not a permission issue of the backup folder, but a new feature in macOS Mojave. You can solve this problem by granting full disk access to your terminal application by following the explanation on [OSXDaily](http://osxdaily.com/2018/10/09/fix-operation-not-permitted-terminal-error-macos/ \"Fix Terminal -Operation not permitted- Error in MacOS Mojave\").\n\nBefore you can access the directory you need to select the folder with the UDID of your device. Check the section [\"Obtaining the UDID of an iOS device\"](../../../Document/0x06b-iOS-Security-Testing.md#obtaining-the-udid-of-an-ios-device) on how to retrieve it.\n\nOnce you know the UDID you can navigate into this directory and you will find the full backup of the whole device, which does include pictures, app data and whatever might have been stored on the device.\n\nReview the data that's in the backed up files and folders. The structure of the directories and file names is obfuscated and will look like this:\n\n```bash\n$ pwd\n/Users/foo/Library/Application Support/MobileSync/Backup/416f01bd160932d2bf2f95f1f142bc29b1c62dcb/00\n$ ls | head -n 3\n000127b08898088a8a169b4f63b363a3adcf389b\n0001fe89d0d03708d414b36bc6f706f567b08d66\n000200a644d7d2c56eec5b89c1921dacbec83c3e\n```\n\nTherefore, it's not straightforward to navigate through it and you will not find any hints of the app you want to analyze in the directory or file name. You can consider using the [iMazing](https://imazing.com \"iMazing\") shareware utility to assist here. Perform a device backup with iMazing and use its built-in backup explorer to easily analyze app container contents including original paths and file names.\n\nWithout iMazing or similar software you may need to resort to using grep to identify sensitive data. This is not the most thorough approach but you can try searching for sensitive data that you have keyed in while using the app before you made the backup. For example: the username, password, credit card data, PII or any data that is considered sensitive in the context of the app.\n\n```bash\n~/Library/Application Support/MobileSync/Backup/<UDID>\ngrep -iRn \"password\" .\n```\n\nAs described in the Static Analysis section, any sensitive data that you're able to find should be excluded from the backup, encrypted properly by using the Keychain or not stored on the device in the first place.\n\nTo identify if a backup is encrypted, you can check the key named \"IsEncrypted\" from the file \"Manifest.plist\", located at the root of the backup directory. The following example shows a configuration indicating that the backup is encrypted:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n...\n <key>Date</key>\n <date>2021-03-12T17:43:33Z</date>\n <key>IsEncrypted</key>\n <true/>\n...\n</plist>\n```\n\nIn case you need to work with an encrypted backup, there are some Python scripts in [DinoSec's GitHub repo](https://github.com/dinosec/iphone-dataprotection/tree/master/python_scripts \"iphone-dataprotection\"), such as backup_tool.py and backup_passwd.py, that will serve as a good starting point. However, note that they might not work with the latest iTunes/Finder versions and might need to be tweaked.\n\nYou can also use the tool @MASTG-TOOL-0053 to easily read and extract files from a password-encrypted iOS backup.\n\n### Proof of Concept: Removing UI Lock with Tampered Backup\n\nAs discussed earlier, sensitive data is not limited to just user data and PII. It can also be configuration or settings files that affect app behavior, restrict functionality, or enable security controls. If you take a look at the open source bitcoin wallet app, [Bither](https://github.com/bither/bither-ios \"Bither for iOS\"), you'll see that it's possible to configure a PIN to lock the UI. And after a few easy steps, you will see how to bypass this UI lock with a modified backup on a non-jailbroken device.\n\n<img src=\"Images/Chapters/0x06d/bither_demo_enable_pin.png\" width=\"300px\" />\n<img src=\"Images/Chapters/0x06d/bither_demo_pin_screen.png\" width=\"300px\" />\n\nAfter you enable the pin, use iMazing to perform a device backup:\n\n1. Select your device from the list under the **AVAILABLE** menu.\n2. Click the top menu option **Back Up**.\n3. Follow prompts to complete the backup using defaults.\n\nNext you can open the backup to view app container files within your target app:\n\n1. Select your device and click **Backups** on the top right menu.\n2. Click the backup you created and select **View**.\n3. Navigate to the Bither app from the **Apps** directory.\n\nAt this point you can view all the backed up content for Bither.\n\n<img src=\"Images/Chapters/0x06d/bither_demo_imazing_1.png\" width=\"100%\" />\n\nThis is where you can begin parsing through the files looking for sensitive data. In the screenshot you'll see the `net.bither.plist` file which contains the `pin_code` attribute. To remove the UI lock restriction, simply delete the `pin_code` attribute and save the changes.\n\nFrom there it's possible to easily restore the modified version of `net.bither.plist` back onto the device using the licensed version of iMazing.\n\nThe free workaround, however, is to find the plist file in the obfuscated backup generated by iTunes/Finder. So create your backup of the device with Bither's PIN code configured. Then, using the steps described earlier, find the backup directory and grep for \"pin_code\" as shown below.\n\n```bash\n$ ~/Library/Application Support/MobileSync/Backup/<UDID>\n$ grep -iRn \"pin_code\" .\nBinary file ./13/135416dd5f251f9251e0f07206277586b7eac6f6 matches\n```\n\nYou'll see there was a match on a binary file with an obfuscated name. This is your `net.bither.plist` file. Go ahead and rename the file giving it a plist extension so Xcode can easily open it up for you.\n\n<img src=\"Images/Chapters/0x06d/bither_demo_plist.png\" width=\"100%\" />\n\nAgain, remove the `pin_code` attribute from the plist and save your changes. Rename the file back to the original name (i.e., without the plist extension) and perform your backup restore. When the restore is complete you'll see that Bither no longer prompts you for the PIN code when launched."
  },
  {
    "id": "MASTG-TEST-0060",
    "title": "Testing Memory for Sensitive Data",
    "category": "Data Storage and Privacy",
    "description": "When performing static analysis for sensitive data exposed via memory, you should",
    "full_description": "## Overview\n\n## Static Analysis\n\nWhen performing static analysis for sensitive data exposed via memory, you should\n\n- try to identify application components and map where the data is used,\n- make sure that sensitive data is handled with as few components as possible,\n- make sure that object references are properly removed once the object containing sensitive data is no longer needed,\n- make sure that highly sensitive data is overwritten as soon as it is no longer needed,\n- not pass such data via immutable data types, such as `String` and `NSString`,\n- avoid non-primitive data types (because they might leave data behind),\n- overwrite the value in memory before removing references,\n- pay attention to third-party components (libraries and frameworks). Having a public API that handles data according to the recommendations above is a good indicator that developers considered the issues discussed here.\n\n## Static Analysis\n\nWhen performing static analysis for sensitive data exposed via memory, you should\n\n- try to identify application components and map where the data is used,\n- make sure that sensitive data is handled with as few components as possible,\n- make sure that object references are properly removed once the object containing sensitive data is no longer needed,\n- make sure that highly sensitive data is overwritten as soon as it is no longer needed,\n- not pass such data via immutable data types, such as `String` and `NSString`,\n- avoid non-primitive data types (because they might leave data behind),\n- overwrite the value in memory before removing references,\n- pay attention to third-party components (libraries and frameworks). Having a public API that handles data according to the recommendations above is a good indicator that developers considered the issues discussed here.\n\n## Dynamic Analysis\n\nThere are several approaches and tools available for dynamically testing the memory of an iOS app for sensitive data.\n\n### Retrieving and Analyzing a Memory Dump\n\nWhether you are using a jailbroken or a non-jailbroken device, you can dump the app's process memory with @MASTG-TOOL-0038 and @MASTG-TOOL-0106. You can find a detailed explanation of this process in @MASTG-TECH-0044.\n\nAfter the memory has been dumped (e.g. to a file called \"memory\"), depending on the nature of the data you're looking for, you'll need a set of different tools to process and analyze that memory dump. For instance, if you're focusing on strings, it might be sufficient for you to execute the command `strings` or `rabin2 -zz` from @MASTG-TOOL-0129 to extract those strings.\n\n```bash\n# using strings\n$ strings memory > strings.txt\n\n# using rabin2\n$ rabin2 -ZZ memory > strings.txt\n```\n\nOpen `strings.txt` in your favorite editor and dig through it to identify sensitive information.\n\nHowever if you'd like to inspect other kind of data, you'd rather want to use radare2 and its search capabilities. See radare2's help on the search command (`/?`) for more information and a list of options. The following shows only a subset of them:\n\n```bash\n$ r2 <name_of_your_dump_file>\n\n[0x00000000]> /?\nUsage: /[!bf] [arg]  Search stuff (see 'e??search' for options)\n|Use io.va for searching in non virtual addressing spaces\n| / foo\\x00                    search for string 'foo\\0'\n| /c[ar]                       search for crypto materials\n| /e /E.F/i                    match regular expression\n| /i foo                       search for string 'foo' ignoring case\n| /m[?][ebm] magicfile         search for magic, filesystems or binary headers\n| /v[1248] value               look for an `cfg.bigendian` 32bit value\n| /w foo                       search for wide string 'f\\0o\\0o\\0'\n| /x ff0033                    search for hex string\n| /z min max                   search for strings of given size\n...\n```\n\n### Runtime Memory Analysis\n\nPerform @MASTG-TECH-0096, e.g., using @MASTG-TOOL-0036, to analyze and inspect the app's memory while running and without needing to dump it.\n\nFor example, you may run the previous search commands from r2frida and search the memory for a string, hexadecimal values, etc. When doing so, remember to prepend the search command (and any other r2frida specific commands) with a backslash `:` after starting the session with `r2 frida://usb//<name_of_your_app>`."
  }
]